
mpu6005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800ac08  0800ac08  0001ac08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b04c  0800b04c  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800b04c  0800b04c  0001b04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b054  0800b054  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b054  0800b054  0001b054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b058  0800b058  0001b058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800b05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be0  20000350  0800b3ac  00020350  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f30  0800b3ac  00021f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019021  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f6  00000000  00000000  000393a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  0003cd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  0003dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0df  00000000  00000000  0003eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cf5  00000000  00000000  00058bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aba6  00000000  00000000  0006d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e10  00000000  00000000  000f84b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800abec 	.word	0x0800abec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0800abec 	.word	0x0800abec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f000 fabe 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f812 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 f8aa 	bl	8001014 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ec0:	f000 f87a 	bl	8000fb8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000ec4:	f006 fc9a 	bl	80077fc <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sensorTest_init();
 8000ec8:	f000 f902 	bl	80010d0 <sensorTest_init>

  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ecc:	2120      	movs	r1, #32
 8000ece:	4803      	ldr	r0, [pc, #12]	; (8000edc <main+0x2c>)
 8000ed0:	f000 fddc 	bl	8001a8c <HAL_GPIO_TogglePin>
	  //sensorTest_print_acc_values();
	  HAL_Delay(100);
 8000ed4:	2064      	movs	r0, #100	; 0x64
 8000ed6:	f000 fb1f 	bl	8001518 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000eda:	e7f7      	b.n	8000ecc <main+0x1c>
 8000edc:	40020000 	.word	0x40020000

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2230      	movs	r2, #48	; 0x30
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 f9a2 	bl	8008238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <SystemClock_Config+0xd0>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <SystemClock_Config+0xd0>)
 8000f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f12:	6413      	str	r3, [r2, #64]	; 0x40
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <SystemClock_Config+0xd0>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <SystemClock_Config+0xd4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <SystemClock_Config+0xd4>)
 8000f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <SystemClock_Config+0xd4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f54:	2319      	movs	r3, #25
 8000f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f62:	2307      	movs	r3, #7
 8000f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 feea 	bl	8003d44 <HAL_RCC_OscConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f76:	f000 f8a5 	bl	80010c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2101      	movs	r1, #1
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 f94c 	bl	8004234 <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fa2:	f000 f88f 	bl	80010c4 <Error_Handler>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3750      	adds	r7, #80	; 0x50
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fbe:	4a13      	ldr	r2, [pc, #76]	; (800100c <MX_I2C1_Init+0x54>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_I2C1_Init+0x58>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff6:	f000 fd63 	bl	8001ac0 <HAL_I2C_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001000:	f000 f860 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200005f0 	.word	0x200005f0
 800100c:	40005400 	.word	0x40005400
 8001010:	000186a0 	.word	0x000186a0

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a22      	ldr	r2, [pc, #136]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_GPIO_Init+0xa8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_GPIO_Init+0xa8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <MX_GPIO_Init+0xa8>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 800109a:	2320      	movs	r3, #32
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_GPIO_Init+0xac>)
 80010ae:	f000 fb69 	bl	8001784 <HAL_GPIO_Init>

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <sensorTest_init>:
static SensorData_t sensorData;



void sensorTest_init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    MPU6050_initialize(&sensorData, FS_1000, AFS_4G);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2102      	movs	r1, #2
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <sensorTest_init+0x14>)
 80010da:	f004 fde1 	bl	8005ca0 <MPU6050_initialize>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000370 	.word	0x20000370

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_MspInit+0x4c>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x4c>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_I2C_MspInit+0x84>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d12c      	bne.n	80011b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001176:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117c:	2312      	movs	r3, #18
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001188:	2304      	movs	r3, #4
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <HAL_I2C_MspInit+0x8c>)
 8001194:	f000 faf6 	bl	8001784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 80011a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40005400 	.word	0x40005400
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020400 	.word	0x40020400

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f000 f960 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <OTG_FS_IRQHandler+0x10>)
 8001222:	f001 fd5c 	bl	8002cde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20001b18 	.word	0x20001b18

08001230 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_kill>:

int _kill(int pid, int sig)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800124a:	f006 ffcb 	bl	80081e4 <__errno>
 800124e:	4603      	mov	r3, r0
 8001250:	2216      	movs	r2, #22
 8001252:	601a      	str	r2, [r3, #0]
	return -1;
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <_exit>:

void _exit (int status)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffe7 	bl	8001240 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001272:	e7fe      	b.n	8001272 <_exit+0x12>

08001274 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e00a      	b.n	800129c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001286:	f3af 8000 	nop.w
 800128a:	4601      	mov	r1, r0
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	60ba      	str	r2, [r7, #8]
 8001292:	b2ca      	uxtb	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf0      	blt.n	8001286 <_read+0x12>
	}

return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e009      	b.n	80012d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbf1      	blt.n	80012c0 <_write+0x12>
	}
	return len;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_close>:

int _close(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130e:	605a      	str	r2, [r3, #4]
	return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_isatty>:

int _isatty(int file)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	return 1;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f006 ff30 	bl	80081e4 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20018000 	.word	0x20018000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	200003c0 	.word	0x200003c0
 80013b8:	20001f30 	.word	0x20001f30

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001418 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013e6:	490e      	ldr	r1, [pc, #56]	; (8001420 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013fc:	4c0b      	ldr	r4, [pc, #44]	; (800142c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800140a:	f7ff ffd7 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f006 feef 	bl	80081f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff fd4d 	bl	8000eb0 <main>
  bx  lr    
 8001416:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001418:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001424:	0800b05c 	.word	0x0800b05c
  ldr r2, =_sbss
 8001428:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800142c:	20001f30 	.word	0x20001f30

08001430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <HAL_Init+0x40>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_Init+0x40>)
 800144a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_Init+0x40>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f94f 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	200f      	movs	r0, #15
 8001464:	f000 f808 	bl	8001478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff fe3e 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023c00 	.word	0x40023c00

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x54>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f967 	bl	800176a <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 f92f 	bl	8001716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_InitTick+0x5c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000644 	.word	0x20000644

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000644 	.word	0x20000644

08001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001530:	d005      	beq.n	800153e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_Delay+0x44>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153e:	bf00      	nop
 8001540:	f7ff ffde 	bl	8001500 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8f7      	bhi.n	8001540 <HAL_Delay+0x28>
  {
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f7ff ff8e 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff29 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff3e 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff8e 	bl	8001654 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5d 	bl	8001600 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff31 	bl	80015c4 <__NVIC_EnableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffa2 	bl	80016bc <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e159      	b.n	8001a54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f040 8148 	bne.w	8001a4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d005      	beq.n	80017d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d130      	bne.n	8001838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 0201 	and.w	r2, r3, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b03      	cmp	r3, #3
 8001842:	d017      	beq.n	8001874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d123      	bne.n	80018c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	69b9      	ldr	r1, [r7, #24]
 80018c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80a2 	beq.w	8001a4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001926:	4a52      	ldr	r2, [pc, #328]	; (8001a70 <HAL_GPIO_Init+0x2ec>)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a49      	ldr	r2, [pc, #292]	; (8001a74 <HAL_GPIO_Init+0x2f0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d019      	beq.n	8001986 <HAL_GPIO_Init+0x202>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2f4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x1fe>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a47      	ldr	r2, [pc, #284]	; (8001a7c <HAL_GPIO_Init+0x2f8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x1fa>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a46      	ldr	r2, [pc, #280]	; (8001a80 <HAL_GPIO_Init+0x2fc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x1f6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a45      	ldr	r2, [pc, #276]	; (8001a84 <HAL_GPIO_Init+0x300>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x1f2>
 8001972:	2304      	movs	r3, #4
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001976:	2307      	movs	r3, #7
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x204>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x204>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001986:	2300      	movs	r3, #0
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x2ec>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ca:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f4:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1e:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	f67f aea2 	bls.w	80017a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40013c00 	.word	0x40013c00

08001a8c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43d9      	mvns	r1, r3
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	400b      	ands	r3, r1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e12b      	b.n	8001d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fb26 	bl	8001138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2224      	movs	r2, #36	; 0x24
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b24:	f002 fd2e 	bl	8004584 <HAL_RCC_GetPCLK1Freq>
 8001b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a81      	ldr	r2, [pc, #516]	; (8001d34 <HAL_I2C_Init+0x274>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d807      	bhi.n	8001b44 <HAL_I2C_Init+0x84>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a80      	ldr	r2, [pc, #512]	; (8001d38 <HAL_I2C_Init+0x278>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	bf94      	ite	ls
 8001b3c:	2301      	movls	r3, #1
 8001b3e:	2300      	movhi	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	e006      	b.n	8001b52 <HAL_I2C_Init+0x92>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4a7d      	ldr	r2, [pc, #500]	; (8001d3c <HAL_I2C_Init+0x27c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	bf94      	ite	ls
 8001b4c:	2301      	movls	r3, #1
 8001b4e:	2300      	movhi	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0e7      	b.n	8001d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a78      	ldr	r2, [pc, #480]	; (8001d40 <HAL_I2C_Init+0x280>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0c9b      	lsrs	r3, r3, #18
 8001b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	; (8001d34 <HAL_I2C_Init+0x274>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d802      	bhi.n	8001b94 <HAL_I2C_Init+0xd4>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3301      	adds	r3, #1
 8001b92:	e009      	b.n	8001ba8 <HAL_I2C_Init+0xe8>
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4a69      	ldr	r2, [pc, #420]	; (8001d44 <HAL_I2C_Init+0x284>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	495c      	ldr	r1, [pc, #368]	; (8001d34 <HAL_I2C_Init+0x274>)
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	d819      	bhi.n	8001bfc <HAL_I2C_Init+0x13c>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e59      	subs	r1, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd6:	1c59      	adds	r1, r3, #1
 8001bd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bdc:	400b      	ands	r3, r1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00a      	beq.n	8001bf8 <HAL_I2C_Init+0x138>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1e59      	subs	r1, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf6:	e051      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e04f      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d111      	bne.n	8001c28 <HAL_I2C_Init+0x168>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1e58      	subs	r0, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e012      	b.n	8001c4e <HAL_I2C_Init+0x18e>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e58      	subs	r0, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	0099      	lsls	r1, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Init+0x196>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e022      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <HAL_I2C_Init+0x1bc>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e58      	subs	r0, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6859      	ldr	r1, [r3, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	440b      	add	r3, r1
 8001c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7a:	e00f      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	0099      	lsls	r1, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	6809      	ldr	r1, [r1, #0]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6911      	ldr	r1, [r2, #16]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68d2      	ldr	r2, [r2, #12]
 8001cd6:	4311      	orrs	r1, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	000186a0 	.word	0x000186a0
 8001d38:	001e847f 	.word	0x001e847f
 8001d3c:	003d08ff 	.word	0x003d08ff
 8001d40:	431bde83 	.word	0x431bde83
 8001d44:	10624dd3 	.word	0x10624dd3

08001d48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	4608      	mov	r0, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	817b      	strh	r3, [r7, #10]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	813b      	strh	r3, [r7, #8]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d62:	f7ff fbcd 	bl	8001500 <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	f040 80d9 	bne.w	8001f28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2319      	movs	r3, #25
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	496d      	ldr	r1, [pc, #436]	; (8001f34 <HAL_I2C_Mem_Write+0x1ec>)
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 fc7f 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0cc      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_I2C_Mem_Write+0x56>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e0c5      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d007      	beq.n	8001dc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2221      	movs	r2, #33	; 0x21
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a3a      	ldr	r2, [r7, #32]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4a4d      	ldr	r2, [pc, #308]	; (8001f38 <HAL_I2C_Mem_Write+0x1f0>)
 8001e04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e06:	88f8      	ldrh	r0, [r7, #6]
 8001e08:	893a      	ldrh	r2, [r7, #8]
 8001e0a:	8979      	ldrh	r1, [r7, #10]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4603      	mov	r3, r0
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fab6 	bl	8002388 <I2C_RequestMemoryWrite>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d052      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e081      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fd00 	bl	8002830 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00d      	beq.n	8001e52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d107      	bne.n	8001e4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06b      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_I2C_Mem_Write+0x180>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d017      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1aa      	bne.n	8001e26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fcec 	bl	80028b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00d      	beq.n	8001efc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d107      	bne.n	8001ef8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e016      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e000      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f28:	2302      	movs	r3, #2
  }
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	00100002 	.word	0x00100002
 8001f38:	ffff0000 	.word	0xffff0000

08001f3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	; 0x30
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	817b      	strh	r3, [r7, #10]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	813b      	strh	r3, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f56:	f7ff fad3 	bl	8001500 <HAL_GetTick>
 8001f5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	f040 8208 	bne.w	800237a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2319      	movs	r3, #25
 8001f70:	2201      	movs	r2, #1
 8001f72:	497b      	ldr	r1, [pc, #492]	; (8002160 <HAL_I2C_Mem_Read+0x224>)
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fb85 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f80:	2302      	movs	r3, #2
 8001f82:	e1fb      	b.n	800237c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_I2C_Mem_Read+0x56>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e1f4      	b.n	800237c <HAL_I2C_Mem_Read+0x440>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d007      	beq.n	8001fb8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2222      	movs	r2, #34	; 0x22
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2240      	movs	r2, #64	; 0x40
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4a5b      	ldr	r2, [pc, #364]	; (8002164 <HAL_I2C_Mem_Read+0x228>)
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ffa:	88f8      	ldrh	r0, [r7, #6]
 8001ffc:	893a      	ldrh	r2, [r7, #8]
 8001ffe:	8979      	ldrh	r1, [r7, #10]
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	4603      	mov	r3, r0
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fa52 	bl	80024b4 <I2C_RequestMemoryRead>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e1b0      	b.n	800237c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d113      	bne.n	800204a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	623b      	str	r3, [r7, #32]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e184      	b.n	8002354 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204e:	2b01      	cmp	r3, #1
 8002050:	d11b      	bne.n	800208a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e164      	b.n	8002354 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	2b02      	cmp	r3, #2
 8002090:	d11b      	bne.n	80020ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	e144      	b.n	8002354 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020e0:	e138      	b.n	8002354 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	f200 80f1 	bhi.w	80022ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d123      	bne.n	800213c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fc1b 	bl	8002934 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e139      	b.n	800237c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	855a      	strh	r2, [r3, #42]	; 0x2a
 800213a:	e10b      	b.n	8002354 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	2b02      	cmp	r3, #2
 8002142:	d14e      	bne.n	80021e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214a:	2200      	movs	r2, #0
 800214c:	4906      	ldr	r1, [pc, #24]	; (8002168 <HAL_I2C_Mem_Read+0x22c>)
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fa98 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e10e      	b.n	800237c <HAL_I2C_Mem_Read+0x440>
 800215e:	bf00      	nop
 8002160:	00100002 	.word	0x00100002
 8002164:	ffff0000 	.word	0xffff0000
 8002168:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021e0:	e0b8      	b.n	8002354 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	2200      	movs	r2, #0
 80021ea:	4966      	ldr	r1, [pc, #408]	; (8002384 <HAL_I2C_Mem_Read+0x448>)
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fa49 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0bf      	b.n	800237c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	2200      	movs	r2, #0
 8002246:	494f      	ldr	r1, [pc, #316]	; (8002384 <HAL_I2C_Mem_Read+0x448>)
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fa1b 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e091      	b.n	800237c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022cc:	e042      	b.n	8002354 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fb2e 	bl	8002934 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e04c      	b.n	800237c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d118      	bne.n	8002354 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	f47f aec2 	bne.w	80020e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800237a:	2302      	movs	r3, #2
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	00010004 	.word	0x00010004

08002388 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4603      	mov	r3, r0
 8002398:	817b      	strh	r3, [r7, #10]
 800239a:	460b      	mov	r3, r1
 800239c:	813b      	strh	r3, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f960 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00d      	beq.n	80023e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d8:	d103      	bne.n	80023e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e05f      	b.n	80024a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023e6:	897b      	ldrh	r3, [r7, #10]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	6a3a      	ldr	r2, [r7, #32]
 80023fa:	492d      	ldr	r1, [pc, #180]	; (80024b0 <I2C_RequestMemoryWrite+0x128>)
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f998 	bl	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e04c      	b.n	80024a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	6a39      	ldr	r1, [r7, #32]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fa02 	bl	8002830 <I2C_WaitOnTXEFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	2b04      	cmp	r3, #4
 8002438:	d107      	bne.n	800244a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002448:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e02b      	b.n	80024a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002454:	893b      	ldrh	r3, [r7, #8]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	611a      	str	r2, [r3, #16]
 800245e:	e021      	b.n	80024a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002460:	893b      	ldrh	r3, [r7, #8]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	b29b      	uxth	r3, r3
 8002466:	b2da      	uxtb	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	6a39      	ldr	r1, [r7, #32]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f9dc 	bl	8002830 <I2C_WaitOnTXEFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00d      	beq.n	800249a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b04      	cmp	r3, #4
 8002484:	d107      	bne.n	8002496 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002494:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e005      	b.n	80024a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800249a:	893b      	ldrh	r3, [r7, #8]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	00010002 	.word	0x00010002

080024b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	817b      	strh	r3, [r7, #10]
 80024c6:	460b      	mov	r3, r1
 80024c8:	813b      	strh	r3, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f8c2 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00d      	beq.n	8002522 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002514:	d103      	bne.n	800251e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0aa      	b.n	8002678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002522:	897b      	ldrh	r3, [r7, #10]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002530:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	4952      	ldr	r1, [pc, #328]	; (8002680 <I2C_RequestMemoryRead+0x1cc>)
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f8fa 	bl	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e097      	b.n	8002678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002560:	6a39      	ldr	r1, [r7, #32]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f964 	bl	8002830 <I2C_WaitOnTXEFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b04      	cmp	r3, #4
 8002574:	d107      	bne.n	8002586 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002584:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e076      	b.n	8002678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002590:	893b      	ldrh	r3, [r7, #8]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	611a      	str	r2, [r3, #16]
 800259a:	e021      	b.n	80025e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800259c:	893b      	ldrh	r3, [r7, #8]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ac:	6a39      	ldr	r1, [r7, #32]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f93e 	bl	8002830 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d107      	bne.n	80025d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e050      	b.n	8002678 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025d6:	893b      	ldrh	r3, [r7, #8]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	6a39      	ldr	r1, [r7, #32]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f923 	bl	8002830 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d107      	bne.n	8002608 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e035      	b.n	8002678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	2200      	movs	r2, #0
 8002624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f82b 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002642:	d103      	bne.n	800264c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e013      	b.n	8002678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002650:	897b      	ldrh	r3, [r7, #10]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	b2da      	uxtb	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	6a3a      	ldr	r2, [r7, #32]
 8002664:	4906      	ldr	r1, [pc, #24]	; (8002680 <I2C_RequestMemoryRead+0x1cc>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f863 	bl	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	00010002 	.word	0x00010002

08002684 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002694:	e025      	b.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d021      	beq.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7fe ff2f 	bl	8001500 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d116      	bne.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e023      	b.n	800272a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10d      	bne.n	8002708 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	e00c      	b.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4013      	ands	r3, r2
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	429a      	cmp	r2, r3
 8002726:	d0b6      	beq.n	8002696 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002740:	e051      	b.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	d123      	bne.n	800279a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002760:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800276a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0204 	orr.w	r2, r3, #4
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e046      	b.n	8002828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d021      	beq.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7fe fead 	bl	8001500 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d116      	bne.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e020      	b.n	8002828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10c      	bne.n	800280a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf14      	ite	ne
 8002802:	2301      	movne	r3, #1
 8002804:	2300      	moveq	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	e00b      	b.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	43da      	mvns	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d18d      	bne.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800283c:	e02d      	b.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f8ce 	bl	80029e0 <I2C_IsAcknowledgeFailed>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e02d      	b.n	80028aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d021      	beq.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7fe fe53 	bl	8001500 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d116      	bne.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e007      	b.n	80028aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b80      	cmp	r3, #128	; 0x80
 80028a6:	d1ca      	bne.n	800283e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028be:	e02d      	b.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f88d 	bl	80029e0 <I2C_IsAcknowledgeFailed>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e02d      	b.n	800292c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d021      	beq.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d8:	f7fe fe12 	bl	8001500 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d302      	bcc.n	80028ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e007      	b.n	800292c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d1ca      	bne.n	80028c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002940:	e042      	b.n	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b10      	cmp	r3, #16
 800294e:	d119      	bne.n	8002984 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0210 	mvn.w	r2, #16
 8002958:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e029      	b.n	80029d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002984:	f7fe fdbc 	bl	8001500 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	d302      	bcc.n	800299a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e007      	b.n	80029d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d1b5      	bne.n	8002942 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f6:	d11b      	bne.n	8002a30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f043 0204 	orr.w	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a40:	b08f      	sub	sp, #60	; 0x3c
 8002a42:	af0a      	add	r7, sp, #40	; 0x28
 8002a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e10f      	b.n	8002c70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f005 f8a6 	bl	8007bbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 fea1 	bl	80047d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	687e      	ldr	r6, [r7, #4]
 8002a9c:	466d      	mov	r5, sp
 8002a9e:	f106 0410 	add.w	r4, r6, #16
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ab2:	1d33      	adds	r3, r6, #4
 8002ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab6:	6838      	ldr	r0, [r7, #0]
 8002ab8:	f001 fd78 	bl	80045ac <USB_CoreInit>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0d0      	b.n	8002c70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 fe8f 	bl	80047f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e04a      	b.n	8002b76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	333d      	adds	r3, #61	; 0x3d
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	333c      	adds	r3, #60	; 0x3c
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	b298      	uxth	r0, r3
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3342      	adds	r3, #66	; 0x42
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	333f      	adds	r3, #63	; 0x3f
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	3344      	adds	r3, #68	; 0x44
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	3348      	adds	r3, #72	; 0x48
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3350      	adds	r3, #80	; 0x50
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	3301      	adds	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3af      	bcc.n	8002ae0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e044      	b.n	8002c10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d3b5      	bcc.n	8002b86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	687e      	ldr	r6, [r7, #4]
 8002c22:	466d      	mov	r5, sp
 8002c24:	f106 0410 	add.w	r4, r6, #16
 8002c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c34:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c38:	1d33      	adds	r3, r6, #4
 8002c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3c:	6838      	ldr	r0, [r7, #0]
 8002c3e:	f001 fe27 	bl	8004890 <USB_DevInit>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e00d      	b.n	8002c70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 fea3 	bl	80059b4 <USB_DevDisconnect>

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_PCD_Start+0x1c>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e020      	b.n	8002cd6 <HAL_PCD_Start+0x5e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d109      	bne.n	8002cb8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d005      	beq.n	8002cb8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 fd79 	bl	80047b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 fe53 	bl	8005972 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cde:	b590      	push	{r4, r7, lr}
 8002ce0:	b08d      	sub	sp, #52	; 0x34
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f002 ff11 	bl	8005b1c <USB_GetMode>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 839d 	bne.w	800343c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f002 fe75 	bl	80059f6 <USB_ReadInterrupts>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8393 	beq.w	800343a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 fe6c 	bl	80059f6 <USB_ReadInterrupts>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d107      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f002 0202 	and.w	r2, r2, #2
 8002d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f002 fe5a 	bl	80059f6 <USB_ReadInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d161      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0210 	bic.w	r2, r2, #16
 8002d5a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	3304      	adds	r3, #4
 8002d7a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	0c5b      	lsrs	r3, r3, #17
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d124      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d035      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	6a38      	ldr	r0, [r7, #32]
 8002da8:	f002 fc91 	bl	80056ce <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db8:	441a      	add	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dca:	441a      	add	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	619a      	str	r2, [r3, #24]
 8002dd0:	e016      	b.n	8002e00 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	0c5b      	lsrs	r3, r3, #17
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d110      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002de4:	2208      	movs	r2, #8
 8002de6:	4619      	mov	r1, r3
 8002de8:	6a38      	ldr	r0, [r7, #32]
 8002dea:	f002 fc70 	bl	80056ce <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dfa:	441a      	add	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0210 	orr.w	r2, r2, #16
 8002e0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 fdee 	bl	80059f6 <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e24:	d16e      	bne.n	8002f04 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 fdf4 	bl	8005a1c <USB_ReadDevAllOutEpInterrupt>
 8002e34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e36:	e062      	b.n	8002efe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d057      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fe19 	bl	8005a84 <USB_ReadDevOutEPInterrupt>
 8002e52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00c      	beq.n	8002e78 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fdb0 	bl	80039d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2308      	movs	r3, #8
 8002e92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 feaa 	bl	8003bf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eea:	461a      	mov	r2, r3
 8002eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d199      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 fd74 	bl	80059f6 <USB_ReadInterrupts>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f18:	f040 80c0 	bne.w	800309c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f002 fd95 	bl	8005a50 <USB_ReadDevAllInEpInterrupt>
 8002f26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f2c:	e0b2      	b.n	8003094 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80a7 	beq.w	8003088 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 fdbb 	bl	8005ac0 <USB_ReadDevInEPInterrupt>
 8002f4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d057      	beq.n	8003006 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69f9      	ldr	r1, [r7, #28]
 8002f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f76:	4013      	ands	r3, r2
 8002f78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	2301      	movs	r3, #1
 8002f8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d132      	bne.n	8002ffa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3348      	adds	r3, #72	; 0x48
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4403      	add	r3, r0
 8002fb4:	3344      	adds	r3, #68	; 0x44
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4419      	add	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4403      	add	r3, r0
 8002fc8:	3348      	adds	r3, #72	; 0x48
 8002fca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d113      	bne.n	8002ffa <HAL_PCD_IRQHandler+0x31c>
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3350      	adds	r3, #80	; 0x50
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d108      	bne.n	8002ffa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	f002 fdc3 	bl	8005b80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f004 fe5c 	bl	8007cbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301c:	461a      	mov	r2, r3
 800301e:	2308      	movs	r3, #8
 8003020:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003038:	461a      	mov	r2, r3
 800303a:	2310      	movs	r3, #16
 800303c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003054:	461a      	mov	r2, r3
 8003056:	2340      	movs	r3, #64	; 0x40
 8003058:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003070:	461a      	mov	r2, r3
 8003072:	2302      	movs	r3, #2
 8003074:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fc1b 	bl	80038be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	3301      	adds	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	2b00      	cmp	r3, #0
 8003098:	f47f af49 	bne.w	8002f2e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 fca8 	bl	80059f6 <USB_ReadInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030b0:	d122      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d108      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030d8:	2100      	movs	r1, #0
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fe26 	bl	8003d2c <HAL_PCDEx_LPM_Callback>
 80030e0:	e002      	b.n	80030e8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f004 fe62 	bl	8007dac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fc7a 	bl	80059f6 <USB_ReadInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310c:	d112      	bne.n	8003134 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f004 fe1e 	bl	8007d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003132:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f002 fc5c 	bl	80059f6 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003148:	f040 80c7 	bne.w	80032da <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2110      	movs	r1, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fcf6 	bl	8004b58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316c:	2300      	movs	r3, #0
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003170:	e056      	b.n	8003220 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317e:	461a      	mov	r2, r3
 8003180:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003184:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003196:	0151      	lsls	r1, r2, #5
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	440a      	add	r2, r1
 800319c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031a4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b6:	0151      	lsls	r1, r2, #5
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	440a      	add	r2, r1
 80031bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d2:	461a      	mov	r2, r3
 80031d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ea:	0151      	lsls	r1, r2, #5
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	440a      	add	r2, r1
 80031f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320a:	0151      	lsls	r1, r2, #5
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	440a      	add	r2, r1
 8003210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003214:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003218:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	3301      	adds	r3, #1
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003226:	429a      	cmp	r2, r3
 8003228:	d3a3      	bcc.n	8003172 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003238:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800323c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003256:	f043 030b 	orr.w	r3, r3, #11
 800325a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326c:	f043 030b 	orr.w	r3, r3, #11
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	e015      	b.n	80032a0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003286:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800328a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329a:	f043 030b 	orr.w	r3, r3, #11
 800329e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032c4:	461a      	mov	r2, r3
 80032c6:	f002 fc5b 	bl	8005b80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f002 fb89 	bl	80059f6 <USB_ReadInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d124      	bne.n	800333a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f002 fc1f 	bl	8005b38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 fc87 	bl	8004c12 <USB_GetDevSpeed>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681c      	ldr	r4, [r3, #0]
 8003310:	f001 f92c 	bl	800456c <HAL_RCC_GetHCLKFreq>
 8003314:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	4620      	mov	r0, r4
 8003320:	f001 f9a6 	bl	8004670 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f004 fcf2 	bl	8007d0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003338:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f002 fb59 	bl	80059f6 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b08      	cmp	r3, #8
 800334c:	d10a      	bne.n	8003364 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f004 fccf 	bl	8007cf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f002 0208 	and.w	r2, r2, #8
 8003362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 fb44 	bl	80059f6 <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003378:	d10f      	bne.n	800339a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f004 fd31 	bl	8007dec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fb29 	bl	80059f6 <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ae:	d10f      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f004 fd04 	bl	8007dc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f002 fb0e 	bl	80059f6 <USB_ReadInterrupts>
 80033da:	4603      	mov	r3, r0
 80033dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d10a      	bne.n	80033fc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f004 fd12 	bl	8007e10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f002 faf8 	bl	80059f6 <USB_ReadInterrupts>
 8003406:	4603      	mov	r3, r0
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d115      	bne.n	800343c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f004 fd02 	bl	8007e2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	e000      	b.n	800343c <HAL_PCD_IRQHandler+0x75e>
      return;
 800343a:	bf00      	nop
    }
  }
}
 800343c:	3734      	adds	r7, #52	; 0x34
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}

08003442 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_PCD_SetAddress+0x1a>
 8003458:	2302      	movs	r3, #2
 800345a:	e013      	b.n	8003484 <HAL_PCD_SetAddress+0x42>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f002 fa56 	bl	8005926 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	4608      	mov	r0, r1
 8003496:	4611      	mov	r1, r2
 8003498:	461a      	mov	r2, r3
 800349a:	4603      	mov	r3, r0
 800349c:	70fb      	strb	r3, [r7, #3]
 800349e:	460b      	mov	r3, r1
 80034a0:	803b      	strh	r3, [r7, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da0f      	bge.n	80034d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	3338      	adds	r3, #56	; 0x38
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	3304      	adds	r3, #4
 80034c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	705a      	strb	r2, [r3, #1]
 80034d0:	e00f      	b.n	80034f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	3304      	adds	r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034fe:	883a      	ldrh	r2, [r7, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	78ba      	ldrb	r2, [r7, #2]
 8003508:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800351c:	78bb      	ldrb	r3, [r7, #2]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d102      	bne.n	8003528 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_PCD_EP_Open+0xaa>
 8003532:	2302      	movs	r3, #2
 8003534:	e00e      	b.n	8003554 <HAL_PCD_EP_Open+0xc8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	4618      	mov	r0, r3
 8003546:	f001 fb89 	bl	8004c5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003552:	7afb      	ldrb	r3, [r7, #11]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	da0f      	bge.n	8003590 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3338      	adds	r3, #56	; 0x38
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	3304      	adds	r3, #4
 8003586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	705a      	strb	r2, [r3, #1]
 800358e:	e00f      	b.n	80035b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	3304      	adds	r3, #4
 80035a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_PCD_EP_Close+0x6e>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e00e      	b.n	80035e8 <HAL_PCD_EP_Close+0x8c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 fbc7 	bl	8004d6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	460b      	mov	r3, r1
 80035fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003600:	7afb      	ldrb	r3, [r7, #11]
 8003602:	f003 020f 	and.w	r2, r3, #15
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	3304      	adds	r3, #4
 8003618:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2200      	movs	r2, #0
 8003630:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003632:	7afb      	ldrb	r3, [r7, #11]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d102      	bne.n	800364c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800364c:	7afb      	ldrb	r3, [r7, #11]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	f001 fea2 	bl	80053ac <USB_EP0StartXfer>
 8003668:	e008      	b.n	800367c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	6979      	ldr	r1, [r7, #20]
 8003678:	f001 fc54 	bl	8004f24 <USB_EPStartXfer>
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036a8:	681b      	ldr	r3, [r3, #0]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	460b      	mov	r3, r1
 80036c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c6:	7afb      	ldrb	r3, [r7, #11]
 80036c8:	f003 020f 	and.w	r2, r3, #15
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	3338      	adds	r3, #56	; 0x38
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2201      	movs	r2, #1
 80036f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f6:	7afb      	ldrb	r3, [r7, #11]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003710:	7afb      	ldrb	r3, [r7, #11]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	6979      	ldr	r1, [r7, #20]
 8003728:	f001 fe40 	bl	80053ac <USB_EP0StartXfer>
 800372c:	e008      	b.n	8003740 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	6979      	ldr	r1, [r7, #20]
 800373c:	f001 fbf2 	bl	8004f24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d901      	bls.n	8003768 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e050      	b.n	800380a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376c:	2b00      	cmp	r3, #0
 800376e:	da0f      	bge.n	8003790 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3338      	adds	r3, #56	; 0x38
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	3304      	adds	r3, #4
 8003786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	705a      	strb	r2, [r3, #1]
 800378e:	e00d      	b.n	80037ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	3304      	adds	r3, #4
 80037a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_PCD_EP_SetStall+0x82>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e01e      	b.n	800380a <HAL_PCD_EP_SetStall+0xc0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 ffcf 	bl	800577e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	b2d9      	uxtb	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037fa:	461a      	mov	r2, r3
 80037fc:	f002 f9c0 	bl	8005b80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	460b      	mov	r3, r1
 800381c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d901      	bls.n	8003830 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e042      	b.n	80038b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003834:	2b00      	cmp	r3, #0
 8003836:	da0f      	bge.n	8003858 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	3338      	adds	r3, #56	; 0x38
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	3304      	adds	r3, #4
 800384e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	705a      	strb	r2, [r3, #1]
 8003856:	e00f      	b.n	8003878 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	3304      	adds	r3, #4
 8003870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_PCD_EP_ClrStall+0x86>
 8003894:	2302      	movs	r3, #2
 8003896:	e00e      	b.n	80038b6 <HAL_PCD_EP_ClrStall+0xa4>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 ffd7 	bl	800585a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b08a      	sub	sp, #40	; 0x28
 80038c2:	af02      	add	r7, sp, #8
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3338      	adds	r3, #56	; 0x38
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	3304      	adds	r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d901      	bls.n	80038f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e06c      	b.n	80039d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	429a      	cmp	r2, r3
 800390a:	d902      	bls.n	8003912 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3303      	adds	r3, #3
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800391a:	e02b      	b.n	8003974 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	429a      	cmp	r2, r3
 8003930:	d902      	bls.n	8003938 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3303      	adds	r3, #3
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68d9      	ldr	r1, [r3, #12]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003950:	b2db      	uxtb	r3, r3
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4603      	mov	r3, r0
 8003956:	6978      	ldr	r0, [r7, #20]
 8003958:	f001 fe7b 	bl	8005652 <USB_WritePacket>

    ep->xfer_buff  += len;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	441a      	add	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	441a      	add	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	b29b      	uxth	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	429a      	cmp	r2, r3
 8003988:	d809      	bhi.n	800399e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003992:	429a      	cmp	r2, r3
 8003994:	d203      	bcs.n	800399e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1be      	bne.n	800391c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d811      	bhi.n	80039ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	2201      	movs	r2, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	6939      	ldr	r1, [r7, #16]
 80039c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ca:	4013      	ands	r3, r2
 80039cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	333c      	adds	r3, #60	; 0x3c
 80039f0:	3304      	adds	r3, #4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	f040 80a0 	bne.w	8003b50 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d015      	beq.n	8003a46 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a72      	ldr	r2, [pc, #456]	; (8003be8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	f240 80dd 	bls.w	8003bde <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80d7 	beq.w	8003bde <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a42:	6093      	str	r3, [r2, #8]
 8003a44:	e0cb      	b.n	8003bde <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2320      	movs	r3, #32
 8003a60:	6093      	str	r3, [r2, #8]
 8003a62:	e0bc      	b.n	8003bde <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 80b7 	bne.w	8003bde <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a5d      	ldr	r2, [pc, #372]	; (8003be8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d90f      	bls.n	8003a98 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a94:	6093      	str	r3, [r2, #8]
 8003a96:	e0a2      	b.n	8003bde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003aaa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	0159      	lsls	r1, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003abe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4403      	add	r3, r0
 8003ace:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ad2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ae6:	6819      	ldr	r1, [r3, #0]
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4403      	add	r3, r0
 8003af6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4419      	add	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4403      	add	r3, r0
 8003b0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b10:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d114      	bne.n	8003b42 <PCD_EP_OutXfrComplete_int+0x16a>
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d108      	bne.n	8003b42 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	f002 f81f 	bl	8005b80 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f004 f89d 	bl	8007c88 <HAL_PCD_DataOutStageCallback>
 8003b4e:	e046      	b.n	8003bde <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a26      	ldr	r2, [pc, #152]	; (8003bec <PCD_EP_OutXfrComplete_int+0x214>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d124      	bne.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b74:	6093      	str	r3, [r2, #8]
 8003b76:	e032      	b.n	8003bde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2320      	movs	r3, #32
 8003b92:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f004 f874 	bl	8007c88 <HAL_PCD_DataOutStageCallback>
 8003ba0:	e01d      	b.n	8003bde <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d114      	bne.n	8003bd2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d108      	bne.n	8003bd2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2100      	movs	r1, #0
 8003bce:	f001 ffd7 	bl	8005b80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f004 f855 	bl	8007c88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	4f54300a 	.word	0x4f54300a
 8003bec:	4f54310a 	.word	0x4f54310a

08003bf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	333c      	adds	r3, #60	; 0x3c
 8003c08:	3304      	adds	r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d90e      	bls.n	8003c44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f004 f80d 	bl	8007c64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d90c      	bls.n	8003c6c <PCD_EP_OutSetupPacket_int+0x7c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d108      	bne.n	8003c6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c64:	461a      	mov	r2, r3
 8003c66:	2101      	movs	r1, #1
 8003c68:	f001 ff8a 	bl	8005b80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	4f54300a 	.word	0x4f54300a

08003c7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	70fb      	strb	r3, [r7, #3]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c9a:	883b      	ldrh	r3, [r7, #0]
 8003c9c:	0419      	lsls	r1, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca8:	e028      	b.n	8003cfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e00d      	b.n	8003cda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	3340      	adds	r3, #64	; 0x40
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3ec      	bcc.n	8003cbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ce4:	883b      	ldrh	r3, [r7, #0]
 8003ce6:	0418      	lsls	r0, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	4302      	orrs	r2, r0
 8003cf4:	3340      	adds	r3, #64	; 0x40
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e264      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d075      	beq.n	8003e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d62:	4ba3      	ldr	r3, [pc, #652]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d00c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4ba0      	ldr	r3, [pc, #640]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d112      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b9d      	ldr	r3, [pc, #628]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d86:	d10b      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	4b99      	ldr	r3, [pc, #612]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05b      	beq.n	8003e4c <HAL_RCC_OscConfig+0x108>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d157      	bne.n	8003e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e23f      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d106      	bne.n	8003db8 <HAL_RCC_OscConfig+0x74>
 8003daa:	4b91      	ldr	r3, [pc, #580]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a90      	ldr	r2, [pc, #576]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e01d      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x98>
 8003dc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a8a      	ldr	r2, [pc, #552]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b88      	ldr	r3, [pc, #544]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a87      	ldr	r2, [pc, #540]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003ddc:	4b84      	ldr	r3, [pc, #528]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a83      	ldr	r2, [pc, #524]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b81      	ldr	r3, [pc, #516]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a80      	ldr	r2, [pc, #512]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fb80 	bl	8001500 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fd fb7c 	bl	8001500 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e204      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b76      	ldr	r3, [pc, #472]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0xc0>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fd fb6c 	bl	8001500 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fd fb68 	bl	8001500 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1f0      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0xe8>
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d063      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5a:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b62      	ldr	r3, [pc, #392]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d11c      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b5f      	ldr	r3, [pc, #380]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d116      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e1c4      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4952      	ldr	r1, [pc, #328]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	e03a      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	4b4f      	ldr	r3, [pc, #316]	; (8003ff4 <HAL_RCC_OscConfig+0x2b0>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fd fb21 	bl	8001500 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec2:	f7fd fb1d 	bl	8001500 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e1a5      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed4:	4b46      	ldr	r3, [pc, #280]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee0:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4940      	ldr	r1, [pc, #256]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	e015      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef6:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_RCC_OscConfig+0x2b0>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fb00 	bl	8001500 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fd fafc 	bl	8001500 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e184      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f16:	4b36      	ldr	r3, [pc, #216]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d030      	beq.n	8003f90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f36:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <HAL_RCC_OscConfig+0x2b4>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fd fae0 	bl	8001500 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f44:	f7fd fadc 	bl	8001500 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e164      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x200>
 8003f62:	e015      	b.n	8003f90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCC_OscConfig+0x2b4>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fd fac9 	bl	8001500 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f72:	f7fd fac5 	bl	8001500 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e14d      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f0      	bne.n	8003f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a0 	beq.w	80040de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10f      	bne.n	8003fce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCC_OscConfig+0x2b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d121      	bne.n	800401e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fda:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <HAL_RCC_OscConfig+0x2b8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <HAL_RCC_OscConfig+0x2b8>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fa8b 	bl	8001500 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	e011      	b.n	8004012 <HAL_RCC_OscConfig+0x2ce>
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	42470000 	.word	0x42470000
 8003ff8:	42470e80 	.word	0x42470e80
 8003ffc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fd fa7e 	bl	8001500 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e106      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b85      	ldr	r3, [pc, #532]	; (8004228 <HAL_RCC_OscConfig+0x4e4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x2f0>
 8004026:	4b81      	ldr	r3, [pc, #516]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a80      	ldr	r2, [pc, #512]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
 8004032:	e01c      	b.n	800406e <HAL_RCC_OscConfig+0x32a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d10c      	bne.n	8004056 <HAL_RCC_OscConfig+0x312>
 800403c:	4b7b      	ldr	r3, [pc, #492]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4a7a      	ldr	r2, [pc, #488]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004042:	f043 0304 	orr.w	r3, r3, #4
 8004046:	6713      	str	r3, [r2, #112]	; 0x70
 8004048:	4b78      	ldr	r3, [pc, #480]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4a77      	ldr	r2, [pc, #476]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	; 0x70
 8004054:	e00b      	b.n	800406e <HAL_RCC_OscConfig+0x32a>
 8004056:	4b75      	ldr	r3, [pc, #468]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a74      	ldr	r2, [pc, #464]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
 8004062:	4b72      	ldr	r3, [pc, #456]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a71      	ldr	r2, [pc, #452]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d015      	beq.n	80040a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fd fa43 	bl	8001500 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fd fa3f 	bl	8001500 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0c5      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ee      	beq.n	800407e <HAL_RCC_OscConfig+0x33a>
 80040a0:	e014      	b.n	80040cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a2:	f7fd fa2d 	bl	8001500 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fd fa29 	bl	8001500 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0af      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	4b5a      	ldr	r3, [pc, #360]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ee      	bne.n	80040aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d2:	4b56      	ldr	r3, [pc, #344]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4a55      	ldr	r2, [pc, #340]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 809b 	beq.w	800421e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e8:	4b50      	ldr	r3, [pc, #320]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d05c      	beq.n	80041ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d141      	bne.n	8004180 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <HAL_RCC_OscConfig+0x4ec>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fd f9fd 	bl	8001500 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410a:	f7fd f9f9 	bl	8001500 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e081      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411c:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	019b      	lsls	r3, r3, #6
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	3b01      	subs	r3, #1
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	4937      	ldr	r1, [pc, #220]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_RCC_OscConfig+0x4ec>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd f9d2 	bl	8001500 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd f9ce 	bl	8001500 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e056      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004172:	4b2e      	ldr	r3, [pc, #184]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x41c>
 800417e:	e04e      	b.n	800421e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_OscConfig+0x4ec>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fd f9bb 	bl	8001500 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418e:	f7fd f9b7 	bl	8001500 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e03f      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x44a>
 80041ac:	e037      	b.n	800421e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e032      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ba:	4b1c      	ldr	r3, [pc, #112]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d028      	beq.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d121      	bne.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d11a      	bne.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041ea:	4013      	ands	r3, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d111      	bne.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d107      	bne.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40007000 	.word	0x40007000
 800422c:	40023800 	.word	0x40023800
 8004230:	42470060 	.word	0x42470060

08004234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0cc      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004248:	4b68      	ldr	r3, [pc, #416]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d90c      	bls.n	8004270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0b8      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004288:	4b59      	ldr	r3, [pc, #356]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a58      	ldr	r2, [pc, #352]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a0:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a52      	ldr	r2, [pc, #328]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	494d      	ldr	r1, [pc, #308]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d044      	beq.n	8004354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d119      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f2:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e06f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e067      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4934      	ldr	r1, [pc, #208]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004324:	f7fd f8ec 	bl	8001500 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	e00a      	b.n	8004342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fd f8e8 	bl	8001500 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e04f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 020c 	and.w	r2, r3, #12
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d1eb      	bne.n	800432c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004354:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d20c      	bcs.n	800437c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e032      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004388:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4916      	ldr	r1, [pc, #88]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	490e      	ldr	r1, [pc, #56]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ba:	f000 f821 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	490a      	ldr	r1, [pc, #40]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	5ccb      	ldrb	r3, [r1, r3]
 80043ce:	fa22 f303 	lsr.w	r3, r2, r3
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd f84c 	bl	8001478 <HAL_InitTick>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023c00 	.word	0x40023c00
 80043f0:	40023800 	.word	0x40023800
 80043f4:	0800ac50 	.word	0x0800ac50
 80043f8:	20000000 	.word	0x20000000
 80043fc:	20000004 	.word	0x20000004

08004400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	b5b0      	push	{r4, r5, r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004406:	2100      	movs	r1, #0
 8004408:	6079      	str	r1, [r7, #4]
 800440a:	2100      	movs	r1, #0
 800440c:	60f9      	str	r1, [r7, #12]
 800440e:	2100      	movs	r1, #0
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004412:	2100      	movs	r1, #0
 8004414:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004416:	4952      	ldr	r1, [pc, #328]	; (8004560 <HAL_RCC_GetSysClockFreq+0x160>)
 8004418:	6889      	ldr	r1, [r1, #8]
 800441a:	f001 010c 	and.w	r1, r1, #12
 800441e:	2908      	cmp	r1, #8
 8004420:	d00d      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0x3e>
 8004422:	2908      	cmp	r1, #8
 8004424:	f200 8094 	bhi.w	8004550 <HAL_RCC_GetSysClockFreq+0x150>
 8004428:	2900      	cmp	r1, #0
 800442a:	d002      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0x32>
 800442c:	2904      	cmp	r1, #4
 800442e:	d003      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x38>
 8004430:	e08e      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004432:	4b4c      	ldr	r3, [pc, #304]	; (8004564 <HAL_RCC_GetSysClockFreq+0x164>)
 8004434:	60bb      	str	r3, [r7, #8]
       break;
 8004436:	e08e      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004438:	4b4b      	ldr	r3, [pc, #300]	; (8004568 <HAL_RCC_GetSysClockFreq+0x168>)
 800443a:	60bb      	str	r3, [r7, #8]
      break;
 800443c:	e08b      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800443e:	4948      	ldr	r1, [pc, #288]	; (8004560 <HAL_RCC_GetSysClockFreq+0x160>)
 8004440:	6849      	ldr	r1, [r1, #4]
 8004442:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004446:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004448:	4945      	ldr	r1, [pc, #276]	; (8004560 <HAL_RCC_GetSysClockFreq+0x160>)
 800444a:	6849      	ldr	r1, [r1, #4]
 800444c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004450:	2900      	cmp	r1, #0
 8004452:	d024      	beq.n	800449e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004454:	4942      	ldr	r1, [pc, #264]	; (8004560 <HAL_RCC_GetSysClockFreq+0x160>)
 8004456:	6849      	ldr	r1, [r1, #4]
 8004458:	0989      	lsrs	r1, r1, #6
 800445a:	4608      	mov	r0, r1
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004464:	f04f 0500 	mov.w	r5, #0
 8004468:	ea00 0204 	and.w	r2, r0, r4
 800446c:	ea01 0305 	and.w	r3, r1, r5
 8004470:	493d      	ldr	r1, [pc, #244]	; (8004568 <HAL_RCC_GetSysClockFreq+0x168>)
 8004472:	fb01 f003 	mul.w	r0, r1, r3
 8004476:	2100      	movs	r1, #0
 8004478:	fb01 f102 	mul.w	r1, r1, r2
 800447c:	1844      	adds	r4, r0, r1
 800447e:	493a      	ldr	r1, [pc, #232]	; (8004568 <HAL_RCC_GetSysClockFreq+0x168>)
 8004480:	fba2 0101 	umull	r0, r1, r2, r1
 8004484:	1863      	adds	r3, r4, r1
 8004486:	4619      	mov	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	461a      	mov	r2, r3
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	f7fc fb92 	bl	8000bb8 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4613      	mov	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	e04a      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449e:	4b30      	ldr	r3, [pc, #192]	; (8004560 <HAL_RCC_GetSysClockFreq+0x160>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	461a      	mov	r2, r3
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	ea02 0400 	and.w	r4, r2, r0
 80044b6:	ea03 0501 	and.w	r5, r3, r1
 80044ba:	4620      	mov	r0, r4
 80044bc:	4629      	mov	r1, r5
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	014b      	lsls	r3, r1, #5
 80044c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044cc:	0142      	lsls	r2, r0, #5
 80044ce:	4610      	mov	r0, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	1b00      	subs	r0, r0, r4
 80044d4:	eb61 0105 	sbc.w	r1, r1, r5
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	018b      	lsls	r3, r1, #6
 80044e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044e6:	0182      	lsls	r2, r0, #6
 80044e8:	1a12      	subs	r2, r2, r0
 80044ea:	eb63 0301 	sbc.w	r3, r3, r1
 80044ee:	f04f 0000 	mov.w	r0, #0
 80044f2:	f04f 0100 	mov.w	r1, #0
 80044f6:	00d9      	lsls	r1, r3, #3
 80044f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044fc:	00d0      	lsls	r0, r2, #3
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	1912      	adds	r2, r2, r4
 8004504:	eb45 0303 	adc.w	r3, r5, r3
 8004508:	f04f 0000 	mov.w	r0, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	0299      	lsls	r1, r3, #10
 8004512:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004516:	0290      	lsls	r0, r2, #10
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	461a      	mov	r2, r3
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	f7fc fb46 	bl	8000bb8 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004534:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <HAL_RCC_GetSysClockFreq+0x160>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	3301      	adds	r3, #1
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	60bb      	str	r3, [r7, #8]
      break;
 800454e:	e002      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <HAL_RCC_GetSysClockFreq+0x164>)
 8004552:	60bb      	str	r3, [r7, #8]
      break;
 8004554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004556:	68bb      	ldr	r3, [r7, #8]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bdb0      	pop	{r4, r5, r7, pc}
 8004560:	40023800 	.word	0x40023800
 8004564:	00f42400 	.word	0x00f42400
 8004568:	017d7840 	.word	0x017d7840

0800456c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_RCC_GetHCLKFreq+0x14>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000000 	.word	0x20000000

08004584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004588:	f7ff fff0 	bl	800456c <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	0a9b      	lsrs	r3, r3, #10
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4903      	ldr	r1, [pc, #12]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	0800ac60 	.word	0x0800ac60

080045ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045ac:	b084      	sub	sp, #16
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	f107 001c 	add.w	r0, r7, #28
 80045ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d122      	bne.n	800460a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d105      	bne.n	80045fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f001 fb1c 	bl	8005c3c <USB_CoreReset>
 8004604:	4603      	mov	r3, r0
 8004606:	73fb      	strb	r3, [r7, #15]
 8004608:	e01a      	b.n	8004640 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 fb10 	bl	8005c3c <USB_CoreReset>
 800461c:	4603      	mov	r3, r0
 800461e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
 8004632:	e005      	b.n	8004640 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10b      	bne.n	800465e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f043 0206 	orr.w	r2, r3, #6
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800466a:	b004      	add	sp, #16
 800466c:	4770      	bx	lr
	...

08004670 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	4613      	mov	r3, r2
 800467c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d165      	bne.n	8004750 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4a41      	ldr	r2, [pc, #260]	; (800478c <USB_SetTurnaroundTime+0x11c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d906      	bls.n	800469a <USB_SetTurnaroundTime+0x2a>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4a40      	ldr	r2, [pc, #256]	; (8004790 <USB_SetTurnaroundTime+0x120>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d202      	bcs.n	800469a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004694:	230f      	movs	r3, #15
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	e062      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4a3c      	ldr	r2, [pc, #240]	; (8004790 <USB_SetTurnaroundTime+0x120>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d306      	bcc.n	80046b0 <USB_SetTurnaroundTime+0x40>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4a3b      	ldr	r2, [pc, #236]	; (8004794 <USB_SetTurnaroundTime+0x124>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d202      	bcs.n	80046b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046aa:	230e      	movs	r3, #14
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	e057      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4a38      	ldr	r2, [pc, #224]	; (8004794 <USB_SetTurnaroundTime+0x124>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d306      	bcc.n	80046c6 <USB_SetTurnaroundTime+0x56>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4a37      	ldr	r2, [pc, #220]	; (8004798 <USB_SetTurnaroundTime+0x128>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d202      	bcs.n	80046c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046c0:	230d      	movs	r3, #13
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	e04c      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4a33      	ldr	r2, [pc, #204]	; (8004798 <USB_SetTurnaroundTime+0x128>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d306      	bcc.n	80046dc <USB_SetTurnaroundTime+0x6c>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4a32      	ldr	r2, [pc, #200]	; (800479c <USB_SetTurnaroundTime+0x12c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d802      	bhi.n	80046dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046d6:	230c      	movs	r3, #12
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	e041      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4a2f      	ldr	r2, [pc, #188]	; (800479c <USB_SetTurnaroundTime+0x12c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d906      	bls.n	80046f2 <USB_SetTurnaroundTime+0x82>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a2e      	ldr	r2, [pc, #184]	; (80047a0 <USB_SetTurnaroundTime+0x130>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d802      	bhi.n	80046f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046ec:	230b      	movs	r3, #11
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e036      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <USB_SetTurnaroundTime+0x130>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d906      	bls.n	8004708 <USB_SetTurnaroundTime+0x98>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a29      	ldr	r2, [pc, #164]	; (80047a4 <USB_SetTurnaroundTime+0x134>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d802      	bhi.n	8004708 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004702:	230a      	movs	r3, #10
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e02b      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <USB_SetTurnaroundTime+0x134>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d906      	bls.n	800471e <USB_SetTurnaroundTime+0xae>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <USB_SetTurnaroundTime+0x138>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d202      	bcs.n	800471e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004718:	2309      	movs	r3, #9
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	e020      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4a21      	ldr	r2, [pc, #132]	; (80047a8 <USB_SetTurnaroundTime+0x138>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d306      	bcc.n	8004734 <USB_SetTurnaroundTime+0xc4>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a20      	ldr	r2, [pc, #128]	; (80047ac <USB_SetTurnaroundTime+0x13c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d802      	bhi.n	8004734 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800472e:	2308      	movs	r3, #8
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e015      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4a1d      	ldr	r2, [pc, #116]	; (80047ac <USB_SetTurnaroundTime+0x13c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d906      	bls.n	800474a <USB_SetTurnaroundTime+0xda>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <USB_SetTurnaroundTime+0x140>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d202      	bcs.n	800474a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004744:	2307      	movs	r3, #7
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e00a      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800474a:	2306      	movs	r3, #6
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e007      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004756:	2309      	movs	r3, #9
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	e001      	b.n	8004760 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800475c:	2309      	movs	r3, #9
 800475e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	029b      	lsls	r3, r3, #10
 8004774:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	00d8acbf 	.word	0x00d8acbf
 8004790:	00e4e1c0 	.word	0x00e4e1c0
 8004794:	00f42400 	.word	0x00f42400
 8004798:	01067380 	.word	0x01067380
 800479c:	011a499f 	.word	0x011a499f
 80047a0:	01312cff 	.word	0x01312cff
 80047a4:	014ca43f 	.word	0x014ca43f
 80047a8:	016e3600 	.word	0x016e3600
 80047ac:	01a6ab1f 	.word	0x01a6ab1f
 80047b0:	01e84800 	.word	0x01e84800

080047b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f043 0201 	orr.w	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d115      	bne.n	8004846 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004826:	2001      	movs	r0, #1
 8004828:	f7fc fe76 	bl	8001518 <HAL_Delay>
      ms++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 f972 	bl	8005b1c <USB_GetMode>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d01e      	beq.n	800487c <USB_SetCurrentMode+0x84>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b31      	cmp	r3, #49	; 0x31
 8004842:	d9f0      	bls.n	8004826 <USB_SetCurrentMode+0x2e>
 8004844:	e01a      	b.n	800487c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d115      	bne.n	8004878 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004858:	2001      	movs	r0, #1
 800485a:	f7fc fe5d 	bl	8001518 <HAL_Delay>
      ms++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3301      	adds	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f001 f959 	bl	8005b1c <USB_GetMode>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <USB_SetCurrentMode+0x84>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b31      	cmp	r3, #49	; 0x31
 8004874:	d9f0      	bls.n	8004858 <USB_SetCurrentMode+0x60>
 8004876:	e001      	b.n	800487c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e005      	b.n	8004888 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b32      	cmp	r3, #50	; 0x32
 8004880:	d101      	bne.n	8004886 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004890:	b084      	sub	sp, #16
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800489e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	e009      	b.n	80048c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3340      	adds	r3, #64	; 0x40
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	2200      	movs	r2, #0
 80048bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	3301      	adds	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b0e      	cmp	r3, #14
 80048c8:	d9f2      	bls.n	80048b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d11c      	bne.n	800490a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048de:	f043 0302 	orr.w	r3, r3, #2
 80048e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
 8004908:	e00b      	b.n	8004922 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004928:	461a      	mov	r2, r3
 800492a:	2300      	movs	r3, #0
 800492c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004934:	4619      	mov	r1, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493c:	461a      	mov	r2, r3
 800493e:	680b      	ldr	r3, [r1, #0]
 8004940:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	2b01      	cmp	r3, #1
 8004946:	d10c      	bne.n	8004962 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800494e:	2100      	movs	r1, #0
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f945 	bl	8004be0 <USB_SetDevSpeed>
 8004956:	e008      	b.n	800496a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004958:	2101      	movs	r1, #1
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f940 	bl	8004be0 <USB_SetDevSpeed>
 8004960:	e003      	b.n	800496a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004962:	2103      	movs	r1, #3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f93b 	bl	8004be0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800496a:	2110      	movs	r1, #16
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f8f3 	bl	8004b58 <USB_FlushTxFifo>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f90f 	bl	8004ba0 <USB_FlushRxFifo>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	461a      	mov	r2, r3
 8004994:	2300      	movs	r3, #0
 8004996:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	461a      	mov	r2, r3
 80049a0:	2300      	movs	r3, #0
 80049a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049aa:	461a      	mov	r2, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	e043      	b.n	8004a3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049cc:	d118      	bne.n	8004a00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	461a      	mov	r2, r3
 80049e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e013      	b.n	8004a12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	461a      	mov	r2, r3
 80049f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e008      	b.n	8004a12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	461a      	mov	r2, r3
 8004a20:	2300      	movs	r3, #0
 8004a22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	461a      	mov	r2, r3
 8004a32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d3b7      	bcc.n	80049b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	e043      	b.n	8004ad4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a62:	d118      	bne.n	8004a96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	461a      	mov	r2, r3
 8004a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e013      	b.n	8004aa8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e008      	b.n	8004aa8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004acc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d3b7      	bcc.n	8004a4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004afc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f043 0210 	orr.w	r2, r3, #16
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699a      	ldr	r2, [r3, #24]
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <USB_DevInit+0x2c4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f043 0208 	orr.w	r2, r3, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d107      	bne.n	8004b44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b3c:	f043 0304 	orr.w	r3, r3, #4
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b50:	b004      	add	sp, #16
 8004b52:	4770      	bx	lr
 8004b54:	803c3800 	.word	0x803c3800

08004b58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3301      	adds	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	4a08      	ldr	r2, [pc, #32]	; (8004b9c <USB_FlushTxFifo+0x44>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e006      	b.n	8004b90 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d0f1      	beq.n	8004b72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	00030d40 	.word	0x00030d40

08004ba0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2210      	movs	r2, #16
 8004bb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <USB_FlushRxFifo+0x3c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e006      	b.n	8004bd0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d0f1      	beq.n	8004bb2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	00030d40 	.word	0x00030d40

08004be0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b087      	sub	sp, #28
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0306 	and.w	r3, r3, #6
 8004c2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]
 8004c36:	e00a      	b.n	8004c4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d002      	beq.n	8004c44 <USB_GetDevSpeed+0x32>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b06      	cmp	r3, #6
 8004c42:	d102      	bne.n	8004c4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c44:	2302      	movs	r3, #2
 8004c46:	75fb      	strb	r3, [r7, #23]
 8004c48:	e001      	b.n	8004c4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c4a:	230f      	movs	r3, #15
 8004c4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d13a      	bne.n	8004cee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c96:	4313      	orrs	r3, r2
 8004c98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d155      	bne.n	8004d5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	78db      	ldrb	r3, [r3, #3]
 8004cca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ccc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	059b      	lsls	r3, r3, #22
 8004cd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e036      	b.n	8004d5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	69da      	ldr	r2, [r3, #28]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	2101      	movs	r1, #1
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	68f9      	ldr	r1, [r7, #12]
 8004d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11a      	bne.n	8004d5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	78db      	ldrb	r3, [r3, #3]
 8004d40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d42:	430b      	orrs	r3, r1
 8004d44:	4313      	orrs	r3, r2
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d161      	bne.n	8004e4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d9e:	d11f      	bne.n	8004de0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	68f9      	ldr	r1, [r7, #12]
 8004dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e00:	4013      	ands	r3, r2
 8004e02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	2101      	movs	r1, #1
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	68f9      	ldr	r1, [r7, #12]
 8004e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e24:	4013      	ands	r3, r2
 8004e26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	0159      	lsls	r1, r3, #5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	440b      	add	r3, r1
 8004e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e42:	4619      	mov	r1, r3
 8004e44:	4b35      	ldr	r3, [pc, #212]	; (8004f1c <USB_DeactivateEndpoint+0x1b0>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]
 8004e4a:	e060      	b.n	8004f0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e62:	d11f      	bne.n	8004ea4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	2101      	movs	r1, #1
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	68f9      	ldr	r1, [r7, #12]
 8004ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	0159      	lsls	r1, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f06:	4619      	mov	r1, r3
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <USB_DeactivateEndpoint+0x1b4>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	ec337800 	.word	0xec337800
 8004f20:	eff37800 	.word	0xeff37800

08004f24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	; 0x28
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	f040 815c 	bne.w	80051fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d132      	bne.n	8004fb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fac:	0cdb      	lsrs	r3, r3, #19
 8004fae:	04db      	lsls	r3, r3, #19
 8004fb0:	6113      	str	r3, [r2, #16]
 8004fb2:	e074      	b.n	800509e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fce:	0cdb      	lsrs	r3, r3, #19
 8004fd0:	04db      	lsls	r3, r3, #19
 8004fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ff2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ff6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005004:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6959      	ldr	r1, [r3, #20]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	440b      	add	r3, r1
 8005010:	1e59      	subs	r1, r3, #1
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	fbb1 f3f3 	udiv	r3, r1, r3
 800501a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800501c:	4b9d      	ldr	r3, [pc, #628]	; (8005294 <USB_EPStartXfer+0x370>)
 800501e:	400b      	ands	r3, r1
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	0148      	lsls	r0, r1, #5
 8005024:	69f9      	ldr	r1, [r7, #28]
 8005026:	4401      	add	r1, r0
 8005028:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800502c:	4313      	orrs	r3, r2
 800502e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005046:	69b9      	ldr	r1, [r7, #24]
 8005048:	0148      	lsls	r0, r1, #5
 800504a:	69f9      	ldr	r1, [r7, #28]
 800504c:	4401      	add	r1, r0
 800504e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005052:	4313      	orrs	r3, r2
 8005054:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	78db      	ldrb	r3, [r3, #3]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d11f      	bne.n	800509e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005078:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800507c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005098:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800509c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d14b      	bne.n	800513c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	78db      	ldrb	r3, [r3, #3]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d128      	bne.n	800511a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d110      	bne.n	80050fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	0151      	lsls	r1, r2, #5
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	440a      	add	r2, r1
 80050ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	e00f      	b.n	800511a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	440a      	add	r2, r1
 8005110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005118:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005134:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e12f      	b.n	800539c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005156:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800515a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	78db      	ldrb	r3, [r3, #3]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d015      	beq.n	8005190 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8117 	beq.w	800539c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	2101      	movs	r1, #1
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	69f9      	ldr	r1, [r7, #28]
 8005186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800518a:	4313      	orrs	r3, r2
 800518c:	634b      	str	r3, [r1, #52]	; 0x34
 800518e:	e105      	b.n	800539c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d110      	bne.n	80051c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	e00f      	b.n	80051e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	68d9      	ldr	r1, [r3, #12]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	781a      	ldrb	r2, [r3, #0]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	b298      	uxth	r0, r3
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	4603      	mov	r3, r0
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fa2b 	bl	8005652 <USB_WritePacket>
 80051fc:	e0ce      	b.n	800539c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005218:	0cdb      	lsrs	r3, r3, #19
 800521a:	04db      	lsls	r3, r3, #19
 800521c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800523c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005240:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d126      	bne.n	8005298 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	4401      	add	r1, r0
 8005268:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800526c:	4313      	orrs	r3, r2
 800526e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800528e:	6113      	str	r3, [r2, #16]
 8005290:	e036      	b.n	8005300 <USB_EPStartXfer+0x3dc>
 8005292:	bf00      	nop
 8005294:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4413      	add	r3, r2
 80052a2:	1e5a      	subs	r2, r3, #1
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	8afb      	ldrh	r3, [r7, #22]
 80052be:	04d9      	lsls	r1, r3, #19
 80052c0:	4b39      	ldr	r3, [pc, #228]	; (80053a8 <USB_EPStartXfer+0x484>)
 80052c2:	400b      	ands	r3, r1
 80052c4:	69b9      	ldr	r1, [r7, #24]
 80052c6:	0148      	lsls	r0, r1, #5
 80052c8:	69f9      	ldr	r1, [r7, #28]
 80052ca:	4401      	add	r1, r0
 80052cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052d0:	4313      	orrs	r3, r2
 80052d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	8af9      	ldrh	r1, [r7, #22]
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f0:	69b9      	ldr	r1, [r7, #24]
 80052f2:	0148      	lsls	r0, r1, #5
 80052f4:	69f9      	ldr	r1, [r7, #28]
 80052f6:	4401      	add	r1, r0
 80052f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052fc:	4313      	orrs	r3, r2
 80052fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d10d      	bne.n	8005322 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	68d9      	ldr	r1, [r3, #12]
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	460a      	mov	r2, r1
 8005320:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	78db      	ldrb	r3, [r3, #3]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d128      	bne.n	800537c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d110      	bne.n	800535c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e00f      	b.n	800537c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800539a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	1ff80000 	.word	0x1ff80000

080053ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	f040 80cd 	bne.w	8005568 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d132      	bne.n	800543c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	0151      	lsls	r1, r2, #5
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	440a      	add	r2, r1
 8005410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005418:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005434:	0cdb      	lsrs	r3, r3, #19
 8005436:	04db      	lsls	r3, r3, #19
 8005438:	6113      	str	r3, [r2, #16]
 800543a:	e04e      	b.n	80054da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005456:	0cdb      	lsrs	r3, r3, #19
 8005458:	04db      	lsls	r3, r3, #19
 800545a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005476:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800547a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800547e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	d903      	bls.n	8005494 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ca:	6939      	ldr	r1, [r7, #16]
 80054cc:	0148      	lsls	r0, r1, #5
 80054ce:	6979      	ldr	r1, [r7, #20]
 80054d0:	4401      	add	r1, r0
 80054d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054d6:	4313      	orrs	r3, r2
 80054d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d11e      	bne.n	800551e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	461a      	mov	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	e092      	b.n	8005644 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005538:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800553c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d07e      	beq.n	8005644 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	2101      	movs	r1, #1
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	6979      	ldr	r1, [r7, #20]
 800555e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005562:	4313      	orrs	r3, r2
 8005564:	634b      	str	r3, [r1, #52]	; 0x34
 8005566:	e06d      	b.n	8005644 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005582:	0cdb      	lsrs	r3, r3, #19
 8005584:	04db      	lsls	r3, r3, #19
 8005586:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f2:	6939      	ldr	r1, [r7, #16]
 80055f4:	0148      	lsls	r0, r1, #5
 80055f6:	6979      	ldr	r1, [r7, #20]
 80055f8:	4401      	add	r1, r0
 80055fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055fe:	4313      	orrs	r3, r2
 8005600:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d10d      	bne.n	8005624 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	68d9      	ldr	r1, [r3, #12]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	460a      	mov	r2, r1
 8005622:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	440a      	add	r2, r1
 800563a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005652:	b480      	push	{r7}
 8005654:	b089      	sub	sp, #36	; 0x24
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	4611      	mov	r1, r2
 800565e:	461a      	mov	r2, r3
 8005660:	460b      	mov	r3, r1
 8005662:	71fb      	strb	r3, [r7, #7]
 8005664:	4613      	mov	r3, r2
 8005666:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005670:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d123      	bne.n	80056c0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005678:	88bb      	ldrh	r3, [r7, #4]
 800567a:	3303      	adds	r3, #3
 800567c:	089b      	lsrs	r3, r3, #2
 800567e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	e018      	b.n	80056b8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	031a      	lsls	r2, r3, #12
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005692:	461a      	mov	r2, r3
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6013      	str	r3, [r2, #0]
      pSrc++;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3301      	adds	r3, #1
 800569e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	3301      	adds	r3, #1
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d3e2      	bcc.n	8005686 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3724      	adds	r7, #36	; 0x24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b08b      	sub	sp, #44	; 0x2c
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	4613      	mov	r3, r2
 80056da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	089b      	lsrs	r3, r3, #2
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056ec:	88fb      	ldrh	r3, [r7, #6]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	e014      	b.n	8005724 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	601a      	str	r2, [r3, #0]
    pDest++;
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	3301      	adds	r3, #1
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	3301      	adds	r3, #1
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	3301      	adds	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	3301      	adds	r3, #1
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	3301      	adds	r3, #1
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	429a      	cmp	r2, r3
 800572a:	d3e6      	bcc.n	80056fa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800572c:	8bfb      	ldrh	r3, [r7, #30]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01e      	beq.n	8005770 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573c:	461a      	mov	r2, r3
 800573e:	f107 0310 	add.w	r3, r7, #16
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	fa22 f303 	lsr.w	r3, r2, r3
 8005752:	b2da      	uxtb	r2, r3
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	701a      	strb	r2, [r3, #0]
      i++;
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	3301      	adds	r3, #1
 800575c:	623b      	str	r3, [r7, #32]
      pDest++;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	3301      	adds	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005764:	8bfb      	ldrh	r3, [r7, #30]
 8005766:	3b01      	subs	r3, #1
 8005768:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800576a:	8bfb      	ldrh	r3, [r7, #30]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ea      	bne.n	8005746 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005772:	4618      	mov	r0, r3
 8005774:	372c      	adds	r7, #44	; 0x2c
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d12c      	bne.n	80057f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	db12      	blt.n	80057d2 <USB_EPSetStall+0x54>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00f      	beq.n	80057d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e02b      	b.n	800584c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	db12      	blt.n	800582c <USB_EPSetStall+0xae>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00f      	beq.n	800582c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005826:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800582a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	440a      	add	r2, r1
 8005842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800584a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d128      	bne.n	80058c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005890:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005894:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	78db      	ldrb	r3, [r3, #3]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d003      	beq.n	80058a6 <USB_EPClearStall+0x4c>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	78db      	ldrb	r3, [r3, #3]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d138      	bne.n	8005918 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	e027      	b.n	8005918 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	78db      	ldrb	r3, [r3, #3]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d003      	beq.n	80058f8 <USB_EPClearStall+0x9e>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	78db      	ldrb	r3, [r3, #3]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d10f      	bne.n	8005918 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005916:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005944:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005948:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005960:	4313      	orrs	r3, r2
 8005962:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800598c:	f023 0303 	bic.w	r3, r3, #3
 8005990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a0:	f023 0302 	bic.w	r3, r3, #2
 80059a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059ce:	f023 0303 	bic.w	r3, r3, #3
 80059d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e2:	f043 0302 	orr.w	r3, r3, #2
 80059e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	0c1b      	lsrs	r3, r3, #16
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	b29b      	uxth	r3, r3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
 8005af0:	01db      	lsls	r3, r3, #7
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0301 	and.w	r3, r3, #1
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b56:	f023 0307 	bic.w	r3, r3, #7
 8005b5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	333c      	adds	r3, #60	; 0x3c
 8005b96:	3304      	adds	r3, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <USB_EP0_OutStart+0xb8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d90a      	bls.n	8005bba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb4:	d101      	bne.n	8005bba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e037      	b.n	8005c2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be8:	f043 0318 	orr.w	r3, r3, #24
 8005bec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c02:	7afb      	ldrb	r3, [r7, #11]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d10f      	bne.n	8005c28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	461a      	mov	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	4f54300a 	.word	0x4f54300a

08005c3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <USB_CoreReset+0x60>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e01a      	b.n	8005c8e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	daf3      	bge.n	8005c48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f043 0201 	orr.w	r2, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <USB_CoreReset+0x60>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d901      	bls.n	8005c80 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e006      	b.n	8005c8e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d0f1      	beq.n	8005c70 <USB_CoreReset+0x34>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	00030d40 	.word	0x00030d40

08005ca0 <MPU6050_initialize>:

static sensor_status_e MPU6050_set_acc_range(SensorData_t *pSensor, afs_sel_e accRange);
static sensor_status_e MPU6050_set_gyro_range(SensorData_t *pSensor, fs_sel_e gyroRange);

sensor_status_e MPU6050_initialize( SensorData_t *pSensor, fs_sel_e gyroConfig, afs_sel_e acc_config )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
 8005cac:	4613      	mov	r3, r2
 8005cae:	70bb      	strb	r3, [r7, #2]
    sensor_status_e retVal;

    retVal = MPU6050_set_gyro_range( pSensor, gyroConfig );
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f81b 	bl	8005cf0 <MPU6050_set_gyro_range>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]

    if (retVal == SENSOR_OK) {
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10e      	bne.n	8005ce2 <MPU6050_initialize+0x42>
        retVal = MPU6050_set_acc_range( pSensor, acc_config );
 8005cc4:	78bb      	ldrb	r3, [r7, #2]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f86d 	bl	8005da8 <MPU6050_set_acc_range>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]

        if (retVal == SENSOR_OK) {
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <MPU6050_initialize+0x42>
            retVal = MPU6050_set_sleep_mode( SLEEPMODE_OFF );
 8005cd8:	2000      	movs	r0, #0
 8005cda:	f000 f8b9 	bl	8005e50 <MPU6050_set_sleep_mode>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	73fb      	strb	r3, [r7, #15]
        }
    }


    return retVal;
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	0000      	movs	r0, r0
	...

08005cf0 <MPU6050_set_gyro_range>:

sensor_status_e MPU6050_set_gyro_range(SensorData_t *pSensor, fs_sel_e gyroRange)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
	sensor_status_e retVal;
	uint8_t configReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_GYRO_CONFIG );
 8005cfc:	211b      	movs	r1, #27
 8005cfe:	20d2      	movs	r0, #210	; 0xd2
 8005d00:	f000 f8d0 	bl	8005ea4 <sensor_read_register8>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73bb      	strb	r3, [r7, #14]

	configReg |= ((uint32_t)gyroRange << MPU_REG_GYRO_CONFIG_GYRO_RANGE_BITS_POSITION );
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	73bb      	strb	r3, [r7, #14]

	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_GYRO_CONFIG, configReg);
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	461a      	mov	r2, r3
 8005d18:	211b      	movs	r1, #27
 8005d1a:	20d2      	movs	r0, #210	; 0xd2
 8005d1c:	f000 f8e8 	bl	8005ef0 <sensor_write_register8>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]

	switch (gyroRange)
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d826      	bhi.n	8005d78 <MPU6050_set_gyro_range+0x88>
 8005d2a:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <MPU6050_set_gyro_range+0x40>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d41 	.word	0x08005d41
 8005d34:	08005d4f 	.word	0x08005d4f
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005d6b 	.word	0x08005d6b
	{
	 case FS_250:  pSensor->gyro_co = 131.0; break;
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	a311      	add	r3, pc, #68	; (adr r3, 8005d88 <MPU6050_set_gyro_range+0x98>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8005d4c:	e017      	b.n	8005d7e <MPU6050_set_gyro_range+0x8e>
	 case FS_500:  pSensor->gyro_co = 65.5; break;
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	a30f      	add	r3, pc, #60	; (adr r3, 8005d90 <MPU6050_set_gyro_range+0xa0>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8005d5a:	e010      	b.n	8005d7e <MPU6050_set_gyro_range+0x8e>
	 case FS_1000: pSensor->gyro_co = 32.8; break;
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	a30e      	add	r3, pc, #56	; (adr r3, 8005d98 <MPU6050_set_gyro_range+0xa8>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8005d68:	e009      	b.n	8005d7e <MPU6050_set_gyro_range+0x8e>
	 case FS_2000: pSensor->gyro_co = 16.4; break;
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	a30c      	add	r3, pc, #48	; (adr r3, 8005da0 <MPU6050_set_gyro_range+0xb0>)
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8005d76:	e002      	b.n	8005d7e <MPU6050_set_gyro_range+0x8e>
	 default: retVal = SENSOR_ERROR; break;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
 8005d7c:	bf00      	nop
	}

	return retVal;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	00000000 	.word	0x00000000
 8005d8c:	40606000 	.word	0x40606000
 8005d90:	00000000 	.word	0x00000000
 8005d94:	40506000 	.word	0x40506000
 8005d98:	66666666 	.word	0x66666666
 8005d9c:	40406666 	.word	0x40406666
 8005da0:	66666666 	.word	0x66666666
 8005da4:	40306666 	.word	0x40306666

08005da8 <MPU6050_set_acc_range>:

sensor_status_e MPU6050_set_acc_range(SensorData_t *pSensor, afs_sel_e accRange)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
	sensor_status_e retVal;
	uint8_t configReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_ACCEL_CONFIG );
 8005db4:	211c      	movs	r1, #28
 8005db6:	20d2      	movs	r0, #210	; 0xd2
 8005db8:	f000 f874 	bl	8005ea4 <sensor_read_register8>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73bb      	strb	r3, [r7, #14]

	configReg |= ( (uint32_t) accRange << MPU_REG_ACC_CONFIG_ACC_RANGE_BITS_POSITION );
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	7bbb      	ldrb	r3, [r7, #14]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	73bb      	strb	r3, [r7, #14]

	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_ACCEL_CONFIG, configReg);
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	211c      	movs	r1, #28
 8005dd2:	20d2      	movs	r0, #210	; 0xd2
 8005dd4:	f000 f88c 	bl	8005ef0 <sensor_write_register8>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]

	switch (accRange)
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d826      	bhi.n	8005e30 <MPU6050_set_acc_range+0x88>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <MPU6050_set_acc_range+0x40>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005df9 	.word	0x08005df9
 8005dec:	08005e07 	.word	0x08005e07
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e23 	.word	0x08005e23
	{
	 case AFS_2G:  pSensor->acc_co = 16384; break;
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <MPU6050_set_acc_range+0x98>)
 8005e00:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8005e04:	e017      	b.n	8005e36 <MPU6050_set_acc_range+0x8e>
	 case AFS_4G:  pSensor->acc_co = 8192; break;
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <MPU6050_set_acc_range+0x9c>)
 8005e0e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8005e12:	e010      	b.n	8005e36 <MPU6050_set_acc_range+0x8e>
	 case AFS_8G:  pSensor->acc_co = 4096; break;
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <MPU6050_set_acc_range+0xa0>)
 8005e1c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8005e20:	e009      	b.n	8005e36 <MPU6050_set_acc_range+0x8e>
	 case AFS_16G: pSensor->acc_co = 2048; break;
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <MPU6050_set_acc_range+0xa4>)
 8005e2a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8005e2e:	e002      	b.n	8005e36 <MPU6050_set_acc_range+0x8e>
	 default: retVal = SENSOR_ERROR; break;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
 8005e34:	bf00      	nop
	}

	return retVal;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40d00000 	.word	0x40d00000
 8005e44:	40c00000 	.word	0x40c00000
 8005e48:	40b00000 	.word	0x40b00000
 8005e4c:	40a00000 	.word	0x40a00000

08005e50 <MPU6050_set_sleep_mode>:
	id = sensor_read_register8(MPU6050_I2C_ADRESS_AD0,MPU_REG_WHO_AM_I );
	return id;
}

sensor_status_e MPU6050_set_sleep_mode(sleepmode_e sleepmode)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]
	sensor_status_e retVal;
	uint8_t powerReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_PWR_MGMT_1 );
 8005e5a:	216b      	movs	r1, #107	; 0x6b
 8005e5c:	20d0      	movs	r0, #208	; 0xd0
 8005e5e:	f000 f821 	bl	8005ea4 <sensor_read_register8>
 8005e62:	4603      	mov	r3, r0
 8005e64:	73fb      	strb	r3, [r7, #15]

	if(SLEEPMODE_ON == sleepmode) {
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d104      	bne.n	8005e76 <MPU6050_set_sleep_mode+0x26>
		SET_BIT(powerReg,1<<MPU_BIT_PWR_MGMT_1_SLEEP_MODE);
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e72:	73fb      	strb	r3, [r7, #15]
 8005e74:	e003      	b.n	8005e7e <MPU6050_set_sleep_mode+0x2e>
	}
	else {
		CLEAR_BIT(powerReg,1<<MPU_BIT_PWR_MGMT_1_SLEEP_MODE);
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7c:	73fb      	strb	r3, [r7, #15]
	}
	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_PWR_MGMT_1, powerReg);
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	461a      	mov	r2, r3
 8005e82:	216b      	movs	r1, #107	; 0x6b
 8005e84:	20d0      	movs	r0, #208	; 0xd0
 8005e86:	f000 f833 	bl	8005ef0 <sensor_write_register8>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	73bb      	strb	r3, [r7, #14]

	powerReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_PWR_MGMT_1 );
 8005e8e:	216b      	movs	r1, #107	; 0x6b
 8005e90:	20d0      	movs	r0, #208	; 0xd0
 8005e92:	f000 f807 	bl	8005ea4 <sensor_read_register8>
 8005e96:	4603      	mov	r3, r0
 8005e98:	73fb      	strb	r3, [r7, #15]

	return retVal;
 8005e9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <sensor_read_register8>:
			return SENSOR_ERROR;
		}
}
uint8_t sensor_read_register8(uint8_t chipAdd, uint8_t regAdd)

		{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af04      	add	r7, sp, #16
 8005eaa:	4603      	mov	r3, r0
 8005eac:	460a      	mov	r2, r1
 8005eae:	71fb      	strb	r3, [r7, #7]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	71bb      	strb	r3, [r7, #6]

			uint8_t data;
			HAL_StatusTypeDef status ;


			status = HAL_I2C_Mem_Read(&hi2c1, chipAdd, regAdd, 1, &data, 2, 100);
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	b299      	uxth	r1, r3
 8005eb8:	79bb      	ldrb	r3, [r7, #6]
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	2364      	movs	r3, #100	; 0x64
 8005ebe:	9302      	str	r3, [sp, #8]
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	f107 030e 	add.w	r3, r7, #14
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4807      	ldr	r0, [pc, #28]	; (8005eec <sensor_read_register8+0x48>)
 8005ece:	f7fc f835 	bl	8001f3c <HAL_I2C_Mem_Read>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]
				if( HAL_OK != status)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <sensor_read_register8+0x3c>
				{

					return SENSOR_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <sensor_read_register8+0x3e>

				}

				else
				{
					return data;
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]

				}


		}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200005f0 	.word	0x200005f0

08005ef0 <sensor_write_register8>:
			}


}
sensor_status_e sensor_write_register8(uint8_t chipAdd,uint8_t regAdd , uint8_t value)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af04      	add	r7, sp, #16
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	71fb      	strb	r3, [r7, #7]
 8005efa:	460b      	mov	r3, r1
 8005efc:	71bb      	strb	r3, [r7, #6]
 8005efe:	4613      	mov	r3, r2
 8005f00:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status ;

	status = HAL_I2C_Mem_Write(&hi2c1, chipAdd, regAdd, 1, &value, 1, 100);
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	b299      	uxth	r1, r3
 8005f06:	79bb      	ldrb	r3, [r7, #6]
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	2364      	movs	r3, #100	; 0x64
 8005f0c:	9302      	str	r3, [sp, #8]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	1d7b      	adds	r3, r7, #5
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	2301      	movs	r3, #1
 8005f18:	4807      	ldr	r0, [pc, #28]	; (8005f38 <sensor_write_register8+0x48>)
 8005f1a:	f7fb ff15 	bl	8001d48 <HAL_I2C_Mem_Write>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	73fb      	strb	r3, [r7, #15]
	if( HAL_OK != status)
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <sensor_write_register8+0x3c>
				{

				return SENSOR_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <sensor_write_register8+0x3e>
				}

				else
				{

				return SENSOR_OK;
 8005f2c:	2300      	movs	r3, #0
				}
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200005f0 	.word	0x200005f0

08005f3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f4c:	f002 f906 	bl	800815c <USBD_static_malloc>
 8005f50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d105      	bne.n	8005f64 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005f60:	2302      	movs	r3, #2
 8005f62:	e066      	b.n	8006032 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	7c1b      	ldrb	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d119      	bne.n	8005fa8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f78:	2202      	movs	r2, #2
 8005f7a:	2181      	movs	r1, #129	; 0x81
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 ffca 	bl	8007f16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	2101      	movs	r1, #1
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 ffc0 	bl	8007f16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005fa6:	e016      	b.n	8005fd6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fa8:	2340      	movs	r3, #64	; 0x40
 8005faa:	2202      	movs	r2, #2
 8005fac:	2181      	movs	r1, #129	; 0x81
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 ffb1 	bl	8007f16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fba:	2340      	movs	r3, #64	; 0x40
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 ffa8 	bl	8007f16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2210      	movs	r2, #16
 8005fd2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	2203      	movs	r2, #3
 8005fda:	2182      	movs	r1, #130	; 0x82
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 ff9a 	bl	8007f16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	7c1b      	ldrb	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d109      	bne.n	8006020 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006016:	2101      	movs	r1, #1
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f002 f86b 	bl	80080f4 <USBD_LL_PrepareReceive>
 800601e:	e007      	b.n	8006030 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	2101      	movs	r1, #1
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f002 f862 	bl	80080f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006046:	2181      	movs	r1, #129	; 0x81
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 ff8a 	bl	8007f62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006054:	2101      	movs	r1, #1
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 ff83 	bl	8007f62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006064:	2182      	movs	r1, #130	; 0x82
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 ff7b 	bl	8007f62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00e      	beq.n	80060a4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006096:	4618      	mov	r0, r3
 8006098:	f002 f86e 	bl	8008178 <USBD_static_free>
    pdev->pClassData = NULL;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e0af      	b.n	8006238 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d03f      	beq.n	8006164 <USBD_CDC_Setup+0xb4>
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	f040 809f 	bne.w	8006228 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	88db      	ldrh	r3, [r3, #6]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02e      	beq.n	8006150 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	da16      	bge.n	800612a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006108:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	88d2      	ldrh	r2, [r2, #6]
 800610e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	88db      	ldrh	r3, [r3, #6]
 8006114:	2b07      	cmp	r3, #7
 8006116:	bf28      	it	cs
 8006118:	2307      	movcs	r3, #7
 800611a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	89fa      	ldrh	r2, [r7, #14]
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fae9 	bl	80076fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006128:	e085      	b.n	8006236 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	785a      	ldrb	r2, [r3, #1]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	88db      	ldrh	r3, [r3, #6]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006140:	6939      	ldr	r1, [r7, #16]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	88db      	ldrh	r3, [r3, #6]
 8006146:	461a      	mov	r2, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fb02 	bl	8007752 <USBD_CtlPrepareRx>
      break;
 800614e:	e072      	b.n	8006236 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	7850      	ldrb	r0, [r2, #1]
 800615c:	2200      	movs	r2, #0
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	4798      	blx	r3
      break;
 8006162:	e068      	b.n	8006236 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b0b      	cmp	r3, #11
 800616a:	d852      	bhi.n	8006212 <USBD_CDC_Setup+0x162>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <USBD_CDC_Setup+0xc4>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	080061a5 	.word	0x080061a5
 8006178:	08006221 	.word	0x08006221
 800617c:	08006213 	.word	0x08006213
 8006180:	08006213 	.word	0x08006213
 8006184:	08006213 	.word	0x08006213
 8006188:	08006213 	.word	0x08006213
 800618c:	08006213 	.word	0x08006213
 8006190:	08006213 	.word	0x08006213
 8006194:	08006213 	.word	0x08006213
 8006198:	08006213 	.word	0x08006213
 800619c:	080061cf 	.word	0x080061cf
 80061a0:	080061f9 	.word	0x080061f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d107      	bne.n	80061c0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061b0:	f107 030a 	add.w	r3, r7, #10
 80061b4:	2202      	movs	r2, #2
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fa9e 	bl	80076fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061be:	e032      	b.n	8006226 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 fa28 	bl	8007618 <USBD_CtlError>
            ret = USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	75fb      	strb	r3, [r7, #23]
          break;
 80061cc:	e02b      	b.n	8006226 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d107      	bne.n	80061ea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061da:	f107 030d 	add.w	r3, r7, #13
 80061de:	2201      	movs	r2, #1
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fa89 	bl	80076fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061e8:	e01d      	b.n	8006226 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 fa13 	bl	8007618 <USBD_CtlError>
            ret = USBD_FAIL;
 80061f2:	2303      	movs	r3, #3
 80061f4:	75fb      	strb	r3, [r7, #23]
          break;
 80061f6:	e016      	b.n	8006226 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d00f      	beq.n	8006224 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fa06 	bl	8007618 <USBD_CtlError>
            ret = USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006210:	e008      	b.n	8006224 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f9ff 	bl	8007618 <USBD_CtlError>
          ret = USBD_FAIL;
 800621a:	2303      	movs	r3, #3
 800621c:	75fb      	strb	r3, [r7, #23]
          break;
 800621e:	e002      	b.n	8006226 <USBD_CDC_Setup+0x176>
          break;
 8006220:	bf00      	nop
 8006222:	e008      	b.n	8006236 <USBD_CDC_Setup+0x186>
          break;
 8006224:	bf00      	nop
      }
      break;
 8006226:	e006      	b.n	8006236 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 f9f4 	bl	8007618 <USBD_CtlError>
      ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	75fb      	strb	r3, [r7, #23]
      break;
 8006234:	bf00      	nop
  }

  return (uint8_t)ret;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006252:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800625e:	2303      	movs	r3, #3
 8006260:	e04f      	b.n	8006302 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006268:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	3318      	adds	r3, #24
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d029      	beq.n	80062d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006280:	78fa      	ldrb	r2, [r7, #3]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	3318      	adds	r3, #24
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	78f9      	ldrb	r1, [r7, #3]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	460b      	mov	r3, r1
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	1a5b      	subs	r3, r3, r1
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4403      	add	r3, r0
 80062a0:	3344      	adds	r3, #68	; 0x44
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80062a8:	fb03 f301 	mul.w	r3, r3, r1
 80062ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d110      	bne.n	80062d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	3318      	adds	r3, #24
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062c6:	78f9      	ldrb	r1, [r7, #3]
 80062c8:	2300      	movs	r3, #0
 80062ca:	2200      	movs	r2, #0
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 fef0 	bl	80080b2 <USBD_LL_Transmit>
 80062d2:	e015      	b.n	8006300 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800631c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006328:	2303      	movs	r3, #3
 800632a:	e015      	b.n	8006358 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 ff00 	bl	8008136 <USBD_LL_GetRxDataSize>
 8006336:	4602      	mov	r2, r0
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006352:	4611      	mov	r1, r2
 8006354:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800636e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006376:	2303      	movs	r3, #3
 8006378:	e01b      	b.n	80063b2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d015      	beq.n	80063b0 <USBD_CDC_EP0_RxReady+0x50>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800638a:	2bff      	cmp	r3, #255	; 0xff
 800638c:	d010      	beq.n	80063b0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800639c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063a4:	b292      	uxth	r2, r2
 80063a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	22ff      	movs	r2, #255	; 0xff
 80063ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2243      	movs	r2, #67	; 0x43
 80063c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80063ca:	4b03      	ldr	r3, [pc, #12]	; (80063d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	20000094 	.word	0x20000094

080063dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2243      	movs	r2, #67	; 0x43
 80063e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80063ea:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20000050 	.word	0x20000050

080063fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2243      	movs	r2, #67	; 0x43
 8006408:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800640a:	4b03      	ldr	r3, [pc, #12]	; (8006418 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	200000d8 	.word	0x200000d8

0800641c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	220a      	movs	r2, #10
 8006428:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800642a:	4b03      	ldr	r3, [pc, #12]	; (8006438 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	2000000c 	.word	0x2000000c

0800643c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800644c:	2303      	movs	r3, #3
 800644e:	e004      	b.n	800645a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006466:	b480      	push	{r7}
 8006468:	b087      	sub	sp, #28
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006478:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006480:	2303      	movs	r3, #3
 8006482:	e008      	b.n	8006496 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e004      	b.n	80064c8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e016      	b.n	8006520 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	7c1b      	ldrb	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006504:	2101      	movs	r1, #1
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 fdf4 	bl	80080f4 <USBD_LL_PrepareReceive>
 800650c:	e007      	b.n	800651e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	2101      	movs	r1, #1
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 fdeb 	bl	80080f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	4613      	mov	r3, r2
 8006534:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800653c:	2303      	movs	r3, #3
 800653e:	e01f      	b.n	8006580 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	79fa      	ldrb	r2, [r7, #7]
 8006572:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f001 fc67 	bl	8007e48 <USBD_LL_Init>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	e016      	b.n	80065ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	f107 020e 	add.w	r2, r7, #14
 80065c0:	4610      	mov	r0, r2
 80065c2:	4798      	blx	r3
 80065c4:	4602      	mov	r2, r0
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fc7e 	bl	8007ee0 <USBD_LL_Start>
 80065e4:	4603      	mov	r3, r0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006610:	2303      	movs	r3, #3
 8006612:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	4611      	mov	r1, r2
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006632:	7bfb      	ldrb	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	4611      	mov	r1, r2
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
  }

  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 ff90 	bl	80075a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006692:	461a      	mov	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d01a      	beq.n	80066de <USBD_LL_SetupStage+0x72>
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d822      	bhi.n	80066f2 <USBD_LL_SetupStage+0x86>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <USBD_LL_SetupStage+0x4a>
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d00a      	beq.n	80066ca <USBD_LL_SetupStage+0x5e>
 80066b4:	e01d      	b.n	80066f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa62 	bl	8006b88 <USBD_StdDevReq>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]
      break;
 80066c8:	e020      	b.n	800670c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fac6 	bl	8006c64 <USBD_StdItfReq>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
      break;
 80066dc:	e016      	b.n	800670c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fb05 	bl	8006cf6 <USBD_StdEPReq>
 80066ec:	4603      	mov	r3, r0
 80066ee:	73fb      	strb	r3, [r7, #15]
      break;
 80066f0:	e00c      	b.n	800670c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fc4d 	bl	8007fa0 <USBD_LL_StallEP>
 8006706:	4603      	mov	r3, r0
 8006708:	73fb      	strb	r3, [r7, #15]
      break;
 800670a:	bf00      	nop
  }

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b086      	sub	sp, #24
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	460b      	mov	r3, r1
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d138      	bne.n	800679c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006730:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006738:	2b03      	cmp	r3, #3
 800673a:	d14a      	bne.n	80067d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	429a      	cmp	r2, r3
 8006746:	d913      	bls.n	8006770 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	1ad2      	subs	r2, r2, r3
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	4293      	cmp	r3, r2
 8006760:	bf28      	it	cs
 8006762:	4613      	movcs	r3, r2
 8006764:	461a      	mov	r2, r3
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f001 f80f 	bl	800778c <USBD_CtlContinueRx>
 800676e:	e030      	b.n	80067d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b03      	cmp	r3, #3
 800677a:	d10b      	bne.n	8006794 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f001 f80a 	bl	80077ae <USBD_CtlSendStatus>
 800679a:	e01a      	b.n	80067d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d114      	bne.n	80067d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00e      	beq.n	80067d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	7afa      	ldrb	r2, [r7, #11]
 80067be:	4611      	mov	r1, r2
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	4798      	blx	r3
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	e000      	b.n	80067d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	460b      	mov	r3, r1
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d16b      	bne.n	80068c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3314      	adds	r3, #20
 80067f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d156      	bne.n	80068ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	429a      	cmp	r2, r3
 800680a:	d914      	bls.n	8006836 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	1ad2      	subs	r2, r2, r3
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	461a      	mov	r2, r3
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 ff84 	bl	8007730 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006828:	2300      	movs	r3, #0
 800682a:	2200      	movs	r2, #0
 800682c:	2100      	movs	r1, #0
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f001 fc60 	bl	80080f4 <USBD_LL_PrepareReceive>
 8006834:	e03b      	b.n	80068ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	429a      	cmp	r2, r3
 8006840:	d11c      	bne.n	800687c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800684a:	429a      	cmp	r2, r3
 800684c:	d316      	bcc.n	800687c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006858:	429a      	cmp	r2, r3
 800685a:	d20f      	bcs.n	800687c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800685c:	2200      	movs	r2, #0
 800685e:	2100      	movs	r1, #0
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 ff65 	bl	8007730 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800686e:	2300      	movs	r3, #0
 8006870:	2200      	movs	r2, #0
 8006872:	2100      	movs	r1, #0
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f001 fc3d 	bl	80080f4 <USBD_LL_PrepareReceive>
 800687a:	e018      	b.n	80068ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b03      	cmp	r3, #3
 8006886:	d10b      	bne.n	80068a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068a0:	2180      	movs	r1, #128	; 0x80
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f001 fb7c 	bl	8007fa0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 ff93 	bl	80077d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d122      	bne.n	80068fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f7ff fe98 	bl	80065ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80068c6:	e01a      	b.n	80068fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d114      	bne.n	80068fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00e      	beq.n	80068fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	7afa      	ldrb	r2, [r7, #11]
 80068ea:	4611      	mov	r1, r2
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	4798      	blx	r3
 80068f0:	4603      	mov	r3, r0
 80068f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	e000      	b.n	8006900 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006938:	2303      	movs	r3, #3
 800693a:	e02f      	b.n	800699c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00f      	beq.n	8006966 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d009      	beq.n	8006966 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6852      	ldr	r2, [r2, #4]
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	4611      	mov	r1, r2
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006966:	2340      	movs	r3, #64	; 0x40
 8006968:	2200      	movs	r2, #0
 800696a:	2100      	movs	r1, #0
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fad2 	bl	8007f16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006982:	2340      	movs	r3, #64	; 0x40
 8006984:	2200      	movs	r2, #0
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 fac4 	bl	8007f16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2240      	movs	r2, #64	; 0x40
 8006998:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	78fa      	ldrb	r2, [r7, #3]
 80069b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2204      	movs	r2, #4
 80069de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d106      	bne.n	8006a12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e012      	b.n	8006a5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d10b      	bne.n	8006a5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e014      	b.n	8006aa8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d10d      	bne.n	8006aa6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d007      	beq.n	8006aa6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e014      	b.n	8006af4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d10d      	bne.n	8006af2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	78fa      	ldrb	r2, [r7, #3]
 8006aec:	4611      	mov	r1, r2
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d009      	beq.n	8006b40 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6852      	ldr	r2, [r2, #4]
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
  }

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b087      	sub	sp, #28
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b68:	8a3b      	ldrh	r3, [r7, #16]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	b21a      	sxth	r2, r3
 8006b6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	b21b      	sxth	r3, r3
 8006b76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b78:	89fb      	ldrh	r3, [r7, #14]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	d005      	beq.n	8006bae <USBD_StdDevReq+0x26>
 8006ba2:	2b40      	cmp	r3, #64	; 0x40
 8006ba4:	d853      	bhi.n	8006c4e <USBD_StdDevReq+0xc6>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00b      	beq.n	8006bc2 <USBD_StdDevReq+0x3a>
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d14f      	bne.n	8006c4e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc0:	e04a      	b.n	8006c58 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	2b09      	cmp	r3, #9
 8006bc8:	d83b      	bhi.n	8006c42 <USBD_StdDevReq+0xba>
 8006bca:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <USBD_StdDevReq+0x48>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006c25 	.word	0x08006c25
 8006bd4:	08006c39 	.word	0x08006c39
 8006bd8:	08006c43 	.word	0x08006c43
 8006bdc:	08006c2f 	.word	0x08006c2f
 8006be0:	08006c43 	.word	0x08006c43
 8006be4:	08006c03 	.word	0x08006c03
 8006be8:	08006bf9 	.word	0x08006bf9
 8006bec:	08006c43 	.word	0x08006c43
 8006bf0:	08006c1b 	.word	0x08006c1b
 8006bf4:	08006c0d 	.word	0x08006c0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9de 	bl	8006fbc <USBD_GetDescriptor>
          break;
 8006c00:	e024      	b.n	8006c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fb43 	bl	8007290 <USBD_SetAddress>
          break;
 8006c0a:	e01f      	b.n	8006c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fb82 	bl	8007318 <USBD_SetConfig>
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]
          break;
 8006c18:	e018      	b.n	8006c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fc21 	bl	8007464 <USBD_GetConfig>
          break;
 8006c22:	e013      	b.n	8006c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fc52 	bl	80074d0 <USBD_GetStatus>
          break;
 8006c2c:	e00e      	b.n	8006c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fc81 	bl	8007538 <USBD_SetFeature>
          break;
 8006c36:	e009      	b.n	8006c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fc90 	bl	8007560 <USBD_ClrFeature>
          break;
 8006c40:	e004      	b.n	8006c4c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fce7 	bl	8007618 <USBD_CtlError>
          break;
 8006c4a:	bf00      	nop
      }
      break;
 8006c4c:	e004      	b.n	8006c58 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fce1 	bl	8007618 <USBD_CtlError>
      break;
 8006c56:	bf00      	nop
  }

  return ret;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop

08006c64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d005      	beq.n	8006c8a <USBD_StdItfReq+0x26>
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d82f      	bhi.n	8006ce2 <USBD_StdItfReq+0x7e>
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <USBD_StdItfReq+0x26>
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d12b      	bne.n	8006ce2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d81d      	bhi.n	8006cd4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	889b      	ldrh	r3, [r3, #4]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d813      	bhi.n	8006cca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	88db      	ldrh	r3, [r3, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d110      	bne.n	8006cde <USBD_StdItfReq+0x7a>
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10d      	bne.n	8006cde <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fd73 	bl	80077ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cc8:	e009      	b.n	8006cde <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fca3 	bl	8007618 <USBD_CtlError>
          break;
 8006cd2:	e004      	b.n	8006cde <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fc9e 	bl	8007618 <USBD_CtlError>
          break;
 8006cdc:	e000      	b.n	8006ce0 <USBD_StdItfReq+0x7c>
          break;
 8006cde:	bf00      	nop
      }
      break;
 8006ce0:	e004      	b.n	8006cec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fc97 	bl	8007618 <USBD_CtlError>
      break;
 8006cea:	bf00      	nop
  }

  return ret;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	889b      	ldrh	r3, [r3, #4]
 8006d08:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d007      	beq.n	8006d26 <USBD_StdEPReq+0x30>
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	f200 8145 	bhi.w	8006fa6 <USBD_StdEPReq+0x2b0>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00c      	beq.n	8006d3a <USBD_StdEPReq+0x44>
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	f040 8140 	bne.w	8006fa6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
      break;
 8006d38:	e13a      	b.n	8006fb0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d007      	beq.n	8006d52 <USBD_StdEPReq+0x5c>
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	f300 8129 	bgt.w	8006f9a <USBD_StdEPReq+0x2a4>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d07f      	beq.n	8006e4c <USBD_StdEPReq+0x156>
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d03c      	beq.n	8006dca <USBD_StdEPReq+0xd4>
 8006d50:	e123      	b.n	8006f9a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d002      	beq.n	8006d64 <USBD_StdEPReq+0x6e>
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d016      	beq.n	8006d90 <USBD_StdEPReq+0x9a>
 8006d62:	e02c      	b.n	8006dbe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00d      	beq.n	8006d86 <USBD_StdEPReq+0x90>
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	2b80      	cmp	r3, #128	; 0x80
 8006d6e:	d00a      	beq.n	8006d86 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 f913 	bl	8007fa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d7a:	2180      	movs	r1, #128	; 0x80
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 f90f 	bl	8007fa0 <USBD_LL_StallEP>
 8006d82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d84:	e020      	b.n	8006dc8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fc45 	bl	8007618 <USBD_CtlError>
              break;
 8006d8e:	e01b      	b.n	8006dc8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	885b      	ldrh	r3, [r3, #2]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10e      	bne.n	8006db6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <USBD_StdEPReq+0xc0>
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b80      	cmp	r3, #128	; 0x80
 8006da2:	d008      	beq.n	8006db6 <USBD_StdEPReq+0xc0>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	88db      	ldrh	r3, [r3, #6]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 f8f5 	bl	8007fa0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fcf9 	bl	80077ae <USBD_CtlSendStatus>

              break;
 8006dbc:	e004      	b.n	8006dc8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fc29 	bl	8007618 <USBD_CtlError>
              break;
 8006dc6:	bf00      	nop
          }
          break;
 8006dc8:	e0ec      	b.n	8006fa4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d002      	beq.n	8006ddc <USBD_StdEPReq+0xe6>
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d016      	beq.n	8006e08 <USBD_StdEPReq+0x112>
 8006dda:	e030      	b.n	8006e3e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00d      	beq.n	8006dfe <USBD_StdEPReq+0x108>
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d00a      	beq.n	8006dfe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 f8d7 	bl	8007fa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006df2:	2180      	movs	r1, #128	; 0x80
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f8d3 	bl	8007fa0 <USBD_LL_StallEP>
 8006dfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dfc:	e025      	b.n	8006e4a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fc09 	bl	8007618 <USBD_CtlError>
              break;
 8006e06:	e020      	b.n	8006e4a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	885b      	ldrh	r3, [r3, #2]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11b      	bne.n	8006e48 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 f8dd 	bl	8007fde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fcc2 	bl	80077ae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	4798      	blx	r3
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006e3c:	e004      	b.n	8006e48 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fbe9 	bl	8007618 <USBD_CtlError>
              break;
 8006e46:	e000      	b.n	8006e4a <USBD_StdEPReq+0x154>
              break;
 8006e48:	bf00      	nop
          }
          break;
 8006e4a:	e0ab      	b.n	8006fa4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d002      	beq.n	8006e5e <USBD_StdEPReq+0x168>
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d032      	beq.n	8006ec2 <USBD_StdEPReq+0x1cc>
 8006e5c:	e097      	b.n	8006f8e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d007      	beq.n	8006e74 <USBD_StdEPReq+0x17e>
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b80      	cmp	r3, #128	; 0x80
 8006e68:	d004      	beq.n	8006e74 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fbd3 	bl	8007618 <USBD_CtlError>
                break;
 8006e72:	e091      	b.n	8006f98 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	da0b      	bge.n	8006e94 <USBD_StdEPReq+0x19e>
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	3310      	adds	r3, #16
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	4413      	add	r3, r2
 8006e90:	3304      	adds	r3, #4
 8006e92:	e00b      	b.n	8006eac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	3304      	adds	r3, #4
 8006eac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fc1d 	bl	80076fa <USBD_CtlSendData>
              break;
 8006ec0:	e06a      	b.n	8006f98 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	da11      	bge.n	8006eee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	f003 020f 	and.w	r2, r3, #15
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	3324      	adds	r3, #36	; 0x24
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d117      	bne.n	8006f14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fb96 	bl	8007618 <USBD_CtlError>
                  break;
 8006eec:	e054      	b.n	8006f98 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	f003 020f 	and.w	r2, r3, #15
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d104      	bne.n	8006f14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fb83 	bl	8007618 <USBD_CtlError>
                  break;
 8006f12:	e041      	b.n	8006f98 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	da0b      	bge.n	8006f34 <USBD_StdEPReq+0x23e>
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	3310      	adds	r3, #16
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	4413      	add	r3, r2
 8006f30:	3304      	adds	r3, #4
 8006f32:	e00b      	b.n	8006f4c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	4413      	add	r3, r2
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <USBD_StdEPReq+0x264>
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b80      	cmp	r3, #128	; 0x80
 8006f58:	d103      	bne.n	8006f62 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e00e      	b.n	8006f80 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f858 	bl	800801c <USBD_LL_IsStallEP>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2201      	movs	r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e002      	b.n	8006f80 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2202      	movs	r2, #2
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fbb7 	bl	80076fa <USBD_CtlSendData>
              break;
 8006f8c:	e004      	b.n	8006f98 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fb41 	bl	8007618 <USBD_CtlError>
              break;
 8006f96:	bf00      	nop
          }
          break;
 8006f98:	e004      	b.n	8006fa4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fb3b 	bl	8007618 <USBD_CtlError>
          break;
 8006fa2:	bf00      	nop
      }
      break;
 8006fa4:	e004      	b.n	8006fb0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fb35 	bl	8007618 <USBD_CtlError>
      break;
 8006fae:	bf00      	nop
  }

  return ret;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	885b      	ldrh	r3, [r3, #2]
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	2b06      	cmp	r3, #6
 8006fde:	f200 8128 	bhi.w	8007232 <USBD_GetDescriptor+0x276>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <USBD_GetDescriptor+0x2c>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	08007005 	.word	0x08007005
 8006fec:	0800701d 	.word	0x0800701d
 8006ff0:	0800705d 	.word	0x0800705d
 8006ff4:	08007233 	.word	0x08007233
 8006ff8:	08007233 	.word	0x08007233
 8006ffc:	080071d3 	.word	0x080071d3
 8007000:	080071ff 	.word	0x080071ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	7c12      	ldrb	r2, [r2, #16]
 8007010:	f107 0108 	add.w	r1, r7, #8
 8007014:	4610      	mov	r0, r2
 8007016:	4798      	blx	r3
 8007018:	60f8      	str	r0, [r7, #12]
      break;
 800701a:	e112      	b.n	8007242 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	7c1b      	ldrb	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10d      	bne.n	8007040 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	f107 0208 	add.w	r2, r7, #8
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
 8007034:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3301      	adds	r3, #1
 800703a:	2202      	movs	r2, #2
 800703c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800703e:	e100      	b.n	8007242 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	f107 0208 	add.w	r2, r7, #8
 800704c:	4610      	mov	r0, r2
 800704e:	4798      	blx	r3
 8007050:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3301      	adds	r3, #1
 8007056:	2202      	movs	r2, #2
 8007058:	701a      	strb	r2, [r3, #0]
      break;
 800705a:	e0f2      	b.n	8007242 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	885b      	ldrh	r3, [r3, #2]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b05      	cmp	r3, #5
 8007064:	f200 80ac 	bhi.w	80071c0 <USBD_GetDescriptor+0x204>
 8007068:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <USBD_GetDescriptor+0xb4>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	08007089 	.word	0x08007089
 8007074:	080070bd 	.word	0x080070bd
 8007078:	080070f1 	.word	0x080070f1
 800707c:	08007125 	.word	0x08007125
 8007080:	08007159 	.word	0x08007159
 8007084:	0800718d 	.word	0x0800718d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	7c12      	ldrb	r2, [r2, #16]
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070aa:	e091      	b.n	80071d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fab2 	bl	8007618 <USBD_CtlError>
            err++;
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	3301      	adds	r3, #1
 80070b8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ba:	e089      	b.n	80071d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00b      	beq.n	80070e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	7c12      	ldrb	r2, [r2, #16]
 80070d4:	f107 0108 	add.w	r1, r7, #8
 80070d8:	4610      	mov	r0, r2
 80070da:	4798      	blx	r3
 80070dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070de:	e077      	b.n	80071d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa98 	bl	8007618 <USBD_CtlError>
            err++;
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	3301      	adds	r3, #1
 80070ec:	72fb      	strb	r3, [r7, #11]
          break;
 80070ee:	e06f      	b.n	80071d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	7c12      	ldrb	r2, [r2, #16]
 8007108:	f107 0108 	add.w	r1, r7, #8
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
 8007110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007112:	e05d      	b.n	80071d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa7e 	bl	8007618 <USBD_CtlError>
            err++;
 800711c:	7afb      	ldrb	r3, [r7, #11]
 800711e:	3301      	adds	r3, #1
 8007120:	72fb      	strb	r3, [r7, #11]
          break;
 8007122:	e055      	b.n	80071d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	7c12      	ldrb	r2, [r2, #16]
 800713c:	f107 0108 	add.w	r1, r7, #8
 8007140:	4610      	mov	r0, r2
 8007142:	4798      	blx	r3
 8007144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007146:	e043      	b.n	80071d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa64 	bl	8007618 <USBD_CtlError>
            err++;
 8007150:	7afb      	ldrb	r3, [r7, #11]
 8007152:	3301      	adds	r3, #1
 8007154:	72fb      	strb	r3, [r7, #11]
          break;
 8007156:	e03b      	b.n	80071d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00b      	beq.n	800717c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	7c12      	ldrb	r2, [r2, #16]
 8007170:	f107 0108 	add.w	r1, r7, #8
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800717a:	e029      	b.n	80071d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa4a 	bl	8007618 <USBD_CtlError>
            err++;
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	3301      	adds	r3, #1
 8007188:	72fb      	strb	r3, [r7, #11]
          break;
 800718a:	e021      	b.n	80071d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	7c12      	ldrb	r2, [r2, #16]
 80071a4:	f107 0108 	add.w	r1, r7, #8
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ae:	e00f      	b.n	80071d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa30 	bl	8007618 <USBD_CtlError>
            err++;
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	3301      	adds	r3, #1
 80071bc:	72fb      	strb	r3, [r7, #11]
          break;
 80071be:	e007      	b.n	80071d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa28 	bl	8007618 <USBD_CtlError>
          err++;
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	3301      	adds	r3, #1
 80071cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80071ce:	bf00      	nop
      }
      break;
 80071d0:	e037      	b.n	8007242 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7c1b      	ldrb	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	f107 0208 	add.w	r2, r7, #8
 80071e6:	4610      	mov	r0, r2
 80071e8:	4798      	blx	r3
 80071ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ec:	e029      	b.n	8007242 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fa11 	bl	8007618 <USBD_CtlError>
        err++;
 80071f6:	7afb      	ldrb	r3, [r7, #11]
 80071f8:	3301      	adds	r3, #1
 80071fa:	72fb      	strb	r3, [r7, #11]
      break;
 80071fc:	e021      	b.n	8007242 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	7c1b      	ldrb	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10d      	bne.n	8007222 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f107 0208 	add.w	r2, r7, #8
 8007212:	4610      	mov	r0, r2
 8007214:	4798      	blx	r3
 8007216:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	2207      	movs	r2, #7
 800721e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007220:	e00f      	b.n	8007242 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f9f7 	bl	8007618 <USBD_CtlError>
        err++;
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	3301      	adds	r3, #1
 800722e:	72fb      	strb	r3, [r7, #11]
      break;
 8007230:	e007      	b.n	8007242 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f9ef 	bl	8007618 <USBD_CtlError>
      err++;
 800723a:	7afb      	ldrb	r3, [r7, #11]
 800723c:	3301      	adds	r3, #1
 800723e:	72fb      	strb	r3, [r7, #11]
      break;
 8007240:	bf00      	nop
  }

  if (err != 0U)
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d11e      	bne.n	8007286 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	88db      	ldrh	r3, [r3, #6]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d016      	beq.n	800727e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007250:	893b      	ldrh	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00e      	beq.n	8007274 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	88da      	ldrh	r2, [r3, #6]
 800725a:	893b      	ldrh	r3, [r7, #8]
 800725c:	4293      	cmp	r3, r2
 800725e:	bf28      	it	cs
 8007260:	4613      	movcs	r3, r2
 8007262:	b29b      	uxth	r3, r3
 8007264:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007266:	893b      	ldrh	r3, [r7, #8]
 8007268:	461a      	mov	r2, r3
 800726a:	68f9      	ldr	r1, [r7, #12]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa44 	bl	80076fa <USBD_CtlSendData>
 8007272:	e009      	b.n	8007288 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f9ce 	bl	8007618 <USBD_CtlError>
 800727c:	e004      	b.n	8007288 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa95 	bl	80077ae <USBD_CtlSendStatus>
 8007284:	e000      	b.n	8007288 <USBD_GetDescriptor+0x2cc>
    return;
 8007286:	bf00      	nop
  }
}
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	889b      	ldrh	r3, [r3, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d131      	bne.n	8007306 <USBD_SetAddress+0x76>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	88db      	ldrh	r3, [r3, #6]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d12d      	bne.n	8007306 <USBD_SetAddress+0x76>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	885b      	ldrh	r3, [r3, #2]
 80072ae:	2b7f      	cmp	r3, #127	; 0x7f
 80072b0:	d829      	bhi.n	8007306 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	885b      	ldrh	r3, [r3, #2]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d104      	bne.n	80072d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f9a3 	bl	8007618 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d2:	e01d      	b.n	8007310 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	7bfa      	ldrb	r2, [r7, #15]
 80072d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fec7 	bl	8008074 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa61 	bl	80077ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2202      	movs	r2, #2
 80072f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fa:	e009      	b.n	8007310 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007304:	e004      	b.n	8007310 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f985 	bl	8007618 <USBD_CtlError>
  }
}
 800730e:	bf00      	nop
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	4b4c      	ldr	r3, [pc, #304]	; (8007460 <USBD_SetConfig+0x148>)
 800732e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007330:	4b4b      	ldr	r3, [pc, #300]	; (8007460 <USBD_SetConfig+0x148>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d905      	bls.n	8007344 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f96c 	bl	8007618 <USBD_CtlError>
    return USBD_FAIL;
 8007340:	2303      	movs	r3, #3
 8007342:	e088      	b.n	8007456 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d002      	beq.n	8007356 <USBD_SetConfig+0x3e>
 8007350:	2b03      	cmp	r3, #3
 8007352:	d025      	beq.n	80073a0 <USBD_SetConfig+0x88>
 8007354:	e071      	b.n	800743a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007356:	4b42      	ldr	r3, [pc, #264]	; (8007460 <USBD_SetConfig+0x148>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d01c      	beq.n	8007398 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800735e:	4b40      	ldr	r3, [pc, #256]	; (8007460 <USBD_SetConfig+0x148>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007368:	4b3d      	ldr	r3, [pc, #244]	; (8007460 <USBD_SetConfig+0x148>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff f948 	bl	8006604 <USBD_SetClassConfig>
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d004      	beq.n	8007388 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f949 	bl	8007618 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007386:	e065      	b.n	8007454 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa10 	bl	80077ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2203      	movs	r2, #3
 8007392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007396:	e05d      	b.n	8007454 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa08 	bl	80077ae <USBD_CtlSendStatus>
      break;
 800739e:	e059      	b.n	8007454 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073a0:	4b2f      	ldr	r3, [pc, #188]	; (8007460 <USBD_SetConfig+0x148>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d112      	bne.n	80073ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073b0:	4b2b      	ldr	r3, [pc, #172]	; (8007460 <USBD_SetConfig+0x148>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073ba:	4b29      	ldr	r3, [pc, #164]	; (8007460 <USBD_SetConfig+0x148>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff f93b 	bl	800663c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f9f1 	bl	80077ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073cc:	e042      	b.n	8007454 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80073ce:	4b24      	ldr	r3, [pc, #144]	; (8007460 <USBD_SetConfig+0x148>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d02a      	beq.n	8007432 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff f929 	bl	800663c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073ea:	4b1d      	ldr	r3, [pc, #116]	; (8007460 <USBD_SetConfig+0x148>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073f4:	4b1a      	ldr	r3, [pc, #104]	; (8007460 <USBD_SetConfig+0x148>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff f902 	bl	8006604 <USBD_SetClassConfig>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00f      	beq.n	800742a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f903 	bl	8007618 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff f90e 	bl	800663c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007428:	e014      	b.n	8007454 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f9bf 	bl	80077ae <USBD_CtlSendStatus>
      break;
 8007430:	e010      	b.n	8007454 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f9bb 	bl	80077ae <USBD_CtlSendStatus>
      break;
 8007438:	e00c      	b.n	8007454 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f8eb 	bl	8007618 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007442:	4b07      	ldr	r3, [pc, #28]	; (8007460 <USBD_SetConfig+0x148>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff f8f7 	bl	800663c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	73fb      	strb	r3, [r7, #15]
      break;
 8007452:	bf00      	nop
  }

  return ret;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	200003c4 	.word	0x200003c4

08007464 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	88db      	ldrh	r3, [r3, #6]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d004      	beq.n	8007480 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8cd 	bl	8007618 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800747e:	e023      	b.n	80074c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	dc02      	bgt.n	8007492 <USBD_GetConfig+0x2e>
 800748c:	2b00      	cmp	r3, #0
 800748e:	dc03      	bgt.n	8007498 <USBD_GetConfig+0x34>
 8007490:	e015      	b.n	80074be <USBD_GetConfig+0x5a>
 8007492:	2b03      	cmp	r3, #3
 8007494:	d00b      	beq.n	80074ae <USBD_GetConfig+0x4a>
 8007496:	e012      	b.n	80074be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3308      	adds	r3, #8
 80074a2:	2201      	movs	r2, #1
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f927 	bl	80076fa <USBD_CtlSendData>
        break;
 80074ac:	e00c      	b.n	80074c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3304      	adds	r3, #4
 80074b2:	2201      	movs	r2, #1
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f91f 	bl	80076fa <USBD_CtlSendData>
        break;
 80074bc:	e004      	b.n	80074c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f8a9 	bl	8007618 <USBD_CtlError>
        break;
 80074c6:	bf00      	nop
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d81e      	bhi.n	8007526 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	88db      	ldrh	r3, [r3, #6]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d004      	beq.n	80074fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f890 	bl	8007618 <USBD_CtlError>
        break;
 80074f8:	e01a      	b.n	8007530 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f043 0202 	orr.w	r2, r3, #2
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	330c      	adds	r3, #12
 800751a:	2202      	movs	r2, #2
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f8eb 	bl	80076fa <USBD_CtlSendData>
      break;
 8007524:	e004      	b.n	8007530 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f875 	bl	8007618 <USBD_CtlError>
      break;
 800752e:	bf00      	nop
  }
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	885b      	ldrh	r3, [r3, #2]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d106      	bne.n	8007558 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f92b 	bl	80077ae <USBD_CtlSendStatus>
  }
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007570:	b2db      	uxtb	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	2b02      	cmp	r3, #2
 8007576:	d80b      	bhi.n	8007590 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	885b      	ldrh	r3, [r3, #2]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d10c      	bne.n	800759a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f910 	bl	80077ae <USBD_CtlSendStatus>
      }
      break;
 800758e:	e004      	b.n	800759a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f840 	bl	8007618 <USBD_CtlError>
      break;
 8007598:	e000      	b.n	800759c <USBD_ClrFeature+0x3c>
      break;
 800759a:	bf00      	nop
  }
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	781a      	ldrb	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff fabb 	bl	8006b4a <SWAPBYTE>
 80075d4:	4603      	mov	r3, r0
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7ff faae 	bl	8006b4a <SWAPBYTE>
 80075ee:	4603      	mov	r3, r0
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3301      	adds	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3301      	adds	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff faa1 	bl	8006b4a <SWAPBYTE>
 8007608:	4603      	mov	r3, r0
 800760a:	461a      	mov	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	80da      	strh	r2, [r3, #6]
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007622:	2180      	movs	r1, #128	; 0x80
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fcbb 	bl	8007fa0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800762a:	2100      	movs	r1, #0
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fcb7 	bl	8007fa0 <USBD_LL_StallEP>
}
 8007632:	bf00      	nop
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b086      	sub	sp, #24
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d036      	beq.n	80076be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007654:	6938      	ldr	r0, [r7, #16]
 8007656:	f000 f836 	bl	80076c6 <USBD_GetLen>
 800765a:	4603      	mov	r3, r0
 800765c:	3301      	adds	r3, #1
 800765e:	b29b      	uxth	r3, r3
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4413      	add	r3, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	7812      	ldrb	r2, [r2, #0]
 8007672:	701a      	strb	r2, [r3, #0]
  idx++;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	3301      	adds	r3, #1
 8007678:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	4413      	add	r3, r2
 8007680:	2203      	movs	r2, #3
 8007682:	701a      	strb	r2, [r3, #0]
  idx++;
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	3301      	adds	r3, #1
 8007688:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800768a:	e013      	b.n	80076b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	3301      	adds	r3, #1
 800769c:	613b      	str	r3, [r7, #16]
    idx++;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	3301      	adds	r3, #1
 80076a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	4413      	add	r3, r2
 80076aa:	2200      	movs	r2, #0
 80076ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	3301      	adds	r3, #1
 80076b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e7      	bne.n	800768c <USBD_GetString+0x52>
 80076bc:	e000      	b.n	80076c0 <USBD_GetString+0x86>
    return;
 80076be:	bf00      	nop
  }
}
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076d6:	e005      	b.n	80076e4 <USBD_GetLen+0x1e>
  {
    len++;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	3301      	adds	r3, #1
 80076dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1f5      	bne.n	80076d8 <USBD_GetLen+0x12>
  }

  return len;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2202      	movs	r2, #2
 800770a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	2100      	movs	r1, #0
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 fcc6 	bl	80080b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	2100      	movs	r1, #0
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fcb5 	bl	80080b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2203      	movs	r2, #3
 8007762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	2100      	movs	r1, #0
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fcb9 	bl	80080f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	2100      	movs	r1, #0
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 fca8 	bl	80080f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2204      	movs	r2, #4
 80077ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077be:	2300      	movs	r3, #0
 80077c0:	2200      	movs	r2, #0
 80077c2:	2100      	movs	r1, #0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fc74 	bl	80080b2 <USBD_LL_Transmit>

  return USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2205      	movs	r2, #5
 80077e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077e4:	2300      	movs	r3, #0
 80077e6:	2200      	movs	r2, #0
 80077e8:	2100      	movs	r1, #0
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fc82 	bl	80080f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007800:	2200      	movs	r2, #0
 8007802:	4912      	ldr	r1, [pc, #72]	; (800784c <MX_USB_DEVICE_Init+0x50>)
 8007804:	4812      	ldr	r0, [pc, #72]	; (8007850 <MX_USB_DEVICE_Init+0x54>)
 8007806:	f7fe fe8f 	bl	8006528 <USBD_Init>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007810:	f7f9 fc58 	bl	80010c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007814:	490f      	ldr	r1, [pc, #60]	; (8007854 <MX_USB_DEVICE_Init+0x58>)
 8007816:	480e      	ldr	r0, [pc, #56]	; (8007850 <MX_USB_DEVICE_Init+0x54>)
 8007818:	f7fe feb6 	bl	8006588 <USBD_RegisterClass>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007822:	f7f9 fc4f 	bl	80010c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007826:	490c      	ldr	r1, [pc, #48]	; (8007858 <MX_USB_DEVICE_Init+0x5c>)
 8007828:	4809      	ldr	r0, [pc, #36]	; (8007850 <MX_USB_DEVICE_Init+0x54>)
 800782a:	f7fe fe07 	bl	800643c <USBD_CDC_RegisterInterface>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007834:	f7f9 fc46 	bl	80010c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007838:	4805      	ldr	r0, [pc, #20]	; (8007850 <MX_USB_DEVICE_Init+0x54>)
 800783a:	f7fe fecc 	bl	80065d6 <USBD_Start>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007844:	f7f9 fc3e 	bl	80010c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007848:	bf00      	nop
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000130 	.word	0x20000130
 8007850:	20000648 	.word	0x20000648
 8007854:	20000018 	.word	0x20000018
 8007858:	2000011c 	.word	0x2000011c

0800785c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007860:	2200      	movs	r2, #0
 8007862:	4905      	ldr	r1, [pc, #20]	; (8007878 <CDC_Init_FS+0x1c>)
 8007864:	4805      	ldr	r0, [pc, #20]	; (800787c <CDC_Init_FS+0x20>)
 8007866:	f7fe fdfe 	bl	8006466 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800786a:	4905      	ldr	r1, [pc, #20]	; (8007880 <CDC_Init_FS+0x24>)
 800786c:	4803      	ldr	r0, [pc, #12]	; (800787c <CDC_Init_FS+0x20>)
 800786e:	f7fe fe18 	bl	80064a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007872:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007874:	4618      	mov	r0, r3
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20001118 	.word	0x20001118
 800787c:	20000648 	.word	0x20000648
 8007880:	20000918 	.word	0x20000918

08007884 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007888:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800788a:	4618      	mov	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
 80078a0:	4613      	mov	r3, r2
 80078a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	2b23      	cmp	r3, #35	; 0x23
 80078a8:	d84a      	bhi.n	8007940 <CDC_Control_FS+0xac>
 80078aa:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <CDC_Control_FS+0x1c>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	08007941 	.word	0x08007941
 80078b4:	08007941 	.word	0x08007941
 80078b8:	08007941 	.word	0x08007941
 80078bc:	08007941 	.word	0x08007941
 80078c0:	08007941 	.word	0x08007941
 80078c4:	08007941 	.word	0x08007941
 80078c8:	08007941 	.word	0x08007941
 80078cc:	08007941 	.word	0x08007941
 80078d0:	08007941 	.word	0x08007941
 80078d4:	08007941 	.word	0x08007941
 80078d8:	08007941 	.word	0x08007941
 80078dc:	08007941 	.word	0x08007941
 80078e0:	08007941 	.word	0x08007941
 80078e4:	08007941 	.word	0x08007941
 80078e8:	08007941 	.word	0x08007941
 80078ec:	08007941 	.word	0x08007941
 80078f0:	08007941 	.word	0x08007941
 80078f4:	08007941 	.word	0x08007941
 80078f8:	08007941 	.word	0x08007941
 80078fc:	08007941 	.word	0x08007941
 8007900:	08007941 	.word	0x08007941
 8007904:	08007941 	.word	0x08007941
 8007908:	08007941 	.word	0x08007941
 800790c:	08007941 	.word	0x08007941
 8007910:	08007941 	.word	0x08007941
 8007914:	08007941 	.word	0x08007941
 8007918:	08007941 	.word	0x08007941
 800791c:	08007941 	.word	0x08007941
 8007920:	08007941 	.word	0x08007941
 8007924:	08007941 	.word	0x08007941
 8007928:	08007941 	.word	0x08007941
 800792c:	08007941 	.word	0x08007941
 8007930:	08007941 	.word	0x08007941
 8007934:	08007941 	.word	0x08007941
 8007938:	08007941 	.word	0x08007941
 800793c:	08007941 	.word	0x08007941
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007940:	bf00      	nop
  }

  return (USBD_OK);
 8007942:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	4805      	ldr	r0, [pc, #20]	; (8007974 <CDC_Receive_FS+0x24>)
 800795e:	f7fe fda0 	bl	80064a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007962:	4804      	ldr	r0, [pc, #16]	; (8007974 <CDC_Receive_FS+0x24>)
 8007964:	f7fe fdb6 	bl	80064d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007968:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000648 	.word	0x20000648

08007978 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800798a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800798e:	4618      	mov	r0, r3
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2212      	movs	r2, #18
 80079ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079ae:	4b03      	ldr	r3, [pc, #12]	; (80079bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	2000014c 	.word	0x2000014c

080079c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	6039      	str	r1, [r7, #0]
 80079ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2204      	movs	r2, #4
 80079d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80079d2:	4b03      	ldr	r3, [pc, #12]	; (80079e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	20000160 	.word	0x20000160

080079e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d105      	bne.n	8007a02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	4907      	ldr	r1, [pc, #28]	; (8007a18 <USBD_FS_ProductStrDescriptor+0x34>)
 80079fa:	4808      	ldr	r0, [pc, #32]	; (8007a1c <USBD_FS_ProductStrDescriptor+0x38>)
 80079fc:	f7ff fe1d 	bl	800763a <USBD_GetString>
 8007a00:	e004      	b.n	8007a0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	4904      	ldr	r1, [pc, #16]	; (8007a18 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a06:	4805      	ldr	r0, [pc, #20]	; (8007a1c <USBD_FS_ProductStrDescriptor+0x38>)
 8007a08:	f7ff fe17 	bl	800763a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a0c:	4b02      	ldr	r3, [pc, #8]	; (8007a18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20001918 	.word	0x20001918
 8007a1c:	0800ac08 	.word	0x0800ac08

08007a20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	4904      	ldr	r1, [pc, #16]	; (8007a40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a30:	4804      	ldr	r0, [pc, #16]	; (8007a44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a32:	f7ff fe02 	bl	800763a <USBD_GetString>
  return USBD_StrDesc;
 8007a36:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20001918 	.word	0x20001918
 8007a44:	0800ac20 	.word	0x0800ac20

08007a48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	6039      	str	r1, [r7, #0]
 8007a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	221a      	movs	r2, #26
 8007a58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a5a:	f000 f843 	bl	8007ae4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a5e:	4b02      	ldr	r3, [pc, #8]	; (8007a68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	20000164 	.word	0x20000164

08007a6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	6039      	str	r1, [r7, #0]
 8007a76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d105      	bne.n	8007a8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	4907      	ldr	r1, [pc, #28]	; (8007aa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a82:	4808      	ldr	r0, [pc, #32]	; (8007aa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a84:	f7ff fdd9 	bl	800763a <USBD_GetString>
 8007a88:	e004      	b.n	8007a94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	4904      	ldr	r1, [pc, #16]	; (8007aa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a8e:	4805      	ldr	r0, [pc, #20]	; (8007aa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a90:	f7ff fdd3 	bl	800763a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a94:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20001918 	.word	0x20001918
 8007aa4:	0800ac34 	.word	0x0800ac34

08007aa8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4907      	ldr	r1, [pc, #28]	; (8007adc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007abe:	4808      	ldr	r0, [pc, #32]	; (8007ae0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ac0:	f7ff fdbb 	bl	800763a <USBD_GetString>
 8007ac4:	e004      	b.n	8007ad0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4904      	ldr	r1, [pc, #16]	; (8007adc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007aca:	4805      	ldr	r0, [pc, #20]	; (8007ae0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007acc:	f7ff fdb5 	bl	800763a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20001918 	.word	0x20001918
 8007ae0:	0800ac40 	.word	0x0800ac40

08007ae4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007aea:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <Get_SerialNum+0x44>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007af0:	4b0e      	ldr	r3, [pc, #56]	; (8007b2c <Get_SerialNum+0x48>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007af6:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <Get_SerialNum+0x4c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4413      	add	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b0a:	2208      	movs	r2, #8
 8007b0c:	4909      	ldr	r1, [pc, #36]	; (8007b34 <Get_SerialNum+0x50>)
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 f814 	bl	8007b3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b14:	2204      	movs	r2, #4
 8007b16:	4908      	ldr	r1, [pc, #32]	; (8007b38 <Get_SerialNum+0x54>)
 8007b18:	68b8      	ldr	r0, [r7, #8]
 8007b1a:	f000 f80f 	bl	8007b3c <IntToUnicode>
  }
}
 8007b1e:	bf00      	nop
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	1fff7a10 	.word	0x1fff7a10
 8007b2c:	1fff7a14 	.word	0x1fff7a14
 8007b30:	1fff7a18 	.word	0x1fff7a18
 8007b34:	20000166 	.word	0x20000166
 8007b38:	20000176 	.word	0x20000176

08007b3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]
 8007b52:	e027      	b.n	8007ba4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	0f1b      	lsrs	r3, r3, #28
 8007b58:	2b09      	cmp	r3, #9
 8007b5a:	d80b      	bhi.n	8007b74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	0f1b      	lsrs	r3, r3, #28
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	4619      	mov	r1, r3
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	440b      	add	r3, r1
 8007b6c:	3230      	adds	r2, #48	; 0x30
 8007b6e:	b2d2      	uxtb	r2, r2
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e00a      	b.n	8007b8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	0f1b      	lsrs	r3, r3, #28
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	4619      	mov	r1, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	440b      	add	r3, r1
 8007b84:	3237      	adds	r2, #55	; 0x37
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	3301      	adds	r3, #1
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	4413      	add	r3, r2
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	75fb      	strb	r3, [r7, #23]
 8007ba4:	7dfa      	ldrb	r2, [r7, #23]
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d3d3      	bcc.n	8007b54 <IntToUnicode+0x18>
  }
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	; 0x28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bc4:	f107 0314 	add.w	r3, r7, #20
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	605a      	str	r2, [r3, #4]
 8007bce:	609a      	str	r2, [r3, #8]
 8007bd0:	60da      	str	r2, [r3, #12]
 8007bd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bdc:	d13a      	bne.n	8007c54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bde:	2300      	movs	r3, #0
 8007be0:	613b      	str	r3, [r7, #16]
 8007be2:	4b1e      	ldr	r3, [pc, #120]	; (8007c5c <HAL_PCD_MspInit+0xa0>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	4a1d      	ldr	r2, [pc, #116]	; (8007c5c <HAL_PCD_MspInit+0xa0>)
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	6313      	str	r3, [r2, #48]	; 0x30
 8007bee:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <HAL_PCD_MspInit+0xa0>)
 8007bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	613b      	str	r3, [r7, #16]
 8007bf8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007bfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c00:	2302      	movs	r3, #2
 8007c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c0c:	230a      	movs	r3, #10
 8007c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c10:	f107 0314 	add.w	r3, r7, #20
 8007c14:	4619      	mov	r1, r3
 8007c16:	4812      	ldr	r0, [pc, #72]	; (8007c60 <HAL_PCD_MspInit+0xa4>)
 8007c18:	f7f9 fdb4 	bl	8001784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c1c:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <HAL_PCD_MspInit+0xa0>)
 8007c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c20:	4a0e      	ldr	r2, [pc, #56]	; (8007c5c <HAL_PCD_MspInit+0xa0>)
 8007c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c26:	6353      	str	r3, [r2, #52]	; 0x34
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <HAL_PCD_MspInit+0xa0>)
 8007c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c30:	4a0a      	ldr	r2, [pc, #40]	; (8007c5c <HAL_PCD_MspInit+0xa0>)
 8007c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c36:	6453      	str	r3, [r2, #68]	; 0x44
 8007c38:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <HAL_PCD_MspInit+0xa0>)
 8007c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c44:	2200      	movs	r2, #0
 8007c46:	2100      	movs	r1, #0
 8007c48:	2043      	movs	r0, #67	; 0x43
 8007c4a:	f7f9 fd64 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c4e:	2043      	movs	r0, #67	; 0x43
 8007c50:	f7f9 fd7d 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c54:	bf00      	nop
 8007c56:	3728      	adds	r7, #40	; 0x28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40023800 	.word	0x40023800
 8007c60:	40020000 	.word	0x40020000

08007c64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f7fe fcf6 	bl	800666c <USBD_LL_SetupStage>
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	78fb      	ldrb	r3, [r7, #3]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	f7fe fd30 	bl	8006716 <USBD_LL_DataOutStage>
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007cd0:	78fa      	ldrb	r2, [r7, #3]
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	3348      	adds	r3, #72	; 0x48
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f7fe fd79 	bl	80067dc <USBD_LL_DataInStage>
}
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe fe8d 	bl	8006a20 <USBD_LL_SOF>
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d16:	2301      	movs	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d102      	bne.n	8007d28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
 8007d26:	e008      	b.n	8007d3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d102      	bne.n	8007d36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
 8007d34:	e001      	b.n	8007d3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007d36:	f7f9 f9c5 	bl	80010c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d40:	7bfa      	ldrb	r2, [r7, #15]
 8007d42:	4611      	mov	r1, r2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fe2d 	bl	80069a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fdd9 	bl	8006908 <USBD_LL_Reset>
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fe28 	bl	80069c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d94:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <HAL_PCD_SuspendCallback+0x48>)
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	4a03      	ldr	r2, [pc, #12]	; (8007da8 <HAL_PCD_SuspendCallback+0x48>)
 8007d9a:	f043 0306 	orr.w	r3, r3, #6
 8007d9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed00 	.word	0xe000ed00

08007dac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fe18 	bl	80069f0 <USBD_LL_Resume>
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dda:	78fa      	ldrb	r2, [r7, #3]
 8007ddc:	4611      	mov	r1, r2
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe fe66 	bl	8006ab0 <USBD_LL_IsoOUTIncomplete>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dfe:	78fa      	ldrb	r2, [r7, #3]
 8007e00:	4611      	mov	r1, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fe2e 	bl	8006a64 <USBD_LL_IsoINIncomplete>
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fe6c 	bl	8006afc <USBD_LL_DevConnected>
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fe69 	bl	8006b12 <USBD_LL_DevDisconnected>
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d13c      	bne.n	8007ed2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e58:	4a20      	ldr	r2, [pc, #128]	; (8007edc <USBD_LL_Init+0x94>)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a1e      	ldr	r2, [pc, #120]	; (8007edc <USBD_LL_Init+0x94>)
 8007e64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e68:	4b1c      	ldr	r3, [pc, #112]	; (8007edc <USBD_LL_Init+0x94>)
 8007e6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e70:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <USBD_LL_Init+0x94>)
 8007e72:	2204      	movs	r2, #4
 8007e74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e76:	4b19      	ldr	r3, [pc, #100]	; (8007edc <USBD_LL_Init+0x94>)
 8007e78:	2202      	movs	r2, #2
 8007e7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e7c:	4b17      	ldr	r3, [pc, #92]	; (8007edc <USBD_LL_Init+0x94>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e82:	4b16      	ldr	r3, [pc, #88]	; (8007edc <USBD_LL_Init+0x94>)
 8007e84:	2202      	movs	r2, #2
 8007e86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e88:	4b14      	ldr	r3, [pc, #80]	; (8007edc <USBD_LL_Init+0x94>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <USBD_LL_Init+0x94>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e94:	4b11      	ldr	r3, [pc, #68]	; (8007edc <USBD_LL_Init+0x94>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e9a:	4b10      	ldr	r3, [pc, #64]	; (8007edc <USBD_LL_Init+0x94>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ea0:	4b0e      	ldr	r3, [pc, #56]	; (8007edc <USBD_LL_Init+0x94>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ea6:	480d      	ldr	r0, [pc, #52]	; (8007edc <USBD_LL_Init+0x94>)
 8007ea8:	f7fa fdc9 	bl	8002a3e <HAL_PCD_Init>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007eb2:	f7f9 f907 	bl	80010c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007eb6:	2180      	movs	r1, #128	; 0x80
 8007eb8:	4808      	ldr	r0, [pc, #32]	; (8007edc <USBD_LL_Init+0x94>)
 8007eba:	f7fb ff26 	bl	8003d0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ebe:	2240      	movs	r2, #64	; 0x40
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4806      	ldr	r0, [pc, #24]	; (8007edc <USBD_LL_Init+0x94>)
 8007ec4:	f7fb feda 	bl	8003c7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ec8:	2280      	movs	r2, #128	; 0x80
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4803      	ldr	r0, [pc, #12]	; (8007edc <USBD_LL_Init+0x94>)
 8007ece:	f7fb fed5 	bl	8003c7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20001b18 	.word	0x20001b18

08007ee0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fa febe 	bl	8002c78 <HAL_PCD_Start>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 f942 	bl	800818c <USBD_Get_USB_Status>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	4608      	mov	r0, r1
 8007f20:	4611      	mov	r1, r2
 8007f22:	461a      	mov	r2, r3
 8007f24:	4603      	mov	r3, r0
 8007f26:	70fb      	strb	r3, [r7, #3]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70bb      	strb	r3, [r7, #2]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f3e:	78bb      	ldrb	r3, [r7, #2]
 8007f40:	883a      	ldrh	r2, [r7, #0]
 8007f42:	78f9      	ldrb	r1, [r7, #3]
 8007f44:	f7fb faa2 	bl	800348c <HAL_PCD_EP_Open>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f91c 	bl	800818c <USBD_Get_USB_Status>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f7c:	78fa      	ldrb	r2, [r7, #3]
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fb faeb 	bl	800355c <HAL_PCD_EP_Close>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 f8fd 	bl	800818c <USBD_Get_USB_Status>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fb fbc3 	bl	800374a <HAL_PCD_EP_SetStall>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f8de 	bl	800818c <USBD_Get_USB_Status>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fb fc08 	bl	8003812 <HAL_PCD_EP_ClrStall>
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	4618      	mov	r0, r3
 800800a:	f000 f8bf 	bl	800818c <USBD_Get_USB_Status>
 800800e:	4603      	mov	r3, r0
 8008010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008012:	7bbb      	ldrb	r3, [r7, #14]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800802e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008034:	2b00      	cmp	r3, #0
 8008036:	da0b      	bge.n	8008050 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	4613      	mov	r3, r2
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	333e      	adds	r3, #62	; 0x3e
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	e00b      	b.n	8008068 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008056:	68f9      	ldr	r1, [r7, #12]
 8008058:	4613      	mov	r3, r2
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	1a9b      	subs	r3, r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	440b      	add	r3, r1
 8008062:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008066:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	4611      	mov	r1, r2
 8008092:	4618      	mov	r0, r3
 8008094:	f7fb f9d5 	bl	8003442 <HAL_PCD_SetAddress>
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f874 	bl	800818c <USBD_Get_USB_Status>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b086      	sub	sp, #24
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
 80080be:	460b      	mov	r3, r1
 80080c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080d0:	7af9      	ldrb	r1, [r7, #11]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	f7fb faee 	bl	80036b6 <HAL_PCD_EP_Transmit>
 80080da:	4603      	mov	r3, r0
 80080dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 f853 	bl	800818c <USBD_Get_USB_Status>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	460b      	mov	r3, r1
 8008102:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008112:	7af9      	ldrb	r1, [r7, #11]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	f7fb fa6a 	bl	80035f0 <HAL_PCD_EP_Receive>
 800811c:	4603      	mov	r3, r0
 800811e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f832 	bl	800818c <USBD_Get_USB_Status>
 8008128:	4603      	mov	r3, r0
 800812a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800812c:	7dbb      	ldrb	r3, [r7, #22]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	4611      	mov	r1, r2
 800814c:	4618      	mov	r0, r3
 800814e:	f7fb fa9a 	bl	8003686 <HAL_PCD_EP_GetRxCount>
 8008152:	4603      	mov	r3, r0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008164:	4b03      	ldr	r3, [pc, #12]	; (8008174 <USBD_static_malloc+0x18>)
}
 8008166:	4618      	mov	r0, r3
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	200003c8 	.word	0x200003c8

08008178 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]

}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d817      	bhi.n	80081d0 <USBD_Get_USB_Status+0x44>
 80081a0:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <USBD_Get_USB_Status+0x1c>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	080081b9 	.word	0x080081b9
 80081ac:	080081bf 	.word	0x080081bf
 80081b0:	080081c5 	.word	0x080081c5
 80081b4:	080081cb 	.word	0x080081cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
    break;
 80081bc:	e00b      	b.n	80081d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081be:	2303      	movs	r3, #3
 80081c0:	73fb      	strb	r3, [r7, #15]
    break;
 80081c2:	e008      	b.n	80081d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
    break;
 80081c8:	e005      	b.n	80081d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081ca:	2303      	movs	r3, #3
 80081cc:	73fb      	strb	r3, [r7, #15]
    break;
 80081ce:	e002      	b.n	80081d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	73fb      	strb	r3, [r7, #15]
    break;
 80081d4:	bf00      	nop
  }
  return usb_status;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <__errno>:
 80081e4:	4b01      	ldr	r3, [pc, #4]	; (80081ec <__errno+0x8>)
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000180 	.word	0x20000180

080081f0 <__libc_init_array>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	4d0d      	ldr	r5, [pc, #52]	; (8008228 <__libc_init_array+0x38>)
 80081f4:	4c0d      	ldr	r4, [pc, #52]	; (800822c <__libc_init_array+0x3c>)
 80081f6:	1b64      	subs	r4, r4, r5
 80081f8:	10a4      	asrs	r4, r4, #2
 80081fa:	2600      	movs	r6, #0
 80081fc:	42a6      	cmp	r6, r4
 80081fe:	d109      	bne.n	8008214 <__libc_init_array+0x24>
 8008200:	4d0b      	ldr	r5, [pc, #44]	; (8008230 <__libc_init_array+0x40>)
 8008202:	4c0c      	ldr	r4, [pc, #48]	; (8008234 <__libc_init_array+0x44>)
 8008204:	f002 fcf2 	bl	800abec <_init>
 8008208:	1b64      	subs	r4, r4, r5
 800820a:	10a4      	asrs	r4, r4, #2
 800820c:	2600      	movs	r6, #0
 800820e:	42a6      	cmp	r6, r4
 8008210:	d105      	bne.n	800821e <__libc_init_array+0x2e>
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	f855 3b04 	ldr.w	r3, [r5], #4
 8008218:	4798      	blx	r3
 800821a:	3601      	adds	r6, #1
 800821c:	e7ee      	b.n	80081fc <__libc_init_array+0xc>
 800821e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008222:	4798      	blx	r3
 8008224:	3601      	adds	r6, #1
 8008226:	e7f2      	b.n	800820e <__libc_init_array+0x1e>
 8008228:	0800b054 	.word	0x0800b054
 800822c:	0800b054 	.word	0x0800b054
 8008230:	0800b054 	.word	0x0800b054
 8008234:	0800b058 	.word	0x0800b058

08008238 <memset>:
 8008238:	4402      	add	r2, r0
 800823a:	4603      	mov	r3, r0
 800823c:	4293      	cmp	r3, r2
 800823e:	d100      	bne.n	8008242 <memset+0xa>
 8008240:	4770      	bx	lr
 8008242:	f803 1b01 	strb.w	r1, [r3], #1
 8008246:	e7f9      	b.n	800823c <memset+0x4>

08008248 <__cvt>:
 8008248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	ec55 4b10 	vmov	r4, r5, d0
 8008250:	2d00      	cmp	r5, #0
 8008252:	460e      	mov	r6, r1
 8008254:	4619      	mov	r1, r3
 8008256:	462b      	mov	r3, r5
 8008258:	bfbb      	ittet	lt
 800825a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800825e:	461d      	movlt	r5, r3
 8008260:	2300      	movge	r3, #0
 8008262:	232d      	movlt	r3, #45	; 0x2d
 8008264:	700b      	strb	r3, [r1, #0]
 8008266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008268:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800826c:	4691      	mov	r9, r2
 800826e:	f023 0820 	bic.w	r8, r3, #32
 8008272:	bfbc      	itt	lt
 8008274:	4622      	movlt	r2, r4
 8008276:	4614      	movlt	r4, r2
 8008278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800827c:	d005      	beq.n	800828a <__cvt+0x42>
 800827e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008282:	d100      	bne.n	8008286 <__cvt+0x3e>
 8008284:	3601      	adds	r6, #1
 8008286:	2102      	movs	r1, #2
 8008288:	e000      	b.n	800828c <__cvt+0x44>
 800828a:	2103      	movs	r1, #3
 800828c:	ab03      	add	r3, sp, #12
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	ab02      	add	r3, sp, #8
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	ec45 4b10 	vmov	d0, r4, r5
 8008298:	4653      	mov	r3, sl
 800829a:	4632      	mov	r2, r6
 800829c:	f000 fccc 	bl	8008c38 <_dtoa_r>
 80082a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082a4:	4607      	mov	r7, r0
 80082a6:	d102      	bne.n	80082ae <__cvt+0x66>
 80082a8:	f019 0f01 	tst.w	r9, #1
 80082ac:	d022      	beq.n	80082f4 <__cvt+0xac>
 80082ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082b2:	eb07 0906 	add.w	r9, r7, r6
 80082b6:	d110      	bne.n	80082da <__cvt+0x92>
 80082b8:	783b      	ldrb	r3, [r7, #0]
 80082ba:	2b30      	cmp	r3, #48	; 0x30
 80082bc:	d10a      	bne.n	80082d4 <__cvt+0x8c>
 80082be:	2200      	movs	r2, #0
 80082c0:	2300      	movs	r3, #0
 80082c2:	4620      	mov	r0, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	f7f8 fc07 	bl	8000ad8 <__aeabi_dcmpeq>
 80082ca:	b918      	cbnz	r0, 80082d4 <__cvt+0x8c>
 80082cc:	f1c6 0601 	rsb	r6, r6, #1
 80082d0:	f8ca 6000 	str.w	r6, [sl]
 80082d4:	f8da 3000 	ldr.w	r3, [sl]
 80082d8:	4499      	add	r9, r3
 80082da:	2200      	movs	r2, #0
 80082dc:	2300      	movs	r3, #0
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f8 fbf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80082e6:	b108      	cbz	r0, 80082ec <__cvt+0xa4>
 80082e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80082ec:	2230      	movs	r2, #48	; 0x30
 80082ee:	9b03      	ldr	r3, [sp, #12]
 80082f0:	454b      	cmp	r3, r9
 80082f2:	d307      	bcc.n	8008304 <__cvt+0xbc>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082f8:	1bdb      	subs	r3, r3, r7
 80082fa:	4638      	mov	r0, r7
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	b004      	add	sp, #16
 8008300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	9103      	str	r1, [sp, #12]
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e7f0      	b.n	80082ee <__cvt+0xa6>

0800830c <__exponent>:
 800830c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800830e:	4603      	mov	r3, r0
 8008310:	2900      	cmp	r1, #0
 8008312:	bfb8      	it	lt
 8008314:	4249      	neglt	r1, r1
 8008316:	f803 2b02 	strb.w	r2, [r3], #2
 800831a:	bfb4      	ite	lt
 800831c:	222d      	movlt	r2, #45	; 0x2d
 800831e:	222b      	movge	r2, #43	; 0x2b
 8008320:	2909      	cmp	r1, #9
 8008322:	7042      	strb	r2, [r0, #1]
 8008324:	dd2a      	ble.n	800837c <__exponent+0x70>
 8008326:	f10d 0407 	add.w	r4, sp, #7
 800832a:	46a4      	mov	ip, r4
 800832c:	270a      	movs	r7, #10
 800832e:	46a6      	mov	lr, r4
 8008330:	460a      	mov	r2, r1
 8008332:	fb91 f6f7 	sdiv	r6, r1, r7
 8008336:	fb07 1516 	mls	r5, r7, r6, r1
 800833a:	3530      	adds	r5, #48	; 0x30
 800833c:	2a63      	cmp	r2, #99	; 0x63
 800833e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008346:	4631      	mov	r1, r6
 8008348:	dcf1      	bgt.n	800832e <__exponent+0x22>
 800834a:	3130      	adds	r1, #48	; 0x30
 800834c:	f1ae 0502 	sub.w	r5, lr, #2
 8008350:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008354:	1c44      	adds	r4, r0, #1
 8008356:	4629      	mov	r1, r5
 8008358:	4561      	cmp	r1, ip
 800835a:	d30a      	bcc.n	8008372 <__exponent+0x66>
 800835c:	f10d 0209 	add.w	r2, sp, #9
 8008360:	eba2 020e 	sub.w	r2, r2, lr
 8008364:	4565      	cmp	r5, ip
 8008366:	bf88      	it	hi
 8008368:	2200      	movhi	r2, #0
 800836a:	4413      	add	r3, r2
 800836c:	1a18      	subs	r0, r3, r0
 800836e:	b003      	add	sp, #12
 8008370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008376:	f804 2f01 	strb.w	r2, [r4, #1]!
 800837a:	e7ed      	b.n	8008358 <__exponent+0x4c>
 800837c:	2330      	movs	r3, #48	; 0x30
 800837e:	3130      	adds	r1, #48	; 0x30
 8008380:	7083      	strb	r3, [r0, #2]
 8008382:	70c1      	strb	r1, [r0, #3]
 8008384:	1d03      	adds	r3, r0, #4
 8008386:	e7f1      	b.n	800836c <__exponent+0x60>

08008388 <_printf_float>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	ed2d 8b02 	vpush	{d8}
 8008390:	b08d      	sub	sp, #52	; 0x34
 8008392:	460c      	mov	r4, r1
 8008394:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008398:	4616      	mov	r6, r2
 800839a:	461f      	mov	r7, r3
 800839c:	4605      	mov	r5, r0
 800839e:	f001 fa37 	bl	8009810 <_localeconv_r>
 80083a2:	f8d0 a000 	ldr.w	sl, [r0]
 80083a6:	4650      	mov	r0, sl
 80083a8:	f7f7 ff1a 	bl	80001e0 <strlen>
 80083ac:	2300      	movs	r3, #0
 80083ae:	930a      	str	r3, [sp, #40]	; 0x28
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	9305      	str	r3, [sp, #20]
 80083b4:	f8d8 3000 	ldr.w	r3, [r8]
 80083b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083bc:	3307      	adds	r3, #7
 80083be:	f023 0307 	bic.w	r3, r3, #7
 80083c2:	f103 0208 	add.w	r2, r3, #8
 80083c6:	f8c8 2000 	str.w	r2, [r8]
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083da:	9307      	str	r3, [sp, #28]
 80083dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80083e0:	ee08 0a10 	vmov	s16, r0
 80083e4:	4b9f      	ldr	r3, [pc, #636]	; (8008664 <_printf_float+0x2dc>)
 80083e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ea:	f04f 32ff 	mov.w	r2, #4294967295
 80083ee:	f7f8 fba5 	bl	8000b3c <__aeabi_dcmpun>
 80083f2:	bb88      	cbnz	r0, 8008458 <_printf_float+0xd0>
 80083f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f8:	4b9a      	ldr	r3, [pc, #616]	; (8008664 <_printf_float+0x2dc>)
 80083fa:	f04f 32ff 	mov.w	r2, #4294967295
 80083fe:	f7f8 fb7f 	bl	8000b00 <__aeabi_dcmple>
 8008402:	bb48      	cbnz	r0, 8008458 <_printf_float+0xd0>
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4640      	mov	r0, r8
 800840a:	4649      	mov	r1, r9
 800840c:	f7f8 fb6e 	bl	8000aec <__aeabi_dcmplt>
 8008410:	b110      	cbz	r0, 8008418 <_printf_float+0x90>
 8008412:	232d      	movs	r3, #45	; 0x2d
 8008414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008418:	4b93      	ldr	r3, [pc, #588]	; (8008668 <_printf_float+0x2e0>)
 800841a:	4894      	ldr	r0, [pc, #592]	; (800866c <_printf_float+0x2e4>)
 800841c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008420:	bf94      	ite	ls
 8008422:	4698      	movls	r8, r3
 8008424:	4680      	movhi	r8, r0
 8008426:	2303      	movs	r3, #3
 8008428:	6123      	str	r3, [r4, #16]
 800842a:	9b05      	ldr	r3, [sp, #20]
 800842c:	f023 0204 	bic.w	r2, r3, #4
 8008430:	6022      	str	r2, [r4, #0]
 8008432:	f04f 0900 	mov.w	r9, #0
 8008436:	9700      	str	r7, [sp, #0]
 8008438:	4633      	mov	r3, r6
 800843a:	aa0b      	add	r2, sp, #44	; 0x2c
 800843c:	4621      	mov	r1, r4
 800843e:	4628      	mov	r0, r5
 8008440:	f000 f9d8 	bl	80087f4 <_printf_common>
 8008444:	3001      	adds	r0, #1
 8008446:	f040 8090 	bne.w	800856a <_printf_float+0x1e2>
 800844a:	f04f 30ff 	mov.w	r0, #4294967295
 800844e:	b00d      	add	sp, #52	; 0x34
 8008450:	ecbd 8b02 	vpop	{d8}
 8008454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	4640      	mov	r0, r8
 800845e:	4649      	mov	r1, r9
 8008460:	f7f8 fb6c 	bl	8000b3c <__aeabi_dcmpun>
 8008464:	b140      	cbz	r0, 8008478 <_printf_float+0xf0>
 8008466:	464b      	mov	r3, r9
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfbc      	itt	lt
 800846c:	232d      	movlt	r3, #45	; 0x2d
 800846e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008472:	487f      	ldr	r0, [pc, #508]	; (8008670 <_printf_float+0x2e8>)
 8008474:	4b7f      	ldr	r3, [pc, #508]	; (8008674 <_printf_float+0x2ec>)
 8008476:	e7d1      	b.n	800841c <_printf_float+0x94>
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800847e:	9206      	str	r2, [sp, #24]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	d13f      	bne.n	8008504 <_printf_float+0x17c>
 8008484:	2306      	movs	r3, #6
 8008486:	6063      	str	r3, [r4, #4]
 8008488:	9b05      	ldr	r3, [sp, #20]
 800848a:	6861      	ldr	r1, [r4, #4]
 800848c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008490:	2300      	movs	r3, #0
 8008492:	9303      	str	r3, [sp, #12]
 8008494:	ab0a      	add	r3, sp, #40	; 0x28
 8008496:	e9cd b301 	strd	fp, r3, [sp, #4]
 800849a:	ab09      	add	r3, sp, #36	; 0x24
 800849c:	ec49 8b10 	vmov	d0, r8, r9
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	6022      	str	r2, [r4, #0]
 80084a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084a8:	4628      	mov	r0, r5
 80084aa:	f7ff fecd 	bl	8008248 <__cvt>
 80084ae:	9b06      	ldr	r3, [sp, #24]
 80084b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084b2:	2b47      	cmp	r3, #71	; 0x47
 80084b4:	4680      	mov	r8, r0
 80084b6:	d108      	bne.n	80084ca <_printf_float+0x142>
 80084b8:	1cc8      	adds	r0, r1, #3
 80084ba:	db02      	blt.n	80084c2 <_printf_float+0x13a>
 80084bc:	6863      	ldr	r3, [r4, #4]
 80084be:	4299      	cmp	r1, r3
 80084c0:	dd41      	ble.n	8008546 <_printf_float+0x1be>
 80084c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80084c6:	fa5f fb8b 	uxtb.w	fp, fp
 80084ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084ce:	d820      	bhi.n	8008512 <_printf_float+0x18a>
 80084d0:	3901      	subs	r1, #1
 80084d2:	465a      	mov	r2, fp
 80084d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084d8:	9109      	str	r1, [sp, #36]	; 0x24
 80084da:	f7ff ff17 	bl	800830c <__exponent>
 80084de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084e0:	1813      	adds	r3, r2, r0
 80084e2:	2a01      	cmp	r2, #1
 80084e4:	4681      	mov	r9, r0
 80084e6:	6123      	str	r3, [r4, #16]
 80084e8:	dc02      	bgt.n	80084f0 <_printf_float+0x168>
 80084ea:	6822      	ldr	r2, [r4, #0]
 80084ec:	07d2      	lsls	r2, r2, #31
 80084ee:	d501      	bpl.n	80084f4 <_printf_float+0x16c>
 80084f0:	3301      	adds	r3, #1
 80084f2:	6123      	str	r3, [r4, #16]
 80084f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d09c      	beq.n	8008436 <_printf_float+0xae>
 80084fc:	232d      	movs	r3, #45	; 0x2d
 80084fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008502:	e798      	b.n	8008436 <_printf_float+0xae>
 8008504:	9a06      	ldr	r2, [sp, #24]
 8008506:	2a47      	cmp	r2, #71	; 0x47
 8008508:	d1be      	bne.n	8008488 <_printf_float+0x100>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1bc      	bne.n	8008488 <_printf_float+0x100>
 800850e:	2301      	movs	r3, #1
 8008510:	e7b9      	b.n	8008486 <_printf_float+0xfe>
 8008512:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008516:	d118      	bne.n	800854a <_printf_float+0x1c2>
 8008518:	2900      	cmp	r1, #0
 800851a:	6863      	ldr	r3, [r4, #4]
 800851c:	dd0b      	ble.n	8008536 <_printf_float+0x1ae>
 800851e:	6121      	str	r1, [r4, #16]
 8008520:	b913      	cbnz	r3, 8008528 <_printf_float+0x1a0>
 8008522:	6822      	ldr	r2, [r4, #0]
 8008524:	07d0      	lsls	r0, r2, #31
 8008526:	d502      	bpl.n	800852e <_printf_float+0x1a6>
 8008528:	3301      	adds	r3, #1
 800852a:	440b      	add	r3, r1
 800852c:	6123      	str	r3, [r4, #16]
 800852e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008530:	f04f 0900 	mov.w	r9, #0
 8008534:	e7de      	b.n	80084f4 <_printf_float+0x16c>
 8008536:	b913      	cbnz	r3, 800853e <_printf_float+0x1b6>
 8008538:	6822      	ldr	r2, [r4, #0]
 800853a:	07d2      	lsls	r2, r2, #31
 800853c:	d501      	bpl.n	8008542 <_printf_float+0x1ba>
 800853e:	3302      	adds	r3, #2
 8008540:	e7f4      	b.n	800852c <_printf_float+0x1a4>
 8008542:	2301      	movs	r3, #1
 8008544:	e7f2      	b.n	800852c <_printf_float+0x1a4>
 8008546:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800854a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854c:	4299      	cmp	r1, r3
 800854e:	db05      	blt.n	800855c <_printf_float+0x1d4>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	6121      	str	r1, [r4, #16]
 8008554:	07d8      	lsls	r0, r3, #31
 8008556:	d5ea      	bpl.n	800852e <_printf_float+0x1a6>
 8008558:	1c4b      	adds	r3, r1, #1
 800855a:	e7e7      	b.n	800852c <_printf_float+0x1a4>
 800855c:	2900      	cmp	r1, #0
 800855e:	bfd4      	ite	le
 8008560:	f1c1 0202 	rsble	r2, r1, #2
 8008564:	2201      	movgt	r2, #1
 8008566:	4413      	add	r3, r2
 8008568:	e7e0      	b.n	800852c <_printf_float+0x1a4>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	055a      	lsls	r2, r3, #21
 800856e:	d407      	bmi.n	8008580 <_printf_float+0x1f8>
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	4642      	mov	r2, r8
 8008574:	4631      	mov	r1, r6
 8008576:	4628      	mov	r0, r5
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	d12c      	bne.n	80085d8 <_printf_float+0x250>
 800857e:	e764      	b.n	800844a <_printf_float+0xc2>
 8008580:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008584:	f240 80e0 	bls.w	8008748 <_printf_float+0x3c0>
 8008588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800858c:	2200      	movs	r2, #0
 800858e:	2300      	movs	r3, #0
 8008590:	f7f8 faa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008594:	2800      	cmp	r0, #0
 8008596:	d034      	beq.n	8008602 <_printf_float+0x27a>
 8008598:	4a37      	ldr	r2, [pc, #220]	; (8008678 <_printf_float+0x2f0>)
 800859a:	2301      	movs	r3, #1
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f af51 	beq.w	800844a <_printf_float+0xc2>
 80085a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085ac:	429a      	cmp	r2, r3
 80085ae:	db02      	blt.n	80085b6 <_printf_float+0x22e>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	07d8      	lsls	r0, r3, #31
 80085b4:	d510      	bpl.n	80085d8 <_printf_float+0x250>
 80085b6:	ee18 3a10 	vmov	r3, s16
 80085ba:	4652      	mov	r2, sl
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f af41 	beq.w	800844a <_printf_float+0xc2>
 80085c8:	f04f 0800 	mov.w	r8, #0
 80085cc:	f104 091a 	add.w	r9, r4, #26
 80085d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d2:	3b01      	subs	r3, #1
 80085d4:	4543      	cmp	r3, r8
 80085d6:	dc09      	bgt.n	80085ec <_printf_float+0x264>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	079b      	lsls	r3, r3, #30
 80085dc:	f100 8105 	bmi.w	80087ea <_printf_float+0x462>
 80085e0:	68e0      	ldr	r0, [r4, #12]
 80085e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e4:	4298      	cmp	r0, r3
 80085e6:	bfb8      	it	lt
 80085e8:	4618      	movlt	r0, r3
 80085ea:	e730      	b.n	800844e <_printf_float+0xc6>
 80085ec:	2301      	movs	r3, #1
 80085ee:	464a      	mov	r2, r9
 80085f0:	4631      	mov	r1, r6
 80085f2:	4628      	mov	r0, r5
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	f43f af27 	beq.w	800844a <_printf_float+0xc2>
 80085fc:	f108 0801 	add.w	r8, r8, #1
 8008600:	e7e6      	b.n	80085d0 <_printf_float+0x248>
 8008602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	dc39      	bgt.n	800867c <_printf_float+0x2f4>
 8008608:	4a1b      	ldr	r2, [pc, #108]	; (8008678 <_printf_float+0x2f0>)
 800860a:	2301      	movs	r3, #1
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	f43f af19 	beq.w	800844a <_printf_float+0xc2>
 8008618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800861c:	4313      	orrs	r3, r2
 800861e:	d102      	bne.n	8008626 <_printf_float+0x29e>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	07d9      	lsls	r1, r3, #31
 8008624:	d5d8      	bpl.n	80085d8 <_printf_float+0x250>
 8008626:	ee18 3a10 	vmov	r3, s16
 800862a:	4652      	mov	r2, sl
 800862c:	4631      	mov	r1, r6
 800862e:	4628      	mov	r0, r5
 8008630:	47b8      	blx	r7
 8008632:	3001      	adds	r0, #1
 8008634:	f43f af09 	beq.w	800844a <_printf_float+0xc2>
 8008638:	f04f 0900 	mov.w	r9, #0
 800863c:	f104 0a1a 	add.w	sl, r4, #26
 8008640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008642:	425b      	negs	r3, r3
 8008644:	454b      	cmp	r3, r9
 8008646:	dc01      	bgt.n	800864c <_printf_float+0x2c4>
 8008648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800864a:	e792      	b.n	8008572 <_printf_float+0x1ea>
 800864c:	2301      	movs	r3, #1
 800864e:	4652      	mov	r2, sl
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f aef7 	beq.w	800844a <_printf_float+0xc2>
 800865c:	f109 0901 	add.w	r9, r9, #1
 8008660:	e7ee      	b.n	8008640 <_printf_float+0x2b8>
 8008662:	bf00      	nop
 8008664:	7fefffff 	.word	0x7fefffff
 8008668:	0800ac6c 	.word	0x0800ac6c
 800866c:	0800ac70 	.word	0x0800ac70
 8008670:	0800ac78 	.word	0x0800ac78
 8008674:	0800ac74 	.word	0x0800ac74
 8008678:	0800ac7c 	.word	0x0800ac7c
 800867c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800867e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008680:	429a      	cmp	r2, r3
 8008682:	bfa8      	it	ge
 8008684:	461a      	movge	r2, r3
 8008686:	2a00      	cmp	r2, #0
 8008688:	4691      	mov	r9, r2
 800868a:	dc37      	bgt.n	80086fc <_printf_float+0x374>
 800868c:	f04f 0b00 	mov.w	fp, #0
 8008690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008694:	f104 021a 	add.w	r2, r4, #26
 8008698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800869a:	9305      	str	r3, [sp, #20]
 800869c:	eba3 0309 	sub.w	r3, r3, r9
 80086a0:	455b      	cmp	r3, fp
 80086a2:	dc33      	bgt.n	800870c <_printf_float+0x384>
 80086a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086a8:	429a      	cmp	r2, r3
 80086aa:	db3b      	blt.n	8008724 <_printf_float+0x39c>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	07da      	lsls	r2, r3, #31
 80086b0:	d438      	bmi.n	8008724 <_printf_float+0x39c>
 80086b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086b4:	9b05      	ldr	r3, [sp, #20]
 80086b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	eba2 0901 	sub.w	r9, r2, r1
 80086be:	4599      	cmp	r9, r3
 80086c0:	bfa8      	it	ge
 80086c2:	4699      	movge	r9, r3
 80086c4:	f1b9 0f00 	cmp.w	r9, #0
 80086c8:	dc35      	bgt.n	8008736 <_printf_float+0x3ae>
 80086ca:	f04f 0800 	mov.w	r8, #0
 80086ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086d2:	f104 0a1a 	add.w	sl, r4, #26
 80086d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	eba3 0309 	sub.w	r3, r3, r9
 80086e0:	4543      	cmp	r3, r8
 80086e2:	f77f af79 	ble.w	80085d8 <_printf_float+0x250>
 80086e6:	2301      	movs	r3, #1
 80086e8:	4652      	mov	r2, sl
 80086ea:	4631      	mov	r1, r6
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b8      	blx	r7
 80086f0:	3001      	adds	r0, #1
 80086f2:	f43f aeaa 	beq.w	800844a <_printf_float+0xc2>
 80086f6:	f108 0801 	add.w	r8, r8, #1
 80086fa:	e7ec      	b.n	80086d6 <_printf_float+0x34e>
 80086fc:	4613      	mov	r3, r2
 80086fe:	4631      	mov	r1, r6
 8008700:	4642      	mov	r2, r8
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	d1c0      	bne.n	800868c <_printf_float+0x304>
 800870a:	e69e      	b.n	800844a <_printf_float+0xc2>
 800870c:	2301      	movs	r3, #1
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	9205      	str	r2, [sp, #20]
 8008714:	47b8      	blx	r7
 8008716:	3001      	adds	r0, #1
 8008718:	f43f ae97 	beq.w	800844a <_printf_float+0xc2>
 800871c:	9a05      	ldr	r2, [sp, #20]
 800871e:	f10b 0b01 	add.w	fp, fp, #1
 8008722:	e7b9      	b.n	8008698 <_printf_float+0x310>
 8008724:	ee18 3a10 	vmov	r3, s16
 8008728:	4652      	mov	r2, sl
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	d1be      	bne.n	80086b2 <_printf_float+0x32a>
 8008734:	e689      	b.n	800844a <_printf_float+0xc2>
 8008736:	9a05      	ldr	r2, [sp, #20]
 8008738:	464b      	mov	r3, r9
 800873a:	4442      	add	r2, r8
 800873c:	4631      	mov	r1, r6
 800873e:	4628      	mov	r0, r5
 8008740:	47b8      	blx	r7
 8008742:	3001      	adds	r0, #1
 8008744:	d1c1      	bne.n	80086ca <_printf_float+0x342>
 8008746:	e680      	b.n	800844a <_printf_float+0xc2>
 8008748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800874a:	2a01      	cmp	r2, #1
 800874c:	dc01      	bgt.n	8008752 <_printf_float+0x3ca>
 800874e:	07db      	lsls	r3, r3, #31
 8008750:	d538      	bpl.n	80087c4 <_printf_float+0x43c>
 8008752:	2301      	movs	r3, #1
 8008754:	4642      	mov	r2, r8
 8008756:	4631      	mov	r1, r6
 8008758:	4628      	mov	r0, r5
 800875a:	47b8      	blx	r7
 800875c:	3001      	adds	r0, #1
 800875e:	f43f ae74 	beq.w	800844a <_printf_float+0xc2>
 8008762:	ee18 3a10 	vmov	r3, s16
 8008766:	4652      	mov	r2, sl
 8008768:	4631      	mov	r1, r6
 800876a:	4628      	mov	r0, r5
 800876c:	47b8      	blx	r7
 800876e:	3001      	adds	r0, #1
 8008770:	f43f ae6b 	beq.w	800844a <_printf_float+0xc2>
 8008774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008778:	2200      	movs	r2, #0
 800877a:	2300      	movs	r3, #0
 800877c:	f7f8 f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008780:	b9d8      	cbnz	r0, 80087ba <_printf_float+0x432>
 8008782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008784:	f108 0201 	add.w	r2, r8, #1
 8008788:	3b01      	subs	r3, #1
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	d10e      	bne.n	80087b2 <_printf_float+0x42a>
 8008794:	e659      	b.n	800844a <_printf_float+0xc2>
 8008796:	2301      	movs	r3, #1
 8008798:	4652      	mov	r2, sl
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f ae52 	beq.w	800844a <_printf_float+0xc2>
 80087a6:	f108 0801 	add.w	r8, r8, #1
 80087aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ac:	3b01      	subs	r3, #1
 80087ae:	4543      	cmp	r3, r8
 80087b0:	dcf1      	bgt.n	8008796 <_printf_float+0x40e>
 80087b2:	464b      	mov	r3, r9
 80087b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087b8:	e6dc      	b.n	8008574 <_printf_float+0x1ec>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	f104 0a1a 	add.w	sl, r4, #26
 80087c2:	e7f2      	b.n	80087aa <_printf_float+0x422>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4642      	mov	r2, r8
 80087c8:	e7df      	b.n	800878a <_printf_float+0x402>
 80087ca:	2301      	movs	r3, #1
 80087cc:	464a      	mov	r2, r9
 80087ce:	4631      	mov	r1, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	47b8      	blx	r7
 80087d4:	3001      	adds	r0, #1
 80087d6:	f43f ae38 	beq.w	800844a <_printf_float+0xc2>
 80087da:	f108 0801 	add.w	r8, r8, #1
 80087de:	68e3      	ldr	r3, [r4, #12]
 80087e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087e2:	1a5b      	subs	r3, r3, r1
 80087e4:	4543      	cmp	r3, r8
 80087e6:	dcf0      	bgt.n	80087ca <_printf_float+0x442>
 80087e8:	e6fa      	b.n	80085e0 <_printf_float+0x258>
 80087ea:	f04f 0800 	mov.w	r8, #0
 80087ee:	f104 0919 	add.w	r9, r4, #25
 80087f2:	e7f4      	b.n	80087de <_printf_float+0x456>

080087f4 <_printf_common>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	4616      	mov	r6, r2
 80087fa:	4699      	mov	r9, r3
 80087fc:	688a      	ldr	r2, [r1, #8]
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008804:	4293      	cmp	r3, r2
 8008806:	bfb8      	it	lt
 8008808:	4613      	movlt	r3, r2
 800880a:	6033      	str	r3, [r6, #0]
 800880c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008810:	4607      	mov	r7, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b10a      	cbz	r2, 800881a <_printf_common+0x26>
 8008816:	3301      	adds	r3, #1
 8008818:	6033      	str	r3, [r6, #0]
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	0699      	lsls	r1, r3, #26
 800881e:	bf42      	ittt	mi
 8008820:	6833      	ldrmi	r3, [r6, #0]
 8008822:	3302      	addmi	r3, #2
 8008824:	6033      	strmi	r3, [r6, #0]
 8008826:	6825      	ldr	r5, [r4, #0]
 8008828:	f015 0506 	ands.w	r5, r5, #6
 800882c:	d106      	bne.n	800883c <_printf_common+0x48>
 800882e:	f104 0a19 	add.w	sl, r4, #25
 8008832:	68e3      	ldr	r3, [r4, #12]
 8008834:	6832      	ldr	r2, [r6, #0]
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	42ab      	cmp	r3, r5
 800883a:	dc26      	bgt.n	800888a <_printf_common+0x96>
 800883c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008840:	1e13      	subs	r3, r2, #0
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	bf18      	it	ne
 8008846:	2301      	movne	r3, #1
 8008848:	0692      	lsls	r2, r2, #26
 800884a:	d42b      	bmi.n	80088a4 <_printf_common+0xb0>
 800884c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008850:	4649      	mov	r1, r9
 8008852:	4638      	mov	r0, r7
 8008854:	47c0      	blx	r8
 8008856:	3001      	adds	r0, #1
 8008858:	d01e      	beq.n	8008898 <_printf_common+0xa4>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	68e5      	ldr	r5, [r4, #12]
 800885e:	6832      	ldr	r2, [r6, #0]
 8008860:	f003 0306 	and.w	r3, r3, #6
 8008864:	2b04      	cmp	r3, #4
 8008866:	bf08      	it	eq
 8008868:	1aad      	subeq	r5, r5, r2
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	6922      	ldr	r2, [r4, #16]
 800886e:	bf0c      	ite	eq
 8008870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008874:	2500      	movne	r5, #0
 8008876:	4293      	cmp	r3, r2
 8008878:	bfc4      	itt	gt
 800887a:	1a9b      	subgt	r3, r3, r2
 800887c:	18ed      	addgt	r5, r5, r3
 800887e:	2600      	movs	r6, #0
 8008880:	341a      	adds	r4, #26
 8008882:	42b5      	cmp	r5, r6
 8008884:	d11a      	bne.n	80088bc <_printf_common+0xc8>
 8008886:	2000      	movs	r0, #0
 8008888:	e008      	b.n	800889c <_printf_common+0xa8>
 800888a:	2301      	movs	r3, #1
 800888c:	4652      	mov	r2, sl
 800888e:	4649      	mov	r1, r9
 8008890:	4638      	mov	r0, r7
 8008892:	47c0      	blx	r8
 8008894:	3001      	adds	r0, #1
 8008896:	d103      	bne.n	80088a0 <_printf_common+0xac>
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a0:	3501      	adds	r5, #1
 80088a2:	e7c6      	b.n	8008832 <_printf_common+0x3e>
 80088a4:	18e1      	adds	r1, r4, r3
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	2030      	movs	r0, #48	; 0x30
 80088aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ae:	4422      	add	r2, r4
 80088b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088b8:	3302      	adds	r3, #2
 80088ba:	e7c7      	b.n	800884c <_printf_common+0x58>
 80088bc:	2301      	movs	r3, #1
 80088be:	4622      	mov	r2, r4
 80088c0:	4649      	mov	r1, r9
 80088c2:	4638      	mov	r0, r7
 80088c4:	47c0      	blx	r8
 80088c6:	3001      	adds	r0, #1
 80088c8:	d0e6      	beq.n	8008898 <_printf_common+0xa4>
 80088ca:	3601      	adds	r6, #1
 80088cc:	e7d9      	b.n	8008882 <_printf_common+0x8e>
	...

080088d0 <_printf_i>:
 80088d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d4:	460c      	mov	r4, r1
 80088d6:	4691      	mov	r9, r2
 80088d8:	7e27      	ldrb	r7, [r4, #24]
 80088da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088dc:	2f78      	cmp	r7, #120	; 0x78
 80088de:	4680      	mov	r8, r0
 80088e0:	469a      	mov	sl, r3
 80088e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088e6:	d807      	bhi.n	80088f8 <_printf_i+0x28>
 80088e8:	2f62      	cmp	r7, #98	; 0x62
 80088ea:	d80a      	bhi.n	8008902 <_printf_i+0x32>
 80088ec:	2f00      	cmp	r7, #0
 80088ee:	f000 80d8 	beq.w	8008aa2 <_printf_i+0x1d2>
 80088f2:	2f58      	cmp	r7, #88	; 0x58
 80088f4:	f000 80a3 	beq.w	8008a3e <_printf_i+0x16e>
 80088f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008900:	e03a      	b.n	8008978 <_printf_i+0xa8>
 8008902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008906:	2b15      	cmp	r3, #21
 8008908:	d8f6      	bhi.n	80088f8 <_printf_i+0x28>
 800890a:	a001      	add	r0, pc, #4	; (adr r0, 8008910 <_printf_i+0x40>)
 800890c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008910:	08008969 	.word	0x08008969
 8008914:	0800897d 	.word	0x0800897d
 8008918:	080088f9 	.word	0x080088f9
 800891c:	080088f9 	.word	0x080088f9
 8008920:	080088f9 	.word	0x080088f9
 8008924:	080088f9 	.word	0x080088f9
 8008928:	0800897d 	.word	0x0800897d
 800892c:	080088f9 	.word	0x080088f9
 8008930:	080088f9 	.word	0x080088f9
 8008934:	080088f9 	.word	0x080088f9
 8008938:	080088f9 	.word	0x080088f9
 800893c:	08008a89 	.word	0x08008a89
 8008940:	080089ad 	.word	0x080089ad
 8008944:	08008a6b 	.word	0x08008a6b
 8008948:	080088f9 	.word	0x080088f9
 800894c:	080088f9 	.word	0x080088f9
 8008950:	08008aab 	.word	0x08008aab
 8008954:	080088f9 	.word	0x080088f9
 8008958:	080089ad 	.word	0x080089ad
 800895c:	080088f9 	.word	0x080088f9
 8008960:	080088f9 	.word	0x080088f9
 8008964:	08008a73 	.word	0x08008a73
 8008968:	680b      	ldr	r3, [r1, #0]
 800896a:	1d1a      	adds	r2, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	600a      	str	r2, [r1, #0]
 8008970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008978:	2301      	movs	r3, #1
 800897a:	e0a3      	b.n	8008ac4 <_printf_i+0x1f4>
 800897c:	6825      	ldr	r5, [r4, #0]
 800897e:	6808      	ldr	r0, [r1, #0]
 8008980:	062e      	lsls	r6, r5, #24
 8008982:	f100 0304 	add.w	r3, r0, #4
 8008986:	d50a      	bpl.n	800899e <_printf_i+0xce>
 8008988:	6805      	ldr	r5, [r0, #0]
 800898a:	600b      	str	r3, [r1, #0]
 800898c:	2d00      	cmp	r5, #0
 800898e:	da03      	bge.n	8008998 <_printf_i+0xc8>
 8008990:	232d      	movs	r3, #45	; 0x2d
 8008992:	426d      	negs	r5, r5
 8008994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008998:	485e      	ldr	r0, [pc, #376]	; (8008b14 <_printf_i+0x244>)
 800899a:	230a      	movs	r3, #10
 800899c:	e019      	b.n	80089d2 <_printf_i+0x102>
 800899e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089a2:	6805      	ldr	r5, [r0, #0]
 80089a4:	600b      	str	r3, [r1, #0]
 80089a6:	bf18      	it	ne
 80089a8:	b22d      	sxthne	r5, r5
 80089aa:	e7ef      	b.n	800898c <_printf_i+0xbc>
 80089ac:	680b      	ldr	r3, [r1, #0]
 80089ae:	6825      	ldr	r5, [r4, #0]
 80089b0:	1d18      	adds	r0, r3, #4
 80089b2:	6008      	str	r0, [r1, #0]
 80089b4:	0628      	lsls	r0, r5, #24
 80089b6:	d501      	bpl.n	80089bc <_printf_i+0xec>
 80089b8:	681d      	ldr	r5, [r3, #0]
 80089ba:	e002      	b.n	80089c2 <_printf_i+0xf2>
 80089bc:	0669      	lsls	r1, r5, #25
 80089be:	d5fb      	bpl.n	80089b8 <_printf_i+0xe8>
 80089c0:	881d      	ldrh	r5, [r3, #0]
 80089c2:	4854      	ldr	r0, [pc, #336]	; (8008b14 <_printf_i+0x244>)
 80089c4:	2f6f      	cmp	r7, #111	; 0x6f
 80089c6:	bf0c      	ite	eq
 80089c8:	2308      	moveq	r3, #8
 80089ca:	230a      	movne	r3, #10
 80089cc:	2100      	movs	r1, #0
 80089ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089d2:	6866      	ldr	r6, [r4, #4]
 80089d4:	60a6      	str	r6, [r4, #8]
 80089d6:	2e00      	cmp	r6, #0
 80089d8:	bfa2      	ittt	ge
 80089da:	6821      	ldrge	r1, [r4, #0]
 80089dc:	f021 0104 	bicge.w	r1, r1, #4
 80089e0:	6021      	strge	r1, [r4, #0]
 80089e2:	b90d      	cbnz	r5, 80089e8 <_printf_i+0x118>
 80089e4:	2e00      	cmp	r6, #0
 80089e6:	d04d      	beq.n	8008a84 <_printf_i+0x1b4>
 80089e8:	4616      	mov	r6, r2
 80089ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80089ee:	fb03 5711 	mls	r7, r3, r1, r5
 80089f2:	5dc7      	ldrb	r7, [r0, r7]
 80089f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089f8:	462f      	mov	r7, r5
 80089fa:	42bb      	cmp	r3, r7
 80089fc:	460d      	mov	r5, r1
 80089fe:	d9f4      	bls.n	80089ea <_printf_i+0x11a>
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d10b      	bne.n	8008a1c <_printf_i+0x14c>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07df      	lsls	r7, r3, #31
 8008a08:	d508      	bpl.n	8008a1c <_printf_i+0x14c>
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	6861      	ldr	r1, [r4, #4]
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	bfde      	ittt	le
 8008a12:	2330      	movle	r3, #48	; 0x30
 8008a14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a1c:	1b92      	subs	r2, r2, r6
 8008a1e:	6122      	str	r2, [r4, #16]
 8008a20:	f8cd a000 	str.w	sl, [sp]
 8008a24:	464b      	mov	r3, r9
 8008a26:	aa03      	add	r2, sp, #12
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f7ff fee2 	bl	80087f4 <_printf_common>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d14c      	bne.n	8008ace <_printf_i+0x1fe>
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	b004      	add	sp, #16
 8008a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3e:	4835      	ldr	r0, [pc, #212]	; (8008b14 <_printf_i+0x244>)
 8008a40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	680e      	ldr	r6, [r1, #0]
 8008a48:	061f      	lsls	r7, r3, #24
 8008a4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a4e:	600e      	str	r6, [r1, #0]
 8008a50:	d514      	bpl.n	8008a7c <_printf_i+0x1ac>
 8008a52:	07d9      	lsls	r1, r3, #31
 8008a54:	bf44      	itt	mi
 8008a56:	f043 0320 	orrmi.w	r3, r3, #32
 8008a5a:	6023      	strmi	r3, [r4, #0]
 8008a5c:	b91d      	cbnz	r5, 8008a66 <_printf_i+0x196>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	f023 0320 	bic.w	r3, r3, #32
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	2310      	movs	r3, #16
 8008a68:	e7b0      	b.n	80089cc <_printf_i+0xfc>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	f043 0320 	orr.w	r3, r3, #32
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	2378      	movs	r3, #120	; 0x78
 8008a74:	4828      	ldr	r0, [pc, #160]	; (8008b18 <_printf_i+0x248>)
 8008a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a7a:	e7e3      	b.n	8008a44 <_printf_i+0x174>
 8008a7c:	065e      	lsls	r6, r3, #25
 8008a7e:	bf48      	it	mi
 8008a80:	b2ad      	uxthmi	r5, r5
 8008a82:	e7e6      	b.n	8008a52 <_printf_i+0x182>
 8008a84:	4616      	mov	r6, r2
 8008a86:	e7bb      	b.n	8008a00 <_printf_i+0x130>
 8008a88:	680b      	ldr	r3, [r1, #0]
 8008a8a:	6826      	ldr	r6, [r4, #0]
 8008a8c:	6960      	ldr	r0, [r4, #20]
 8008a8e:	1d1d      	adds	r5, r3, #4
 8008a90:	600d      	str	r5, [r1, #0]
 8008a92:	0635      	lsls	r5, r6, #24
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	d501      	bpl.n	8008a9c <_printf_i+0x1cc>
 8008a98:	6018      	str	r0, [r3, #0]
 8008a9a:	e002      	b.n	8008aa2 <_printf_i+0x1d2>
 8008a9c:	0671      	lsls	r1, r6, #25
 8008a9e:	d5fb      	bpl.n	8008a98 <_printf_i+0x1c8>
 8008aa0:	8018      	strh	r0, [r3, #0]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	6123      	str	r3, [r4, #16]
 8008aa6:	4616      	mov	r6, r2
 8008aa8:	e7ba      	b.n	8008a20 <_printf_i+0x150>
 8008aaa:	680b      	ldr	r3, [r1, #0]
 8008aac:	1d1a      	adds	r2, r3, #4
 8008aae:	600a      	str	r2, [r1, #0]
 8008ab0:	681e      	ldr	r6, [r3, #0]
 8008ab2:	6862      	ldr	r2, [r4, #4]
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7f7 fb9a 	bl	80001f0 <memchr>
 8008abc:	b108      	cbz	r0, 8008ac2 <_printf_i+0x1f2>
 8008abe:	1b80      	subs	r0, r0, r6
 8008ac0:	6060      	str	r0, [r4, #4]
 8008ac2:	6863      	ldr	r3, [r4, #4]
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008acc:	e7a8      	b.n	8008a20 <_printf_i+0x150>
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	4632      	mov	r2, r6
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	47d0      	blx	sl
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d0ab      	beq.n	8008a34 <_printf_i+0x164>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	079b      	lsls	r3, r3, #30
 8008ae0:	d413      	bmi.n	8008b0a <_printf_i+0x23a>
 8008ae2:	68e0      	ldr	r0, [r4, #12]
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	4298      	cmp	r0, r3
 8008ae8:	bfb8      	it	lt
 8008aea:	4618      	movlt	r0, r3
 8008aec:	e7a4      	b.n	8008a38 <_printf_i+0x168>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4632      	mov	r2, r6
 8008af2:	4649      	mov	r1, r9
 8008af4:	4640      	mov	r0, r8
 8008af6:	47d0      	blx	sl
 8008af8:	3001      	adds	r0, #1
 8008afa:	d09b      	beq.n	8008a34 <_printf_i+0x164>
 8008afc:	3501      	adds	r5, #1
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	9903      	ldr	r1, [sp, #12]
 8008b02:	1a5b      	subs	r3, r3, r1
 8008b04:	42ab      	cmp	r3, r5
 8008b06:	dcf2      	bgt.n	8008aee <_printf_i+0x21e>
 8008b08:	e7eb      	b.n	8008ae2 <_printf_i+0x212>
 8008b0a:	2500      	movs	r5, #0
 8008b0c:	f104 0619 	add.w	r6, r4, #25
 8008b10:	e7f5      	b.n	8008afe <_printf_i+0x22e>
 8008b12:	bf00      	nop
 8008b14:	0800ac7e 	.word	0x0800ac7e
 8008b18:	0800ac8f 	.word	0x0800ac8f

08008b1c <quorem>:
 8008b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	6903      	ldr	r3, [r0, #16]
 8008b22:	690c      	ldr	r4, [r1, #16]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	4607      	mov	r7, r0
 8008b28:	f2c0 8081 	blt.w	8008c2e <quorem+0x112>
 8008b2c:	3c01      	subs	r4, #1
 8008b2e:	f101 0814 	add.w	r8, r1, #20
 8008b32:	f100 0514 	add.w	r5, r0, #20
 8008b36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b44:	3301      	adds	r3, #1
 8008b46:	429a      	cmp	r2, r3
 8008b48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b50:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b54:	d331      	bcc.n	8008bba <quorem+0x9e>
 8008b56:	f04f 0e00 	mov.w	lr, #0
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	46ac      	mov	ip, r5
 8008b5e:	46f2      	mov	sl, lr
 8008b60:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b64:	b293      	uxth	r3, r2
 8008b66:	fb06 e303 	mla	r3, r6, r3, lr
 8008b6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	ebaa 0303 	sub.w	r3, sl, r3
 8008b74:	0c12      	lsrs	r2, r2, #16
 8008b76:	f8dc a000 	ldr.w	sl, [ip]
 8008b7a:	fb06 e202 	mla	r2, r6, r2, lr
 8008b7e:	fa13 f38a 	uxtah	r3, r3, sl
 8008b82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b86:	fa1f fa82 	uxth.w	sl, r2
 8008b8a:	f8dc 2000 	ldr.w	r2, [ip]
 8008b8e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008b92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b9c:	4581      	cmp	r9, r0
 8008b9e:	f84c 3b04 	str.w	r3, [ip], #4
 8008ba2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ba6:	d2db      	bcs.n	8008b60 <quorem+0x44>
 8008ba8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bac:	b92b      	cbnz	r3, 8008bba <quorem+0x9e>
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	d32e      	bcc.n	8008c16 <quorem+0xfa>
 8008bb8:	613c      	str	r4, [r7, #16]
 8008bba:	4638      	mov	r0, r7
 8008bbc:	f001 f8c0 	bl	8009d40 <__mcmp>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	db24      	blt.n	8008c0e <quorem+0xf2>
 8008bc4:	3601      	adds	r6, #1
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f04f 0c00 	mov.w	ip, #0
 8008bcc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bd0:	f8d0 e000 	ldr.w	lr, [r0]
 8008bd4:	b293      	uxth	r3, r2
 8008bd6:	ebac 0303 	sub.w	r3, ip, r3
 8008bda:	0c12      	lsrs	r2, r2, #16
 8008bdc:	fa13 f38e 	uxtah	r3, r3, lr
 8008be0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008be4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bee:	45c1      	cmp	r9, r8
 8008bf0:	f840 3b04 	str.w	r3, [r0], #4
 8008bf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bf8:	d2e8      	bcs.n	8008bcc <quorem+0xb0>
 8008bfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c02:	b922      	cbnz	r2, 8008c0e <quorem+0xf2>
 8008c04:	3b04      	subs	r3, #4
 8008c06:	429d      	cmp	r5, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	d30a      	bcc.n	8008c22 <quorem+0x106>
 8008c0c:	613c      	str	r4, [r7, #16]
 8008c0e:	4630      	mov	r0, r6
 8008c10:	b003      	add	sp, #12
 8008c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c16:	6812      	ldr	r2, [r2, #0]
 8008c18:	3b04      	subs	r3, #4
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	d1cc      	bne.n	8008bb8 <quorem+0x9c>
 8008c1e:	3c01      	subs	r4, #1
 8008c20:	e7c7      	b.n	8008bb2 <quorem+0x96>
 8008c22:	6812      	ldr	r2, [r2, #0]
 8008c24:	3b04      	subs	r3, #4
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	d1f0      	bne.n	8008c0c <quorem+0xf0>
 8008c2a:	3c01      	subs	r4, #1
 8008c2c:	e7eb      	b.n	8008c06 <quorem+0xea>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	e7ee      	b.n	8008c10 <quorem+0xf4>
 8008c32:	0000      	movs	r0, r0
 8008c34:	0000      	movs	r0, r0
	...

08008c38 <_dtoa_r>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	ed2d 8b02 	vpush	{d8}
 8008c40:	ec57 6b10 	vmov	r6, r7, d0
 8008c44:	b095      	sub	sp, #84	; 0x54
 8008c46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c4c:	9105      	str	r1, [sp, #20]
 8008c4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008c52:	4604      	mov	r4, r0
 8008c54:	9209      	str	r2, [sp, #36]	; 0x24
 8008c56:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c58:	b975      	cbnz	r5, 8008c78 <_dtoa_r+0x40>
 8008c5a:	2010      	movs	r0, #16
 8008c5c:	f000 fddc 	bl	8009818 <malloc>
 8008c60:	4602      	mov	r2, r0
 8008c62:	6260      	str	r0, [r4, #36]	; 0x24
 8008c64:	b920      	cbnz	r0, 8008c70 <_dtoa_r+0x38>
 8008c66:	4bb2      	ldr	r3, [pc, #712]	; (8008f30 <_dtoa_r+0x2f8>)
 8008c68:	21ea      	movs	r1, #234	; 0xea
 8008c6a:	48b2      	ldr	r0, [pc, #712]	; (8008f34 <_dtoa_r+0x2fc>)
 8008c6c:	f001 fa32 	bl	800a0d4 <__assert_func>
 8008c70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c74:	6005      	str	r5, [r0, #0]
 8008c76:	60c5      	str	r5, [r0, #12]
 8008c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c7a:	6819      	ldr	r1, [r3, #0]
 8008c7c:	b151      	cbz	r1, 8008c94 <_dtoa_r+0x5c>
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	604a      	str	r2, [r1, #4]
 8008c82:	2301      	movs	r3, #1
 8008c84:	4093      	lsls	r3, r2
 8008c86:	608b      	str	r3, [r1, #8]
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fe1b 	bl	80098c4 <_Bfree>
 8008c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	1e3b      	subs	r3, r7, #0
 8008c96:	bfb9      	ittee	lt
 8008c98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c9c:	9303      	strlt	r3, [sp, #12]
 8008c9e:	2300      	movge	r3, #0
 8008ca0:	f8c8 3000 	strge.w	r3, [r8]
 8008ca4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ca8:	4ba3      	ldr	r3, [pc, #652]	; (8008f38 <_dtoa_r+0x300>)
 8008caa:	bfbc      	itt	lt
 8008cac:	2201      	movlt	r2, #1
 8008cae:	f8c8 2000 	strlt.w	r2, [r8]
 8008cb2:	ea33 0309 	bics.w	r3, r3, r9
 8008cb6:	d11b      	bne.n	8008cf0 <_dtoa_r+0xb8>
 8008cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cba:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cc4:	4333      	orrs	r3, r6
 8008cc6:	f000 857a 	beq.w	80097be <_dtoa_r+0xb86>
 8008cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ccc:	b963      	cbnz	r3, 8008ce8 <_dtoa_r+0xb0>
 8008cce:	4b9b      	ldr	r3, [pc, #620]	; (8008f3c <_dtoa_r+0x304>)
 8008cd0:	e024      	b.n	8008d1c <_dtoa_r+0xe4>
 8008cd2:	4b9b      	ldr	r3, [pc, #620]	; (8008f40 <_dtoa_r+0x308>)
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	9800      	ldr	r0, [sp, #0]
 8008cde:	b015      	add	sp, #84	; 0x54
 8008ce0:	ecbd 8b02 	vpop	{d8}
 8008ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce8:	4b94      	ldr	r3, [pc, #592]	; (8008f3c <_dtoa_r+0x304>)
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	3303      	adds	r3, #3
 8008cee:	e7f3      	b.n	8008cd8 <_dtoa_r+0xa0>
 8008cf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	ec51 0b17 	vmov	r0, r1, d7
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008d00:	f7f7 feea 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d04:	4680      	mov	r8, r0
 8008d06:	b158      	cbz	r0, 8008d20 <_dtoa_r+0xe8>
 8008d08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 8551 	beq.w	80097b8 <_dtoa_r+0xb80>
 8008d16:	488b      	ldr	r0, [pc, #556]	; (8008f44 <_dtoa_r+0x30c>)
 8008d18:	6018      	str	r0, [r3, #0]
 8008d1a:	1e43      	subs	r3, r0, #1
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	e7dd      	b.n	8008cdc <_dtoa_r+0xa4>
 8008d20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d24:	aa12      	add	r2, sp, #72	; 0x48
 8008d26:	a913      	add	r1, sp, #76	; 0x4c
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f001 f8ad 	bl	8009e88 <__d2b>
 8008d2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d32:	4683      	mov	fp, r0
 8008d34:	2d00      	cmp	r5, #0
 8008d36:	d07c      	beq.n	8008e32 <_dtoa_r+0x1fa>
 8008d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008d46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d52:	4b7d      	ldr	r3, [pc, #500]	; (8008f48 <_dtoa_r+0x310>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	4630      	mov	r0, r6
 8008d58:	4639      	mov	r1, r7
 8008d5a:	f7f7 fa9d 	bl	8000298 <__aeabi_dsub>
 8008d5e:	a36e      	add	r3, pc, #440	; (adr r3, 8008f18 <_dtoa_r+0x2e0>)
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	f7f7 fc50 	bl	8000608 <__aeabi_dmul>
 8008d68:	a36d      	add	r3, pc, #436	; (adr r3, 8008f20 <_dtoa_r+0x2e8>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	f7f7 fa95 	bl	800029c <__adddf3>
 8008d72:	4606      	mov	r6, r0
 8008d74:	4628      	mov	r0, r5
 8008d76:	460f      	mov	r7, r1
 8008d78:	f7f7 fbdc 	bl	8000534 <__aeabi_i2d>
 8008d7c:	a36a      	add	r3, pc, #424	; (adr r3, 8008f28 <_dtoa_r+0x2f0>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fc41 	bl	8000608 <__aeabi_dmul>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fa85 	bl	800029c <__adddf3>
 8008d92:	4606      	mov	r6, r0
 8008d94:	460f      	mov	r7, r1
 8008d96:	f7f7 fee7 	bl	8000b68 <__aeabi_d2iz>
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4682      	mov	sl, r0
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 fea2 	bl	8000aec <__aeabi_dcmplt>
 8008da8:	b148      	cbz	r0, 8008dbe <_dtoa_r+0x186>
 8008daa:	4650      	mov	r0, sl
 8008dac:	f7f7 fbc2 	bl	8000534 <__aeabi_i2d>
 8008db0:	4632      	mov	r2, r6
 8008db2:	463b      	mov	r3, r7
 8008db4:	f7f7 fe90 	bl	8000ad8 <__aeabi_dcmpeq>
 8008db8:	b908      	cbnz	r0, 8008dbe <_dtoa_r+0x186>
 8008dba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dbe:	f1ba 0f16 	cmp.w	sl, #22
 8008dc2:	d854      	bhi.n	8008e6e <_dtoa_r+0x236>
 8008dc4:	4b61      	ldr	r3, [pc, #388]	; (8008f4c <_dtoa_r+0x314>)
 8008dc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dd2:	f7f7 fe8b 	bl	8000aec <__aeabi_dcmplt>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d04b      	beq.n	8008e72 <_dtoa_r+0x23a>
 8008dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dde:	2300      	movs	r3, #0
 8008de0:	930e      	str	r3, [sp, #56]	; 0x38
 8008de2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008de4:	1b5d      	subs	r5, r3, r5
 8008de6:	1e6b      	subs	r3, r5, #1
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	bf43      	ittte	mi
 8008dec:	2300      	movmi	r3, #0
 8008dee:	f1c5 0801 	rsbmi	r8, r5, #1
 8008df2:	9304      	strmi	r3, [sp, #16]
 8008df4:	f04f 0800 	movpl.w	r8, #0
 8008df8:	f1ba 0f00 	cmp.w	sl, #0
 8008dfc:	db3b      	blt.n	8008e76 <_dtoa_r+0x23e>
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008e04:	4453      	add	r3, sl
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	9306      	str	r3, [sp, #24]
 8008e0c:	9b05      	ldr	r3, [sp, #20]
 8008e0e:	2b09      	cmp	r3, #9
 8008e10:	d869      	bhi.n	8008ee6 <_dtoa_r+0x2ae>
 8008e12:	2b05      	cmp	r3, #5
 8008e14:	bfc4      	itt	gt
 8008e16:	3b04      	subgt	r3, #4
 8008e18:	9305      	strgt	r3, [sp, #20]
 8008e1a:	9b05      	ldr	r3, [sp, #20]
 8008e1c:	f1a3 0302 	sub.w	r3, r3, #2
 8008e20:	bfcc      	ite	gt
 8008e22:	2500      	movgt	r5, #0
 8008e24:	2501      	movle	r5, #1
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d869      	bhi.n	8008efe <_dtoa_r+0x2c6>
 8008e2a:	e8df f003 	tbb	[pc, r3]
 8008e2e:	4e2c      	.short	0x4e2c
 8008e30:	5a4c      	.short	0x5a4c
 8008e32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008e36:	441d      	add	r5, r3
 8008e38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	bfc1      	itttt	gt
 8008e40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e48:	fa09 f303 	lslgt.w	r3, r9, r3
 8008e4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e50:	bfda      	itte	le
 8008e52:	f1c3 0320 	rsble	r3, r3, #32
 8008e56:	fa06 f003 	lslle.w	r0, r6, r3
 8008e5a:	4318      	orrgt	r0, r3
 8008e5c:	f7f7 fb5a 	bl	8000514 <__aeabi_ui2d>
 8008e60:	2301      	movs	r3, #1
 8008e62:	4606      	mov	r6, r0
 8008e64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e68:	3d01      	subs	r5, #1
 8008e6a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e6c:	e771      	b.n	8008d52 <_dtoa_r+0x11a>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e7b6      	b.n	8008de0 <_dtoa_r+0x1a8>
 8008e72:	900e      	str	r0, [sp, #56]	; 0x38
 8008e74:	e7b5      	b.n	8008de2 <_dtoa_r+0x1aa>
 8008e76:	f1ca 0300 	rsb	r3, sl, #0
 8008e7a:	9306      	str	r3, [sp, #24]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	eba8 080a 	sub.w	r8, r8, sl
 8008e82:	930d      	str	r3, [sp, #52]	; 0x34
 8008e84:	e7c2      	b.n	8008e0c <_dtoa_r+0x1d4>
 8008e86:	2300      	movs	r3, #0
 8008e88:	9308      	str	r3, [sp, #32]
 8008e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	dc39      	bgt.n	8008f04 <_dtoa_r+0x2cc>
 8008e90:	f04f 0901 	mov.w	r9, #1
 8008e94:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e98:	464b      	mov	r3, r9
 8008e9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008e9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	6042      	str	r2, [r0, #4]
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	f102 0614 	add.w	r6, r2, #20
 8008eaa:	429e      	cmp	r6, r3
 8008eac:	6841      	ldr	r1, [r0, #4]
 8008eae:	d92f      	bls.n	8008f10 <_dtoa_r+0x2d8>
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 fcc7 	bl	8009844 <_Balloc>
 8008eb6:	9000      	str	r0, [sp, #0]
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d14b      	bne.n	8008f54 <_dtoa_r+0x31c>
 8008ebc:	4b24      	ldr	r3, [pc, #144]	; (8008f50 <_dtoa_r+0x318>)
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ec4:	e6d1      	b.n	8008c6a <_dtoa_r+0x32>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e7de      	b.n	8008e88 <_dtoa_r+0x250>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9308      	str	r3, [sp, #32]
 8008ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed0:	eb0a 0903 	add.w	r9, sl, r3
 8008ed4:	f109 0301 	add.w	r3, r9, #1
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	bfb8      	it	lt
 8008ede:	2301      	movlt	r3, #1
 8008ee0:	e7dd      	b.n	8008e9e <_dtoa_r+0x266>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e7f2      	b.n	8008ecc <_dtoa_r+0x294>
 8008ee6:	2501      	movs	r5, #1
 8008ee8:	2300      	movs	r3, #0
 8008eea:	9305      	str	r3, [sp, #20]
 8008eec:	9508      	str	r5, [sp, #32]
 8008eee:	f04f 39ff 	mov.w	r9, #4294967295
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ef8:	2312      	movs	r3, #18
 8008efa:	9209      	str	r2, [sp, #36]	; 0x24
 8008efc:	e7cf      	b.n	8008e9e <_dtoa_r+0x266>
 8008efe:	2301      	movs	r3, #1
 8008f00:	9308      	str	r3, [sp, #32]
 8008f02:	e7f4      	b.n	8008eee <_dtoa_r+0x2b6>
 8008f04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f08:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f0c:	464b      	mov	r3, r9
 8008f0e:	e7c6      	b.n	8008e9e <_dtoa_r+0x266>
 8008f10:	3101      	adds	r1, #1
 8008f12:	6041      	str	r1, [r0, #4]
 8008f14:	0052      	lsls	r2, r2, #1
 8008f16:	e7c6      	b.n	8008ea6 <_dtoa_r+0x26e>
 8008f18:	636f4361 	.word	0x636f4361
 8008f1c:	3fd287a7 	.word	0x3fd287a7
 8008f20:	8b60c8b3 	.word	0x8b60c8b3
 8008f24:	3fc68a28 	.word	0x3fc68a28
 8008f28:	509f79fb 	.word	0x509f79fb
 8008f2c:	3fd34413 	.word	0x3fd34413
 8008f30:	0800acad 	.word	0x0800acad
 8008f34:	0800acc4 	.word	0x0800acc4
 8008f38:	7ff00000 	.word	0x7ff00000
 8008f3c:	0800aca9 	.word	0x0800aca9
 8008f40:	0800aca0 	.word	0x0800aca0
 8008f44:	0800ac7d 	.word	0x0800ac7d
 8008f48:	3ff80000 	.word	0x3ff80000
 8008f4c:	0800adc0 	.word	0x0800adc0
 8008f50:	0800ad23 	.word	0x0800ad23
 8008f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f56:	9a00      	ldr	r2, [sp, #0]
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	9b01      	ldr	r3, [sp, #4]
 8008f5c:	2b0e      	cmp	r3, #14
 8008f5e:	f200 80ad 	bhi.w	80090bc <_dtoa_r+0x484>
 8008f62:	2d00      	cmp	r5, #0
 8008f64:	f000 80aa 	beq.w	80090bc <_dtoa_r+0x484>
 8008f68:	f1ba 0f00 	cmp.w	sl, #0
 8008f6c:	dd36      	ble.n	8008fdc <_dtoa_r+0x3a4>
 8008f6e:	4ac3      	ldr	r2, [pc, #780]	; (800927c <_dtoa_r+0x644>)
 8008f70:	f00a 030f 	and.w	r3, sl, #15
 8008f74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f78:	ed93 7b00 	vldr	d7, [r3]
 8008f7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008f80:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008f84:	eeb0 8a47 	vmov.f32	s16, s14
 8008f88:	eef0 8a67 	vmov.f32	s17, s15
 8008f8c:	d016      	beq.n	8008fbc <_dtoa_r+0x384>
 8008f8e:	4bbc      	ldr	r3, [pc, #752]	; (8009280 <_dtoa_r+0x648>)
 8008f90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f98:	f7f7 fc60 	bl	800085c <__aeabi_ddiv>
 8008f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa0:	f007 070f 	and.w	r7, r7, #15
 8008fa4:	2503      	movs	r5, #3
 8008fa6:	4eb6      	ldr	r6, [pc, #728]	; (8009280 <_dtoa_r+0x648>)
 8008fa8:	b957      	cbnz	r7, 8008fc0 <_dtoa_r+0x388>
 8008faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fae:	ec53 2b18 	vmov	r2, r3, d8
 8008fb2:	f7f7 fc53 	bl	800085c <__aeabi_ddiv>
 8008fb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fba:	e029      	b.n	8009010 <_dtoa_r+0x3d8>
 8008fbc:	2502      	movs	r5, #2
 8008fbe:	e7f2      	b.n	8008fa6 <_dtoa_r+0x36e>
 8008fc0:	07f9      	lsls	r1, r7, #31
 8008fc2:	d508      	bpl.n	8008fd6 <_dtoa_r+0x39e>
 8008fc4:	ec51 0b18 	vmov	r0, r1, d8
 8008fc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fcc:	f7f7 fb1c 	bl	8000608 <__aeabi_dmul>
 8008fd0:	ec41 0b18 	vmov	d8, r0, r1
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	107f      	asrs	r7, r7, #1
 8008fd8:	3608      	adds	r6, #8
 8008fda:	e7e5      	b.n	8008fa8 <_dtoa_r+0x370>
 8008fdc:	f000 80a6 	beq.w	800912c <_dtoa_r+0x4f4>
 8008fe0:	f1ca 0600 	rsb	r6, sl, #0
 8008fe4:	4ba5      	ldr	r3, [pc, #660]	; (800927c <_dtoa_r+0x644>)
 8008fe6:	4fa6      	ldr	r7, [pc, #664]	; (8009280 <_dtoa_r+0x648>)
 8008fe8:	f006 020f 	and.w	r2, r6, #15
 8008fec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ff8:	f7f7 fb06 	bl	8000608 <__aeabi_dmul>
 8008ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009000:	1136      	asrs	r6, r6, #4
 8009002:	2300      	movs	r3, #0
 8009004:	2502      	movs	r5, #2
 8009006:	2e00      	cmp	r6, #0
 8009008:	f040 8085 	bne.w	8009116 <_dtoa_r+0x4de>
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1d2      	bne.n	8008fb6 <_dtoa_r+0x37e>
 8009010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 808c 	beq.w	8009130 <_dtoa_r+0x4f8>
 8009018:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800901c:	4b99      	ldr	r3, [pc, #612]	; (8009284 <_dtoa_r+0x64c>)
 800901e:	2200      	movs	r2, #0
 8009020:	4630      	mov	r0, r6
 8009022:	4639      	mov	r1, r7
 8009024:	f7f7 fd62 	bl	8000aec <__aeabi_dcmplt>
 8009028:	2800      	cmp	r0, #0
 800902a:	f000 8081 	beq.w	8009130 <_dtoa_r+0x4f8>
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d07d      	beq.n	8009130 <_dtoa_r+0x4f8>
 8009034:	f1b9 0f00 	cmp.w	r9, #0
 8009038:	dd3c      	ble.n	80090b4 <_dtoa_r+0x47c>
 800903a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	2200      	movs	r2, #0
 8009042:	4b91      	ldr	r3, [pc, #580]	; (8009288 <_dtoa_r+0x650>)
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 fade 	bl	8000608 <__aeabi_dmul>
 800904c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009050:	3501      	adds	r5, #1
 8009052:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009056:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800905a:	4628      	mov	r0, r5
 800905c:	f7f7 fa6a 	bl	8000534 <__aeabi_i2d>
 8009060:	4632      	mov	r2, r6
 8009062:	463b      	mov	r3, r7
 8009064:	f7f7 fad0 	bl	8000608 <__aeabi_dmul>
 8009068:	4b88      	ldr	r3, [pc, #544]	; (800928c <_dtoa_r+0x654>)
 800906a:	2200      	movs	r2, #0
 800906c:	f7f7 f916 	bl	800029c <__adddf3>
 8009070:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d15c      	bne.n	800913a <_dtoa_r+0x502>
 8009080:	4b83      	ldr	r3, [pc, #524]	; (8009290 <_dtoa_r+0x658>)
 8009082:	2200      	movs	r2, #0
 8009084:	4630      	mov	r0, r6
 8009086:	4639      	mov	r1, r7
 8009088:	f7f7 f906 	bl	8000298 <__aeabi_dsub>
 800908c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009090:	4606      	mov	r6, r0
 8009092:	460f      	mov	r7, r1
 8009094:	f7f7 fd48 	bl	8000b28 <__aeabi_dcmpgt>
 8009098:	2800      	cmp	r0, #0
 800909a:	f040 8296 	bne.w	80095ca <_dtoa_r+0x992>
 800909e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80090a2:	4630      	mov	r0, r6
 80090a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a8:	4639      	mov	r1, r7
 80090aa:	f7f7 fd1f 	bl	8000aec <__aeabi_dcmplt>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f040 8288 	bne.w	80095c4 <_dtoa_r+0x98c>
 80090b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f2c0 8158 	blt.w	8009374 <_dtoa_r+0x73c>
 80090c4:	f1ba 0f0e 	cmp.w	sl, #14
 80090c8:	f300 8154 	bgt.w	8009374 <_dtoa_r+0x73c>
 80090cc:	4b6b      	ldr	r3, [pc, #428]	; (800927c <_dtoa_r+0x644>)
 80090ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f280 80e3 	bge.w	80092a4 <_dtoa_r+0x66c>
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f300 80df 	bgt.w	80092a4 <_dtoa_r+0x66c>
 80090e6:	f040 826d 	bne.w	80095c4 <_dtoa_r+0x98c>
 80090ea:	4b69      	ldr	r3, [pc, #420]	; (8009290 <_dtoa_r+0x658>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 fa89 	bl	8000608 <__aeabi_dmul>
 80090f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090fa:	f7f7 fd0b 	bl	8000b14 <__aeabi_dcmpge>
 80090fe:	9e01      	ldr	r6, [sp, #4]
 8009100:	4637      	mov	r7, r6
 8009102:	2800      	cmp	r0, #0
 8009104:	f040 8243 	bne.w	800958e <_dtoa_r+0x956>
 8009108:	9d00      	ldr	r5, [sp, #0]
 800910a:	2331      	movs	r3, #49	; 0x31
 800910c:	f805 3b01 	strb.w	r3, [r5], #1
 8009110:	f10a 0a01 	add.w	sl, sl, #1
 8009114:	e23f      	b.n	8009596 <_dtoa_r+0x95e>
 8009116:	07f2      	lsls	r2, r6, #31
 8009118:	d505      	bpl.n	8009126 <_dtoa_r+0x4ee>
 800911a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800911e:	f7f7 fa73 	bl	8000608 <__aeabi_dmul>
 8009122:	3501      	adds	r5, #1
 8009124:	2301      	movs	r3, #1
 8009126:	1076      	asrs	r6, r6, #1
 8009128:	3708      	adds	r7, #8
 800912a:	e76c      	b.n	8009006 <_dtoa_r+0x3ce>
 800912c:	2502      	movs	r5, #2
 800912e:	e76f      	b.n	8009010 <_dtoa_r+0x3d8>
 8009130:	9b01      	ldr	r3, [sp, #4]
 8009132:	f8cd a01c 	str.w	sl, [sp, #28]
 8009136:	930c      	str	r3, [sp, #48]	; 0x30
 8009138:	e78d      	b.n	8009056 <_dtoa_r+0x41e>
 800913a:	9900      	ldr	r1, [sp, #0]
 800913c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800913e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009140:	4b4e      	ldr	r3, [pc, #312]	; (800927c <_dtoa_r+0x644>)
 8009142:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009146:	4401      	add	r1, r0
 8009148:	9102      	str	r1, [sp, #8]
 800914a:	9908      	ldr	r1, [sp, #32]
 800914c:	eeb0 8a47 	vmov.f32	s16, s14
 8009150:	eef0 8a67 	vmov.f32	s17, s15
 8009154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009158:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800915c:	2900      	cmp	r1, #0
 800915e:	d045      	beq.n	80091ec <_dtoa_r+0x5b4>
 8009160:	494c      	ldr	r1, [pc, #304]	; (8009294 <_dtoa_r+0x65c>)
 8009162:	2000      	movs	r0, #0
 8009164:	f7f7 fb7a 	bl	800085c <__aeabi_ddiv>
 8009168:	ec53 2b18 	vmov	r2, r3, d8
 800916c:	f7f7 f894 	bl	8000298 <__aeabi_dsub>
 8009170:	9d00      	ldr	r5, [sp, #0]
 8009172:	ec41 0b18 	vmov	d8, r0, r1
 8009176:	4639      	mov	r1, r7
 8009178:	4630      	mov	r0, r6
 800917a:	f7f7 fcf5 	bl	8000b68 <__aeabi_d2iz>
 800917e:	900c      	str	r0, [sp, #48]	; 0x30
 8009180:	f7f7 f9d8 	bl	8000534 <__aeabi_i2d>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f7f7 f884 	bl	8000298 <__aeabi_dsub>
 8009190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009192:	3330      	adds	r3, #48	; 0x30
 8009194:	f805 3b01 	strb.w	r3, [r5], #1
 8009198:	ec53 2b18 	vmov	r2, r3, d8
 800919c:	4606      	mov	r6, r0
 800919e:	460f      	mov	r7, r1
 80091a0:	f7f7 fca4 	bl	8000aec <__aeabi_dcmplt>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d165      	bne.n	8009274 <_dtoa_r+0x63c>
 80091a8:	4632      	mov	r2, r6
 80091aa:	463b      	mov	r3, r7
 80091ac:	4935      	ldr	r1, [pc, #212]	; (8009284 <_dtoa_r+0x64c>)
 80091ae:	2000      	movs	r0, #0
 80091b0:	f7f7 f872 	bl	8000298 <__aeabi_dsub>
 80091b4:	ec53 2b18 	vmov	r2, r3, d8
 80091b8:	f7f7 fc98 	bl	8000aec <__aeabi_dcmplt>
 80091bc:	2800      	cmp	r0, #0
 80091be:	f040 80b9 	bne.w	8009334 <_dtoa_r+0x6fc>
 80091c2:	9b02      	ldr	r3, [sp, #8]
 80091c4:	429d      	cmp	r5, r3
 80091c6:	f43f af75 	beq.w	80090b4 <_dtoa_r+0x47c>
 80091ca:	4b2f      	ldr	r3, [pc, #188]	; (8009288 <_dtoa_r+0x650>)
 80091cc:	ec51 0b18 	vmov	r0, r1, d8
 80091d0:	2200      	movs	r2, #0
 80091d2:	f7f7 fa19 	bl	8000608 <__aeabi_dmul>
 80091d6:	4b2c      	ldr	r3, [pc, #176]	; (8009288 <_dtoa_r+0x650>)
 80091d8:	ec41 0b18 	vmov	d8, r0, r1
 80091dc:	2200      	movs	r2, #0
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	f7f7 fa11 	bl	8000608 <__aeabi_dmul>
 80091e6:	4606      	mov	r6, r0
 80091e8:	460f      	mov	r7, r1
 80091ea:	e7c4      	b.n	8009176 <_dtoa_r+0x53e>
 80091ec:	ec51 0b17 	vmov	r0, r1, d7
 80091f0:	f7f7 fa0a 	bl	8000608 <__aeabi_dmul>
 80091f4:	9b02      	ldr	r3, [sp, #8]
 80091f6:	9d00      	ldr	r5, [sp, #0]
 80091f8:	930c      	str	r3, [sp, #48]	; 0x30
 80091fa:	ec41 0b18 	vmov	d8, r0, r1
 80091fe:	4639      	mov	r1, r7
 8009200:	4630      	mov	r0, r6
 8009202:	f7f7 fcb1 	bl	8000b68 <__aeabi_d2iz>
 8009206:	9011      	str	r0, [sp, #68]	; 0x44
 8009208:	f7f7 f994 	bl	8000534 <__aeabi_i2d>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4630      	mov	r0, r6
 8009212:	4639      	mov	r1, r7
 8009214:	f7f7 f840 	bl	8000298 <__aeabi_dsub>
 8009218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800921a:	3330      	adds	r3, #48	; 0x30
 800921c:	f805 3b01 	strb.w	r3, [r5], #1
 8009220:	9b02      	ldr	r3, [sp, #8]
 8009222:	429d      	cmp	r5, r3
 8009224:	4606      	mov	r6, r0
 8009226:	460f      	mov	r7, r1
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	d134      	bne.n	8009298 <_dtoa_r+0x660>
 800922e:	4b19      	ldr	r3, [pc, #100]	; (8009294 <_dtoa_r+0x65c>)
 8009230:	ec51 0b18 	vmov	r0, r1, d8
 8009234:	f7f7 f832 	bl	800029c <__adddf3>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4630      	mov	r0, r6
 800923e:	4639      	mov	r1, r7
 8009240:	f7f7 fc72 	bl	8000b28 <__aeabi_dcmpgt>
 8009244:	2800      	cmp	r0, #0
 8009246:	d175      	bne.n	8009334 <_dtoa_r+0x6fc>
 8009248:	ec53 2b18 	vmov	r2, r3, d8
 800924c:	4911      	ldr	r1, [pc, #68]	; (8009294 <_dtoa_r+0x65c>)
 800924e:	2000      	movs	r0, #0
 8009250:	f7f7 f822 	bl	8000298 <__aeabi_dsub>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4630      	mov	r0, r6
 800925a:	4639      	mov	r1, r7
 800925c:	f7f7 fc46 	bl	8000aec <__aeabi_dcmplt>
 8009260:	2800      	cmp	r0, #0
 8009262:	f43f af27 	beq.w	80090b4 <_dtoa_r+0x47c>
 8009266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009268:	1e6b      	subs	r3, r5, #1
 800926a:	930c      	str	r3, [sp, #48]	; 0x30
 800926c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009270:	2b30      	cmp	r3, #48	; 0x30
 8009272:	d0f8      	beq.n	8009266 <_dtoa_r+0x62e>
 8009274:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009278:	e04a      	b.n	8009310 <_dtoa_r+0x6d8>
 800927a:	bf00      	nop
 800927c:	0800adc0 	.word	0x0800adc0
 8009280:	0800ad98 	.word	0x0800ad98
 8009284:	3ff00000 	.word	0x3ff00000
 8009288:	40240000 	.word	0x40240000
 800928c:	401c0000 	.word	0x401c0000
 8009290:	40140000 	.word	0x40140000
 8009294:	3fe00000 	.word	0x3fe00000
 8009298:	4baf      	ldr	r3, [pc, #700]	; (8009558 <_dtoa_r+0x920>)
 800929a:	f7f7 f9b5 	bl	8000608 <__aeabi_dmul>
 800929e:	4606      	mov	r6, r0
 80092a0:	460f      	mov	r7, r1
 80092a2:	e7ac      	b.n	80091fe <_dtoa_r+0x5c6>
 80092a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092a8:	9d00      	ldr	r5, [sp, #0]
 80092aa:	4642      	mov	r2, r8
 80092ac:	464b      	mov	r3, r9
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	f7f7 fad3 	bl	800085c <__aeabi_ddiv>
 80092b6:	f7f7 fc57 	bl	8000b68 <__aeabi_d2iz>
 80092ba:	9002      	str	r0, [sp, #8]
 80092bc:	f7f7 f93a 	bl	8000534 <__aeabi_i2d>
 80092c0:	4642      	mov	r2, r8
 80092c2:	464b      	mov	r3, r9
 80092c4:	f7f7 f9a0 	bl	8000608 <__aeabi_dmul>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4630      	mov	r0, r6
 80092ce:	4639      	mov	r1, r7
 80092d0:	f7f6 ffe2 	bl	8000298 <__aeabi_dsub>
 80092d4:	9e02      	ldr	r6, [sp, #8]
 80092d6:	9f01      	ldr	r7, [sp, #4]
 80092d8:	3630      	adds	r6, #48	; 0x30
 80092da:	f805 6b01 	strb.w	r6, [r5], #1
 80092de:	9e00      	ldr	r6, [sp, #0]
 80092e0:	1bae      	subs	r6, r5, r6
 80092e2:	42b7      	cmp	r7, r6
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	d137      	bne.n	800935a <_dtoa_r+0x722>
 80092ea:	f7f6 ffd7 	bl	800029c <__adddf3>
 80092ee:	4642      	mov	r2, r8
 80092f0:	464b      	mov	r3, r9
 80092f2:	4606      	mov	r6, r0
 80092f4:	460f      	mov	r7, r1
 80092f6:	f7f7 fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80092fa:	b9c8      	cbnz	r0, 8009330 <_dtoa_r+0x6f8>
 80092fc:	4642      	mov	r2, r8
 80092fe:	464b      	mov	r3, r9
 8009300:	4630      	mov	r0, r6
 8009302:	4639      	mov	r1, r7
 8009304:	f7f7 fbe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009308:	b110      	cbz	r0, 8009310 <_dtoa_r+0x6d8>
 800930a:	9b02      	ldr	r3, [sp, #8]
 800930c:	07d9      	lsls	r1, r3, #31
 800930e:	d40f      	bmi.n	8009330 <_dtoa_r+0x6f8>
 8009310:	4620      	mov	r0, r4
 8009312:	4659      	mov	r1, fp
 8009314:	f000 fad6 	bl	80098c4 <_Bfree>
 8009318:	2300      	movs	r3, #0
 800931a:	702b      	strb	r3, [r5, #0]
 800931c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800931e:	f10a 0001 	add.w	r0, sl, #1
 8009322:	6018      	str	r0, [r3, #0]
 8009324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009326:	2b00      	cmp	r3, #0
 8009328:	f43f acd8 	beq.w	8008cdc <_dtoa_r+0xa4>
 800932c:	601d      	str	r5, [r3, #0]
 800932e:	e4d5      	b.n	8008cdc <_dtoa_r+0xa4>
 8009330:	f8cd a01c 	str.w	sl, [sp, #28]
 8009334:	462b      	mov	r3, r5
 8009336:	461d      	mov	r5, r3
 8009338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800933c:	2a39      	cmp	r2, #57	; 0x39
 800933e:	d108      	bne.n	8009352 <_dtoa_r+0x71a>
 8009340:	9a00      	ldr	r2, [sp, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d1f7      	bne.n	8009336 <_dtoa_r+0x6fe>
 8009346:	9a07      	ldr	r2, [sp, #28]
 8009348:	9900      	ldr	r1, [sp, #0]
 800934a:	3201      	adds	r2, #1
 800934c:	9207      	str	r2, [sp, #28]
 800934e:	2230      	movs	r2, #48	; 0x30
 8009350:	700a      	strb	r2, [r1, #0]
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	3201      	adds	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
 8009358:	e78c      	b.n	8009274 <_dtoa_r+0x63c>
 800935a:	4b7f      	ldr	r3, [pc, #508]	; (8009558 <_dtoa_r+0x920>)
 800935c:	2200      	movs	r2, #0
 800935e:	f7f7 f953 	bl	8000608 <__aeabi_dmul>
 8009362:	2200      	movs	r2, #0
 8009364:	2300      	movs	r3, #0
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	f7f7 fbb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800936e:	2800      	cmp	r0, #0
 8009370:	d09b      	beq.n	80092aa <_dtoa_r+0x672>
 8009372:	e7cd      	b.n	8009310 <_dtoa_r+0x6d8>
 8009374:	9a08      	ldr	r2, [sp, #32]
 8009376:	2a00      	cmp	r2, #0
 8009378:	f000 80c4 	beq.w	8009504 <_dtoa_r+0x8cc>
 800937c:	9a05      	ldr	r2, [sp, #20]
 800937e:	2a01      	cmp	r2, #1
 8009380:	f300 80a8 	bgt.w	80094d4 <_dtoa_r+0x89c>
 8009384:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009386:	2a00      	cmp	r2, #0
 8009388:	f000 80a0 	beq.w	80094cc <_dtoa_r+0x894>
 800938c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009390:	9e06      	ldr	r6, [sp, #24]
 8009392:	4645      	mov	r5, r8
 8009394:	9a04      	ldr	r2, [sp, #16]
 8009396:	2101      	movs	r1, #1
 8009398:	441a      	add	r2, r3
 800939a:	4620      	mov	r0, r4
 800939c:	4498      	add	r8, r3
 800939e:	9204      	str	r2, [sp, #16]
 80093a0:	f000 fb4c 	bl	8009a3c <__i2b>
 80093a4:	4607      	mov	r7, r0
 80093a6:	2d00      	cmp	r5, #0
 80093a8:	dd0b      	ble.n	80093c2 <_dtoa_r+0x78a>
 80093aa:	9b04      	ldr	r3, [sp, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dd08      	ble.n	80093c2 <_dtoa_r+0x78a>
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	9a04      	ldr	r2, [sp, #16]
 80093b4:	bfa8      	it	ge
 80093b6:	462b      	movge	r3, r5
 80093b8:	eba8 0803 	sub.w	r8, r8, r3
 80093bc:	1aed      	subs	r5, r5, r3
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	9304      	str	r3, [sp, #16]
 80093c2:	9b06      	ldr	r3, [sp, #24]
 80093c4:	b1fb      	cbz	r3, 8009406 <_dtoa_r+0x7ce>
 80093c6:	9b08      	ldr	r3, [sp, #32]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 809f 	beq.w	800950c <_dtoa_r+0x8d4>
 80093ce:	2e00      	cmp	r6, #0
 80093d0:	dd11      	ble.n	80093f6 <_dtoa_r+0x7be>
 80093d2:	4639      	mov	r1, r7
 80093d4:	4632      	mov	r2, r6
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 fbec 	bl	8009bb4 <__pow5mult>
 80093dc:	465a      	mov	r2, fp
 80093de:	4601      	mov	r1, r0
 80093e0:	4607      	mov	r7, r0
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fb40 	bl	8009a68 <__multiply>
 80093e8:	4659      	mov	r1, fp
 80093ea:	9007      	str	r0, [sp, #28]
 80093ec:	4620      	mov	r0, r4
 80093ee:	f000 fa69 	bl	80098c4 <_Bfree>
 80093f2:	9b07      	ldr	r3, [sp, #28]
 80093f4:	469b      	mov	fp, r3
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	1b9a      	subs	r2, r3, r6
 80093fa:	d004      	beq.n	8009406 <_dtoa_r+0x7ce>
 80093fc:	4659      	mov	r1, fp
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 fbd8 	bl	8009bb4 <__pow5mult>
 8009404:	4683      	mov	fp, r0
 8009406:	2101      	movs	r1, #1
 8009408:	4620      	mov	r0, r4
 800940a:	f000 fb17 	bl	8009a3c <__i2b>
 800940e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009410:	2b00      	cmp	r3, #0
 8009412:	4606      	mov	r6, r0
 8009414:	dd7c      	ble.n	8009510 <_dtoa_r+0x8d8>
 8009416:	461a      	mov	r2, r3
 8009418:	4601      	mov	r1, r0
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fbca 	bl	8009bb4 <__pow5mult>
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	2b01      	cmp	r3, #1
 8009424:	4606      	mov	r6, r0
 8009426:	dd76      	ble.n	8009516 <_dtoa_r+0x8de>
 8009428:	2300      	movs	r3, #0
 800942a:	9306      	str	r3, [sp, #24]
 800942c:	6933      	ldr	r3, [r6, #16]
 800942e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009432:	6918      	ldr	r0, [r3, #16]
 8009434:	f000 fab2 	bl	800999c <__hi0bits>
 8009438:	f1c0 0020 	rsb	r0, r0, #32
 800943c:	9b04      	ldr	r3, [sp, #16]
 800943e:	4418      	add	r0, r3
 8009440:	f010 001f 	ands.w	r0, r0, #31
 8009444:	f000 8086 	beq.w	8009554 <_dtoa_r+0x91c>
 8009448:	f1c0 0320 	rsb	r3, r0, #32
 800944c:	2b04      	cmp	r3, #4
 800944e:	dd7f      	ble.n	8009550 <_dtoa_r+0x918>
 8009450:	f1c0 001c 	rsb	r0, r0, #28
 8009454:	9b04      	ldr	r3, [sp, #16]
 8009456:	4403      	add	r3, r0
 8009458:	4480      	add	r8, r0
 800945a:	4405      	add	r5, r0
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	f1b8 0f00 	cmp.w	r8, #0
 8009462:	dd05      	ble.n	8009470 <_dtoa_r+0x838>
 8009464:	4659      	mov	r1, fp
 8009466:	4642      	mov	r2, r8
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fbfd 	bl	8009c68 <__lshift>
 800946e:	4683      	mov	fp, r0
 8009470:	9b04      	ldr	r3, [sp, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	dd05      	ble.n	8009482 <_dtoa_r+0x84a>
 8009476:	4631      	mov	r1, r6
 8009478:	461a      	mov	r2, r3
 800947a:	4620      	mov	r0, r4
 800947c:	f000 fbf4 	bl	8009c68 <__lshift>
 8009480:	4606      	mov	r6, r0
 8009482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009484:	2b00      	cmp	r3, #0
 8009486:	d069      	beq.n	800955c <_dtoa_r+0x924>
 8009488:	4631      	mov	r1, r6
 800948a:	4658      	mov	r0, fp
 800948c:	f000 fc58 	bl	8009d40 <__mcmp>
 8009490:	2800      	cmp	r0, #0
 8009492:	da63      	bge.n	800955c <_dtoa_r+0x924>
 8009494:	2300      	movs	r3, #0
 8009496:	4659      	mov	r1, fp
 8009498:	220a      	movs	r2, #10
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fa34 	bl	8009908 <__multadd>
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094a6:	4683      	mov	fp, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 818f 	beq.w	80097cc <_dtoa_r+0xb94>
 80094ae:	4639      	mov	r1, r7
 80094b0:	2300      	movs	r3, #0
 80094b2:	220a      	movs	r2, #10
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 fa27 	bl	8009908 <__multadd>
 80094ba:	f1b9 0f00 	cmp.w	r9, #0
 80094be:	4607      	mov	r7, r0
 80094c0:	f300 808e 	bgt.w	80095e0 <_dtoa_r+0x9a8>
 80094c4:	9b05      	ldr	r3, [sp, #20]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	dc50      	bgt.n	800956c <_dtoa_r+0x934>
 80094ca:	e089      	b.n	80095e0 <_dtoa_r+0x9a8>
 80094cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094d2:	e75d      	b.n	8009390 <_dtoa_r+0x758>
 80094d4:	9b01      	ldr	r3, [sp, #4]
 80094d6:	1e5e      	subs	r6, r3, #1
 80094d8:	9b06      	ldr	r3, [sp, #24]
 80094da:	42b3      	cmp	r3, r6
 80094dc:	bfbf      	itttt	lt
 80094de:	9b06      	ldrlt	r3, [sp, #24]
 80094e0:	9606      	strlt	r6, [sp, #24]
 80094e2:	1af2      	sublt	r2, r6, r3
 80094e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80094e6:	bfb6      	itet	lt
 80094e8:	189b      	addlt	r3, r3, r2
 80094ea:	1b9e      	subge	r6, r3, r6
 80094ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80094ee:	9b01      	ldr	r3, [sp, #4]
 80094f0:	bfb8      	it	lt
 80094f2:	2600      	movlt	r6, #0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bfb5      	itete	lt
 80094f8:	eba8 0503 	sublt.w	r5, r8, r3
 80094fc:	9b01      	ldrge	r3, [sp, #4]
 80094fe:	2300      	movlt	r3, #0
 8009500:	4645      	movge	r5, r8
 8009502:	e747      	b.n	8009394 <_dtoa_r+0x75c>
 8009504:	9e06      	ldr	r6, [sp, #24]
 8009506:	9f08      	ldr	r7, [sp, #32]
 8009508:	4645      	mov	r5, r8
 800950a:	e74c      	b.n	80093a6 <_dtoa_r+0x76e>
 800950c:	9a06      	ldr	r2, [sp, #24]
 800950e:	e775      	b.n	80093fc <_dtoa_r+0x7c4>
 8009510:	9b05      	ldr	r3, [sp, #20]
 8009512:	2b01      	cmp	r3, #1
 8009514:	dc18      	bgt.n	8009548 <_dtoa_r+0x910>
 8009516:	9b02      	ldr	r3, [sp, #8]
 8009518:	b9b3      	cbnz	r3, 8009548 <_dtoa_r+0x910>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009520:	b9a3      	cbnz	r3, 800954c <_dtoa_r+0x914>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009528:	0d1b      	lsrs	r3, r3, #20
 800952a:	051b      	lsls	r3, r3, #20
 800952c:	b12b      	cbz	r3, 800953a <_dtoa_r+0x902>
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	3301      	adds	r3, #1
 8009532:	9304      	str	r3, [sp, #16]
 8009534:	f108 0801 	add.w	r8, r8, #1
 8009538:	2301      	movs	r3, #1
 800953a:	9306      	str	r3, [sp, #24]
 800953c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800953e:	2b00      	cmp	r3, #0
 8009540:	f47f af74 	bne.w	800942c <_dtoa_r+0x7f4>
 8009544:	2001      	movs	r0, #1
 8009546:	e779      	b.n	800943c <_dtoa_r+0x804>
 8009548:	2300      	movs	r3, #0
 800954a:	e7f6      	b.n	800953a <_dtoa_r+0x902>
 800954c:	9b02      	ldr	r3, [sp, #8]
 800954e:	e7f4      	b.n	800953a <_dtoa_r+0x902>
 8009550:	d085      	beq.n	800945e <_dtoa_r+0x826>
 8009552:	4618      	mov	r0, r3
 8009554:	301c      	adds	r0, #28
 8009556:	e77d      	b.n	8009454 <_dtoa_r+0x81c>
 8009558:	40240000 	.word	0x40240000
 800955c:	9b01      	ldr	r3, [sp, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	dc38      	bgt.n	80095d4 <_dtoa_r+0x99c>
 8009562:	9b05      	ldr	r3, [sp, #20]
 8009564:	2b02      	cmp	r3, #2
 8009566:	dd35      	ble.n	80095d4 <_dtoa_r+0x99c>
 8009568:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800956c:	f1b9 0f00 	cmp.w	r9, #0
 8009570:	d10d      	bne.n	800958e <_dtoa_r+0x956>
 8009572:	4631      	mov	r1, r6
 8009574:	464b      	mov	r3, r9
 8009576:	2205      	movs	r2, #5
 8009578:	4620      	mov	r0, r4
 800957a:	f000 f9c5 	bl	8009908 <__multadd>
 800957e:	4601      	mov	r1, r0
 8009580:	4606      	mov	r6, r0
 8009582:	4658      	mov	r0, fp
 8009584:	f000 fbdc 	bl	8009d40 <__mcmp>
 8009588:	2800      	cmp	r0, #0
 800958a:	f73f adbd 	bgt.w	8009108 <_dtoa_r+0x4d0>
 800958e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009590:	9d00      	ldr	r5, [sp, #0]
 8009592:	ea6f 0a03 	mvn.w	sl, r3
 8009596:	f04f 0800 	mov.w	r8, #0
 800959a:	4631      	mov	r1, r6
 800959c:	4620      	mov	r0, r4
 800959e:	f000 f991 	bl	80098c4 <_Bfree>
 80095a2:	2f00      	cmp	r7, #0
 80095a4:	f43f aeb4 	beq.w	8009310 <_dtoa_r+0x6d8>
 80095a8:	f1b8 0f00 	cmp.w	r8, #0
 80095ac:	d005      	beq.n	80095ba <_dtoa_r+0x982>
 80095ae:	45b8      	cmp	r8, r7
 80095b0:	d003      	beq.n	80095ba <_dtoa_r+0x982>
 80095b2:	4641      	mov	r1, r8
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 f985 	bl	80098c4 <_Bfree>
 80095ba:	4639      	mov	r1, r7
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 f981 	bl	80098c4 <_Bfree>
 80095c2:	e6a5      	b.n	8009310 <_dtoa_r+0x6d8>
 80095c4:	2600      	movs	r6, #0
 80095c6:	4637      	mov	r7, r6
 80095c8:	e7e1      	b.n	800958e <_dtoa_r+0x956>
 80095ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80095cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095d0:	4637      	mov	r7, r6
 80095d2:	e599      	b.n	8009108 <_dtoa_r+0x4d0>
 80095d4:	9b08      	ldr	r3, [sp, #32]
 80095d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 80fd 	beq.w	80097da <_dtoa_r+0xba2>
 80095e0:	2d00      	cmp	r5, #0
 80095e2:	dd05      	ble.n	80095f0 <_dtoa_r+0x9b8>
 80095e4:	4639      	mov	r1, r7
 80095e6:	462a      	mov	r2, r5
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 fb3d 	bl	8009c68 <__lshift>
 80095ee:	4607      	mov	r7, r0
 80095f0:	9b06      	ldr	r3, [sp, #24]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d05c      	beq.n	80096b0 <_dtoa_r+0xa78>
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 f923 	bl	8009844 <_Balloc>
 80095fe:	4605      	mov	r5, r0
 8009600:	b928      	cbnz	r0, 800960e <_dtoa_r+0x9d6>
 8009602:	4b80      	ldr	r3, [pc, #512]	; (8009804 <_dtoa_r+0xbcc>)
 8009604:	4602      	mov	r2, r0
 8009606:	f240 21ea 	movw	r1, #746	; 0x2ea
 800960a:	f7ff bb2e 	b.w	8008c6a <_dtoa_r+0x32>
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	3202      	adds	r2, #2
 8009612:	0092      	lsls	r2, r2, #2
 8009614:	f107 010c 	add.w	r1, r7, #12
 8009618:	300c      	adds	r0, #12
 800961a:	f000 f905 	bl	8009828 <memcpy>
 800961e:	2201      	movs	r2, #1
 8009620:	4629      	mov	r1, r5
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fb20 	bl	8009c68 <__lshift>
 8009628:	9b00      	ldr	r3, [sp, #0]
 800962a:	3301      	adds	r3, #1
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	9b00      	ldr	r3, [sp, #0]
 8009630:	444b      	add	r3, r9
 8009632:	9307      	str	r3, [sp, #28]
 8009634:	9b02      	ldr	r3, [sp, #8]
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	46b8      	mov	r8, r7
 800963c:	9306      	str	r3, [sp, #24]
 800963e:	4607      	mov	r7, r0
 8009640:	9b01      	ldr	r3, [sp, #4]
 8009642:	4631      	mov	r1, r6
 8009644:	3b01      	subs	r3, #1
 8009646:	4658      	mov	r0, fp
 8009648:	9302      	str	r3, [sp, #8]
 800964a:	f7ff fa67 	bl	8008b1c <quorem>
 800964e:	4603      	mov	r3, r0
 8009650:	3330      	adds	r3, #48	; 0x30
 8009652:	9004      	str	r0, [sp, #16]
 8009654:	4641      	mov	r1, r8
 8009656:	4658      	mov	r0, fp
 8009658:	9308      	str	r3, [sp, #32]
 800965a:	f000 fb71 	bl	8009d40 <__mcmp>
 800965e:	463a      	mov	r2, r7
 8009660:	4681      	mov	r9, r0
 8009662:	4631      	mov	r1, r6
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fb87 	bl	8009d78 <__mdiff>
 800966a:	68c2      	ldr	r2, [r0, #12]
 800966c:	9b08      	ldr	r3, [sp, #32]
 800966e:	4605      	mov	r5, r0
 8009670:	bb02      	cbnz	r2, 80096b4 <_dtoa_r+0xa7c>
 8009672:	4601      	mov	r1, r0
 8009674:	4658      	mov	r0, fp
 8009676:	f000 fb63 	bl	8009d40 <__mcmp>
 800967a:	9b08      	ldr	r3, [sp, #32]
 800967c:	4602      	mov	r2, r0
 800967e:	4629      	mov	r1, r5
 8009680:	4620      	mov	r0, r4
 8009682:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009686:	f000 f91d 	bl	80098c4 <_Bfree>
 800968a:	9b05      	ldr	r3, [sp, #20]
 800968c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800968e:	9d01      	ldr	r5, [sp, #4]
 8009690:	ea43 0102 	orr.w	r1, r3, r2
 8009694:	9b06      	ldr	r3, [sp, #24]
 8009696:	430b      	orrs	r3, r1
 8009698:	9b08      	ldr	r3, [sp, #32]
 800969a:	d10d      	bne.n	80096b8 <_dtoa_r+0xa80>
 800969c:	2b39      	cmp	r3, #57	; 0x39
 800969e:	d029      	beq.n	80096f4 <_dtoa_r+0xabc>
 80096a0:	f1b9 0f00 	cmp.w	r9, #0
 80096a4:	dd01      	ble.n	80096aa <_dtoa_r+0xa72>
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	3331      	adds	r3, #49	; 0x31
 80096aa:	9a02      	ldr	r2, [sp, #8]
 80096ac:	7013      	strb	r3, [r2, #0]
 80096ae:	e774      	b.n	800959a <_dtoa_r+0x962>
 80096b0:	4638      	mov	r0, r7
 80096b2:	e7b9      	b.n	8009628 <_dtoa_r+0x9f0>
 80096b4:	2201      	movs	r2, #1
 80096b6:	e7e2      	b.n	800967e <_dtoa_r+0xa46>
 80096b8:	f1b9 0f00 	cmp.w	r9, #0
 80096bc:	db06      	blt.n	80096cc <_dtoa_r+0xa94>
 80096be:	9905      	ldr	r1, [sp, #20]
 80096c0:	ea41 0909 	orr.w	r9, r1, r9
 80096c4:	9906      	ldr	r1, [sp, #24]
 80096c6:	ea59 0101 	orrs.w	r1, r9, r1
 80096ca:	d120      	bne.n	800970e <_dtoa_r+0xad6>
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	ddec      	ble.n	80096aa <_dtoa_r+0xa72>
 80096d0:	4659      	mov	r1, fp
 80096d2:	2201      	movs	r2, #1
 80096d4:	4620      	mov	r0, r4
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	f000 fac6 	bl	8009c68 <__lshift>
 80096dc:	4631      	mov	r1, r6
 80096de:	4683      	mov	fp, r0
 80096e0:	f000 fb2e 	bl	8009d40 <__mcmp>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	dc02      	bgt.n	80096f0 <_dtoa_r+0xab8>
 80096ea:	d1de      	bne.n	80096aa <_dtoa_r+0xa72>
 80096ec:	07da      	lsls	r2, r3, #31
 80096ee:	d5dc      	bpl.n	80096aa <_dtoa_r+0xa72>
 80096f0:	2b39      	cmp	r3, #57	; 0x39
 80096f2:	d1d8      	bne.n	80096a6 <_dtoa_r+0xa6e>
 80096f4:	9a02      	ldr	r2, [sp, #8]
 80096f6:	2339      	movs	r3, #57	; 0x39
 80096f8:	7013      	strb	r3, [r2, #0]
 80096fa:	462b      	mov	r3, r5
 80096fc:	461d      	mov	r5, r3
 80096fe:	3b01      	subs	r3, #1
 8009700:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009704:	2a39      	cmp	r2, #57	; 0x39
 8009706:	d050      	beq.n	80097aa <_dtoa_r+0xb72>
 8009708:	3201      	adds	r2, #1
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	e745      	b.n	800959a <_dtoa_r+0x962>
 800970e:	2a00      	cmp	r2, #0
 8009710:	dd03      	ble.n	800971a <_dtoa_r+0xae2>
 8009712:	2b39      	cmp	r3, #57	; 0x39
 8009714:	d0ee      	beq.n	80096f4 <_dtoa_r+0xabc>
 8009716:	3301      	adds	r3, #1
 8009718:	e7c7      	b.n	80096aa <_dtoa_r+0xa72>
 800971a:	9a01      	ldr	r2, [sp, #4]
 800971c:	9907      	ldr	r1, [sp, #28]
 800971e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009722:	428a      	cmp	r2, r1
 8009724:	d02a      	beq.n	800977c <_dtoa_r+0xb44>
 8009726:	4659      	mov	r1, fp
 8009728:	2300      	movs	r3, #0
 800972a:	220a      	movs	r2, #10
 800972c:	4620      	mov	r0, r4
 800972e:	f000 f8eb 	bl	8009908 <__multadd>
 8009732:	45b8      	cmp	r8, r7
 8009734:	4683      	mov	fp, r0
 8009736:	f04f 0300 	mov.w	r3, #0
 800973a:	f04f 020a 	mov.w	r2, #10
 800973e:	4641      	mov	r1, r8
 8009740:	4620      	mov	r0, r4
 8009742:	d107      	bne.n	8009754 <_dtoa_r+0xb1c>
 8009744:	f000 f8e0 	bl	8009908 <__multadd>
 8009748:	4680      	mov	r8, r0
 800974a:	4607      	mov	r7, r0
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	3301      	adds	r3, #1
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	e775      	b.n	8009640 <_dtoa_r+0xa08>
 8009754:	f000 f8d8 	bl	8009908 <__multadd>
 8009758:	4639      	mov	r1, r7
 800975a:	4680      	mov	r8, r0
 800975c:	2300      	movs	r3, #0
 800975e:	220a      	movs	r2, #10
 8009760:	4620      	mov	r0, r4
 8009762:	f000 f8d1 	bl	8009908 <__multadd>
 8009766:	4607      	mov	r7, r0
 8009768:	e7f0      	b.n	800974c <_dtoa_r+0xb14>
 800976a:	f1b9 0f00 	cmp.w	r9, #0
 800976e:	9a00      	ldr	r2, [sp, #0]
 8009770:	bfcc      	ite	gt
 8009772:	464d      	movgt	r5, r9
 8009774:	2501      	movle	r5, #1
 8009776:	4415      	add	r5, r2
 8009778:	f04f 0800 	mov.w	r8, #0
 800977c:	4659      	mov	r1, fp
 800977e:	2201      	movs	r2, #1
 8009780:	4620      	mov	r0, r4
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	f000 fa70 	bl	8009c68 <__lshift>
 8009788:	4631      	mov	r1, r6
 800978a:	4683      	mov	fp, r0
 800978c:	f000 fad8 	bl	8009d40 <__mcmp>
 8009790:	2800      	cmp	r0, #0
 8009792:	dcb2      	bgt.n	80096fa <_dtoa_r+0xac2>
 8009794:	d102      	bne.n	800979c <_dtoa_r+0xb64>
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	07db      	lsls	r3, r3, #31
 800979a:	d4ae      	bmi.n	80096fa <_dtoa_r+0xac2>
 800979c:	462b      	mov	r3, r5
 800979e:	461d      	mov	r5, r3
 80097a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097a4:	2a30      	cmp	r2, #48	; 0x30
 80097a6:	d0fa      	beq.n	800979e <_dtoa_r+0xb66>
 80097a8:	e6f7      	b.n	800959a <_dtoa_r+0x962>
 80097aa:	9a00      	ldr	r2, [sp, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d1a5      	bne.n	80096fc <_dtoa_r+0xac4>
 80097b0:	f10a 0a01 	add.w	sl, sl, #1
 80097b4:	2331      	movs	r3, #49	; 0x31
 80097b6:	e779      	b.n	80096ac <_dtoa_r+0xa74>
 80097b8:	4b13      	ldr	r3, [pc, #76]	; (8009808 <_dtoa_r+0xbd0>)
 80097ba:	f7ff baaf 	b.w	8008d1c <_dtoa_r+0xe4>
 80097be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f47f aa86 	bne.w	8008cd2 <_dtoa_r+0x9a>
 80097c6:	4b11      	ldr	r3, [pc, #68]	; (800980c <_dtoa_r+0xbd4>)
 80097c8:	f7ff baa8 	b.w	8008d1c <_dtoa_r+0xe4>
 80097cc:	f1b9 0f00 	cmp.w	r9, #0
 80097d0:	dc03      	bgt.n	80097da <_dtoa_r+0xba2>
 80097d2:	9b05      	ldr	r3, [sp, #20]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	f73f aec9 	bgt.w	800956c <_dtoa_r+0x934>
 80097da:	9d00      	ldr	r5, [sp, #0]
 80097dc:	4631      	mov	r1, r6
 80097de:	4658      	mov	r0, fp
 80097e0:	f7ff f99c 	bl	8008b1c <quorem>
 80097e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80097e8:	f805 3b01 	strb.w	r3, [r5], #1
 80097ec:	9a00      	ldr	r2, [sp, #0]
 80097ee:	1aaa      	subs	r2, r5, r2
 80097f0:	4591      	cmp	r9, r2
 80097f2:	ddba      	ble.n	800976a <_dtoa_r+0xb32>
 80097f4:	4659      	mov	r1, fp
 80097f6:	2300      	movs	r3, #0
 80097f8:	220a      	movs	r2, #10
 80097fa:	4620      	mov	r0, r4
 80097fc:	f000 f884 	bl	8009908 <__multadd>
 8009800:	4683      	mov	fp, r0
 8009802:	e7eb      	b.n	80097dc <_dtoa_r+0xba4>
 8009804:	0800ad23 	.word	0x0800ad23
 8009808:	0800ac7c 	.word	0x0800ac7c
 800980c:	0800aca0 	.word	0x0800aca0

08009810 <_localeconv_r>:
 8009810:	4800      	ldr	r0, [pc, #0]	; (8009814 <_localeconv_r+0x4>)
 8009812:	4770      	bx	lr
 8009814:	200002d4 	.word	0x200002d4

08009818 <malloc>:
 8009818:	4b02      	ldr	r3, [pc, #8]	; (8009824 <malloc+0xc>)
 800981a:	4601      	mov	r1, r0
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	f000 bbef 	b.w	800a000 <_malloc_r>
 8009822:	bf00      	nop
 8009824:	20000180 	.word	0x20000180

08009828 <memcpy>:
 8009828:	440a      	add	r2, r1
 800982a:	4291      	cmp	r1, r2
 800982c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009830:	d100      	bne.n	8009834 <memcpy+0xc>
 8009832:	4770      	bx	lr
 8009834:	b510      	push	{r4, lr}
 8009836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800983a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800983e:	4291      	cmp	r1, r2
 8009840:	d1f9      	bne.n	8009836 <memcpy+0xe>
 8009842:	bd10      	pop	{r4, pc}

08009844 <_Balloc>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009848:	4604      	mov	r4, r0
 800984a:	460d      	mov	r5, r1
 800984c:	b976      	cbnz	r6, 800986c <_Balloc+0x28>
 800984e:	2010      	movs	r0, #16
 8009850:	f7ff ffe2 	bl	8009818 <malloc>
 8009854:	4602      	mov	r2, r0
 8009856:	6260      	str	r0, [r4, #36]	; 0x24
 8009858:	b920      	cbnz	r0, 8009864 <_Balloc+0x20>
 800985a:	4b18      	ldr	r3, [pc, #96]	; (80098bc <_Balloc+0x78>)
 800985c:	4818      	ldr	r0, [pc, #96]	; (80098c0 <_Balloc+0x7c>)
 800985e:	2166      	movs	r1, #102	; 0x66
 8009860:	f000 fc38 	bl	800a0d4 <__assert_func>
 8009864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009868:	6006      	str	r6, [r0, #0]
 800986a:	60c6      	str	r6, [r0, #12]
 800986c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800986e:	68f3      	ldr	r3, [r6, #12]
 8009870:	b183      	cbz	r3, 8009894 <_Balloc+0x50>
 8009872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800987a:	b9b8      	cbnz	r0, 80098ac <_Balloc+0x68>
 800987c:	2101      	movs	r1, #1
 800987e:	fa01 f605 	lsl.w	r6, r1, r5
 8009882:	1d72      	adds	r2, r6, #5
 8009884:	0092      	lsls	r2, r2, #2
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fb5a 	bl	8009f40 <_calloc_r>
 800988c:	b160      	cbz	r0, 80098a8 <_Balloc+0x64>
 800988e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009892:	e00e      	b.n	80098b2 <_Balloc+0x6e>
 8009894:	2221      	movs	r2, #33	; 0x21
 8009896:	2104      	movs	r1, #4
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fb51 	bl	8009f40 <_calloc_r>
 800989e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098a0:	60f0      	str	r0, [r6, #12]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e4      	bne.n	8009872 <_Balloc+0x2e>
 80098a8:	2000      	movs	r0, #0
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	6802      	ldr	r2, [r0, #0]
 80098ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098b2:	2300      	movs	r3, #0
 80098b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098b8:	e7f7      	b.n	80098aa <_Balloc+0x66>
 80098ba:	bf00      	nop
 80098bc:	0800acad 	.word	0x0800acad
 80098c0:	0800ad34 	.word	0x0800ad34

080098c4 <_Bfree>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098c8:	4605      	mov	r5, r0
 80098ca:	460c      	mov	r4, r1
 80098cc:	b976      	cbnz	r6, 80098ec <_Bfree+0x28>
 80098ce:	2010      	movs	r0, #16
 80098d0:	f7ff ffa2 	bl	8009818 <malloc>
 80098d4:	4602      	mov	r2, r0
 80098d6:	6268      	str	r0, [r5, #36]	; 0x24
 80098d8:	b920      	cbnz	r0, 80098e4 <_Bfree+0x20>
 80098da:	4b09      	ldr	r3, [pc, #36]	; (8009900 <_Bfree+0x3c>)
 80098dc:	4809      	ldr	r0, [pc, #36]	; (8009904 <_Bfree+0x40>)
 80098de:	218a      	movs	r1, #138	; 0x8a
 80098e0:	f000 fbf8 	bl	800a0d4 <__assert_func>
 80098e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098e8:	6006      	str	r6, [r0, #0]
 80098ea:	60c6      	str	r6, [r0, #12]
 80098ec:	b13c      	cbz	r4, 80098fe <_Bfree+0x3a>
 80098ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098f0:	6862      	ldr	r2, [r4, #4]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098f8:	6021      	str	r1, [r4, #0]
 80098fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	0800acad 	.word	0x0800acad
 8009904:	0800ad34 	.word	0x0800ad34

08009908 <__multadd>:
 8009908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990c:	690e      	ldr	r6, [r1, #16]
 800990e:	4607      	mov	r7, r0
 8009910:	4698      	mov	r8, r3
 8009912:	460c      	mov	r4, r1
 8009914:	f101 0014 	add.w	r0, r1, #20
 8009918:	2300      	movs	r3, #0
 800991a:	6805      	ldr	r5, [r0, #0]
 800991c:	b2a9      	uxth	r1, r5
 800991e:	fb02 8101 	mla	r1, r2, r1, r8
 8009922:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009926:	0c2d      	lsrs	r5, r5, #16
 8009928:	fb02 c505 	mla	r5, r2, r5, ip
 800992c:	b289      	uxth	r1, r1
 800992e:	3301      	adds	r3, #1
 8009930:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009934:	429e      	cmp	r6, r3
 8009936:	f840 1b04 	str.w	r1, [r0], #4
 800993a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800993e:	dcec      	bgt.n	800991a <__multadd+0x12>
 8009940:	f1b8 0f00 	cmp.w	r8, #0
 8009944:	d022      	beq.n	800998c <__multadd+0x84>
 8009946:	68a3      	ldr	r3, [r4, #8]
 8009948:	42b3      	cmp	r3, r6
 800994a:	dc19      	bgt.n	8009980 <__multadd+0x78>
 800994c:	6861      	ldr	r1, [r4, #4]
 800994e:	4638      	mov	r0, r7
 8009950:	3101      	adds	r1, #1
 8009952:	f7ff ff77 	bl	8009844 <_Balloc>
 8009956:	4605      	mov	r5, r0
 8009958:	b928      	cbnz	r0, 8009966 <__multadd+0x5e>
 800995a:	4602      	mov	r2, r0
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <__multadd+0x8c>)
 800995e:	480e      	ldr	r0, [pc, #56]	; (8009998 <__multadd+0x90>)
 8009960:	21b5      	movs	r1, #181	; 0xb5
 8009962:	f000 fbb7 	bl	800a0d4 <__assert_func>
 8009966:	6922      	ldr	r2, [r4, #16]
 8009968:	3202      	adds	r2, #2
 800996a:	f104 010c 	add.w	r1, r4, #12
 800996e:	0092      	lsls	r2, r2, #2
 8009970:	300c      	adds	r0, #12
 8009972:	f7ff ff59 	bl	8009828 <memcpy>
 8009976:	4621      	mov	r1, r4
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff ffa3 	bl	80098c4 <_Bfree>
 800997e:	462c      	mov	r4, r5
 8009980:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009984:	3601      	adds	r6, #1
 8009986:	f8c3 8014 	str.w	r8, [r3, #20]
 800998a:	6126      	str	r6, [r4, #16]
 800998c:	4620      	mov	r0, r4
 800998e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009992:	bf00      	nop
 8009994:	0800ad23 	.word	0x0800ad23
 8009998:	0800ad34 	.word	0x0800ad34

0800999c <__hi0bits>:
 800999c:	0c03      	lsrs	r3, r0, #16
 800999e:	041b      	lsls	r3, r3, #16
 80099a0:	b9d3      	cbnz	r3, 80099d8 <__hi0bits+0x3c>
 80099a2:	0400      	lsls	r0, r0, #16
 80099a4:	2310      	movs	r3, #16
 80099a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099aa:	bf04      	itt	eq
 80099ac:	0200      	lsleq	r0, r0, #8
 80099ae:	3308      	addeq	r3, #8
 80099b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099b4:	bf04      	itt	eq
 80099b6:	0100      	lsleq	r0, r0, #4
 80099b8:	3304      	addeq	r3, #4
 80099ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099be:	bf04      	itt	eq
 80099c0:	0080      	lsleq	r0, r0, #2
 80099c2:	3302      	addeq	r3, #2
 80099c4:	2800      	cmp	r0, #0
 80099c6:	db05      	blt.n	80099d4 <__hi0bits+0x38>
 80099c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099cc:	f103 0301 	add.w	r3, r3, #1
 80099d0:	bf08      	it	eq
 80099d2:	2320      	moveq	r3, #32
 80099d4:	4618      	mov	r0, r3
 80099d6:	4770      	bx	lr
 80099d8:	2300      	movs	r3, #0
 80099da:	e7e4      	b.n	80099a6 <__hi0bits+0xa>

080099dc <__lo0bits>:
 80099dc:	6803      	ldr	r3, [r0, #0]
 80099de:	f013 0207 	ands.w	r2, r3, #7
 80099e2:	4601      	mov	r1, r0
 80099e4:	d00b      	beq.n	80099fe <__lo0bits+0x22>
 80099e6:	07da      	lsls	r2, r3, #31
 80099e8:	d424      	bmi.n	8009a34 <__lo0bits+0x58>
 80099ea:	0798      	lsls	r0, r3, #30
 80099ec:	bf49      	itett	mi
 80099ee:	085b      	lsrmi	r3, r3, #1
 80099f0:	089b      	lsrpl	r3, r3, #2
 80099f2:	2001      	movmi	r0, #1
 80099f4:	600b      	strmi	r3, [r1, #0]
 80099f6:	bf5c      	itt	pl
 80099f8:	600b      	strpl	r3, [r1, #0]
 80099fa:	2002      	movpl	r0, #2
 80099fc:	4770      	bx	lr
 80099fe:	b298      	uxth	r0, r3
 8009a00:	b9b0      	cbnz	r0, 8009a30 <__lo0bits+0x54>
 8009a02:	0c1b      	lsrs	r3, r3, #16
 8009a04:	2010      	movs	r0, #16
 8009a06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a0a:	bf04      	itt	eq
 8009a0c:	0a1b      	lsreq	r3, r3, #8
 8009a0e:	3008      	addeq	r0, #8
 8009a10:	071a      	lsls	r2, r3, #28
 8009a12:	bf04      	itt	eq
 8009a14:	091b      	lsreq	r3, r3, #4
 8009a16:	3004      	addeq	r0, #4
 8009a18:	079a      	lsls	r2, r3, #30
 8009a1a:	bf04      	itt	eq
 8009a1c:	089b      	lsreq	r3, r3, #2
 8009a1e:	3002      	addeq	r0, #2
 8009a20:	07da      	lsls	r2, r3, #31
 8009a22:	d403      	bmi.n	8009a2c <__lo0bits+0x50>
 8009a24:	085b      	lsrs	r3, r3, #1
 8009a26:	f100 0001 	add.w	r0, r0, #1
 8009a2a:	d005      	beq.n	8009a38 <__lo0bits+0x5c>
 8009a2c:	600b      	str	r3, [r1, #0]
 8009a2e:	4770      	bx	lr
 8009a30:	4610      	mov	r0, r2
 8009a32:	e7e8      	b.n	8009a06 <__lo0bits+0x2a>
 8009a34:	2000      	movs	r0, #0
 8009a36:	4770      	bx	lr
 8009a38:	2020      	movs	r0, #32
 8009a3a:	4770      	bx	lr

08009a3c <__i2b>:
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	460c      	mov	r4, r1
 8009a40:	2101      	movs	r1, #1
 8009a42:	f7ff feff 	bl	8009844 <_Balloc>
 8009a46:	4602      	mov	r2, r0
 8009a48:	b928      	cbnz	r0, 8009a56 <__i2b+0x1a>
 8009a4a:	4b05      	ldr	r3, [pc, #20]	; (8009a60 <__i2b+0x24>)
 8009a4c:	4805      	ldr	r0, [pc, #20]	; (8009a64 <__i2b+0x28>)
 8009a4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a52:	f000 fb3f 	bl	800a0d4 <__assert_func>
 8009a56:	2301      	movs	r3, #1
 8009a58:	6144      	str	r4, [r0, #20]
 8009a5a:	6103      	str	r3, [r0, #16]
 8009a5c:	bd10      	pop	{r4, pc}
 8009a5e:	bf00      	nop
 8009a60:	0800ad23 	.word	0x0800ad23
 8009a64:	0800ad34 	.word	0x0800ad34

08009a68 <__multiply>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	4614      	mov	r4, r2
 8009a6e:	690a      	ldr	r2, [r1, #16]
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	bfb8      	it	lt
 8009a76:	460b      	movlt	r3, r1
 8009a78:	460d      	mov	r5, r1
 8009a7a:	bfbc      	itt	lt
 8009a7c:	4625      	movlt	r5, r4
 8009a7e:	461c      	movlt	r4, r3
 8009a80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a88:	68ab      	ldr	r3, [r5, #8]
 8009a8a:	6869      	ldr	r1, [r5, #4]
 8009a8c:	eb0a 0709 	add.w	r7, sl, r9
 8009a90:	42bb      	cmp	r3, r7
 8009a92:	b085      	sub	sp, #20
 8009a94:	bfb8      	it	lt
 8009a96:	3101      	addlt	r1, #1
 8009a98:	f7ff fed4 	bl	8009844 <_Balloc>
 8009a9c:	b930      	cbnz	r0, 8009aac <__multiply+0x44>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	4b42      	ldr	r3, [pc, #264]	; (8009bac <__multiply+0x144>)
 8009aa2:	4843      	ldr	r0, [pc, #268]	; (8009bb0 <__multiply+0x148>)
 8009aa4:	f240 115d 	movw	r1, #349	; 0x15d
 8009aa8:	f000 fb14 	bl	800a0d4 <__assert_func>
 8009aac:	f100 0614 	add.w	r6, r0, #20
 8009ab0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009ab4:	4633      	mov	r3, r6
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	4543      	cmp	r3, r8
 8009aba:	d31e      	bcc.n	8009afa <__multiply+0x92>
 8009abc:	f105 0c14 	add.w	ip, r5, #20
 8009ac0:	f104 0314 	add.w	r3, r4, #20
 8009ac4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009ac8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009acc:	9202      	str	r2, [sp, #8]
 8009ace:	ebac 0205 	sub.w	r2, ip, r5
 8009ad2:	3a15      	subs	r2, #21
 8009ad4:	f022 0203 	bic.w	r2, r2, #3
 8009ad8:	3204      	adds	r2, #4
 8009ada:	f105 0115 	add.w	r1, r5, #21
 8009ade:	458c      	cmp	ip, r1
 8009ae0:	bf38      	it	cc
 8009ae2:	2204      	movcc	r2, #4
 8009ae4:	9201      	str	r2, [sp, #4]
 8009ae6:	9a02      	ldr	r2, [sp, #8]
 8009ae8:	9303      	str	r3, [sp, #12]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d808      	bhi.n	8009b00 <__multiply+0x98>
 8009aee:	2f00      	cmp	r7, #0
 8009af0:	dc55      	bgt.n	8009b9e <__multiply+0x136>
 8009af2:	6107      	str	r7, [r0, #16]
 8009af4:	b005      	add	sp, #20
 8009af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afa:	f843 2b04 	str.w	r2, [r3], #4
 8009afe:	e7db      	b.n	8009ab8 <__multiply+0x50>
 8009b00:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b04:	f1ba 0f00 	cmp.w	sl, #0
 8009b08:	d020      	beq.n	8009b4c <__multiply+0xe4>
 8009b0a:	f105 0e14 	add.w	lr, r5, #20
 8009b0e:	46b1      	mov	r9, r6
 8009b10:	2200      	movs	r2, #0
 8009b12:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009b16:	f8d9 b000 	ldr.w	fp, [r9]
 8009b1a:	b2a1      	uxth	r1, r4
 8009b1c:	fa1f fb8b 	uxth.w	fp, fp
 8009b20:	fb0a b101 	mla	r1, sl, r1, fp
 8009b24:	4411      	add	r1, r2
 8009b26:	f8d9 2000 	ldr.w	r2, [r9]
 8009b2a:	0c24      	lsrs	r4, r4, #16
 8009b2c:	0c12      	lsrs	r2, r2, #16
 8009b2e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009b32:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009b36:	b289      	uxth	r1, r1
 8009b38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009b3c:	45f4      	cmp	ip, lr
 8009b3e:	f849 1b04 	str.w	r1, [r9], #4
 8009b42:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009b46:	d8e4      	bhi.n	8009b12 <__multiply+0xaa>
 8009b48:	9901      	ldr	r1, [sp, #4]
 8009b4a:	5072      	str	r2, [r6, r1]
 8009b4c:	9a03      	ldr	r2, [sp, #12]
 8009b4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b52:	3304      	adds	r3, #4
 8009b54:	f1b9 0f00 	cmp.w	r9, #0
 8009b58:	d01f      	beq.n	8009b9a <__multiply+0x132>
 8009b5a:	6834      	ldr	r4, [r6, #0]
 8009b5c:	f105 0114 	add.w	r1, r5, #20
 8009b60:	46b6      	mov	lr, r6
 8009b62:	f04f 0a00 	mov.w	sl, #0
 8009b66:	880a      	ldrh	r2, [r1, #0]
 8009b68:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b6c:	fb09 b202 	mla	r2, r9, r2, fp
 8009b70:	4492      	add	sl, r2
 8009b72:	b2a4      	uxth	r4, r4
 8009b74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b78:	f84e 4b04 	str.w	r4, [lr], #4
 8009b7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b80:	f8be 2000 	ldrh.w	r2, [lr]
 8009b84:	0c24      	lsrs	r4, r4, #16
 8009b86:	fb09 2404 	mla	r4, r9, r4, r2
 8009b8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b8e:	458c      	cmp	ip, r1
 8009b90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b94:	d8e7      	bhi.n	8009b66 <__multiply+0xfe>
 8009b96:	9a01      	ldr	r2, [sp, #4]
 8009b98:	50b4      	str	r4, [r6, r2]
 8009b9a:	3604      	adds	r6, #4
 8009b9c:	e7a3      	b.n	8009ae6 <__multiply+0x7e>
 8009b9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1a5      	bne.n	8009af2 <__multiply+0x8a>
 8009ba6:	3f01      	subs	r7, #1
 8009ba8:	e7a1      	b.n	8009aee <__multiply+0x86>
 8009baa:	bf00      	nop
 8009bac:	0800ad23 	.word	0x0800ad23
 8009bb0:	0800ad34 	.word	0x0800ad34

08009bb4 <__pow5mult>:
 8009bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb8:	4615      	mov	r5, r2
 8009bba:	f012 0203 	ands.w	r2, r2, #3
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	460f      	mov	r7, r1
 8009bc2:	d007      	beq.n	8009bd4 <__pow5mult+0x20>
 8009bc4:	4c25      	ldr	r4, [pc, #148]	; (8009c5c <__pow5mult+0xa8>)
 8009bc6:	3a01      	subs	r2, #1
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bce:	f7ff fe9b 	bl	8009908 <__multadd>
 8009bd2:	4607      	mov	r7, r0
 8009bd4:	10ad      	asrs	r5, r5, #2
 8009bd6:	d03d      	beq.n	8009c54 <__pow5mult+0xa0>
 8009bd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bda:	b97c      	cbnz	r4, 8009bfc <__pow5mult+0x48>
 8009bdc:	2010      	movs	r0, #16
 8009bde:	f7ff fe1b 	bl	8009818 <malloc>
 8009be2:	4602      	mov	r2, r0
 8009be4:	6270      	str	r0, [r6, #36]	; 0x24
 8009be6:	b928      	cbnz	r0, 8009bf4 <__pow5mult+0x40>
 8009be8:	4b1d      	ldr	r3, [pc, #116]	; (8009c60 <__pow5mult+0xac>)
 8009bea:	481e      	ldr	r0, [pc, #120]	; (8009c64 <__pow5mult+0xb0>)
 8009bec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bf0:	f000 fa70 	bl	800a0d4 <__assert_func>
 8009bf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bf8:	6004      	str	r4, [r0, #0]
 8009bfa:	60c4      	str	r4, [r0, #12]
 8009bfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c04:	b94c      	cbnz	r4, 8009c1a <__pow5mult+0x66>
 8009c06:	f240 2171 	movw	r1, #625	; 0x271
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7ff ff16 	bl	8009a3c <__i2b>
 8009c10:	2300      	movs	r3, #0
 8009c12:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c16:	4604      	mov	r4, r0
 8009c18:	6003      	str	r3, [r0, #0]
 8009c1a:	f04f 0900 	mov.w	r9, #0
 8009c1e:	07eb      	lsls	r3, r5, #31
 8009c20:	d50a      	bpl.n	8009c38 <__pow5mult+0x84>
 8009c22:	4639      	mov	r1, r7
 8009c24:	4622      	mov	r2, r4
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7ff ff1e 	bl	8009a68 <__multiply>
 8009c2c:	4639      	mov	r1, r7
 8009c2e:	4680      	mov	r8, r0
 8009c30:	4630      	mov	r0, r6
 8009c32:	f7ff fe47 	bl	80098c4 <_Bfree>
 8009c36:	4647      	mov	r7, r8
 8009c38:	106d      	asrs	r5, r5, #1
 8009c3a:	d00b      	beq.n	8009c54 <__pow5mult+0xa0>
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	b938      	cbnz	r0, 8009c50 <__pow5mult+0x9c>
 8009c40:	4622      	mov	r2, r4
 8009c42:	4621      	mov	r1, r4
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7ff ff0f 	bl	8009a68 <__multiply>
 8009c4a:	6020      	str	r0, [r4, #0]
 8009c4c:	f8c0 9000 	str.w	r9, [r0]
 8009c50:	4604      	mov	r4, r0
 8009c52:	e7e4      	b.n	8009c1e <__pow5mult+0x6a>
 8009c54:	4638      	mov	r0, r7
 8009c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c5a:	bf00      	nop
 8009c5c:	0800ae88 	.word	0x0800ae88
 8009c60:	0800acad 	.word	0x0800acad
 8009c64:	0800ad34 	.word	0x0800ad34

08009c68 <__lshift>:
 8009c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	6849      	ldr	r1, [r1, #4]
 8009c70:	6923      	ldr	r3, [r4, #16]
 8009c72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c76:	68a3      	ldr	r3, [r4, #8]
 8009c78:	4607      	mov	r7, r0
 8009c7a:	4691      	mov	r9, r2
 8009c7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c80:	f108 0601 	add.w	r6, r8, #1
 8009c84:	42b3      	cmp	r3, r6
 8009c86:	db0b      	blt.n	8009ca0 <__lshift+0x38>
 8009c88:	4638      	mov	r0, r7
 8009c8a:	f7ff fddb 	bl	8009844 <_Balloc>
 8009c8e:	4605      	mov	r5, r0
 8009c90:	b948      	cbnz	r0, 8009ca6 <__lshift+0x3e>
 8009c92:	4602      	mov	r2, r0
 8009c94:	4b28      	ldr	r3, [pc, #160]	; (8009d38 <__lshift+0xd0>)
 8009c96:	4829      	ldr	r0, [pc, #164]	; (8009d3c <__lshift+0xd4>)
 8009c98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c9c:	f000 fa1a 	bl	800a0d4 <__assert_func>
 8009ca0:	3101      	adds	r1, #1
 8009ca2:	005b      	lsls	r3, r3, #1
 8009ca4:	e7ee      	b.n	8009c84 <__lshift+0x1c>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f100 0114 	add.w	r1, r0, #20
 8009cac:	f100 0210 	add.w	r2, r0, #16
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	4553      	cmp	r3, sl
 8009cb4:	db33      	blt.n	8009d1e <__lshift+0xb6>
 8009cb6:	6920      	ldr	r0, [r4, #16]
 8009cb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cbc:	f104 0314 	add.w	r3, r4, #20
 8009cc0:	f019 091f 	ands.w	r9, r9, #31
 8009cc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ccc:	d02b      	beq.n	8009d26 <__lshift+0xbe>
 8009cce:	f1c9 0e20 	rsb	lr, r9, #32
 8009cd2:	468a      	mov	sl, r1
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	fa00 f009 	lsl.w	r0, r0, r9
 8009cdc:	4302      	orrs	r2, r0
 8009cde:	f84a 2b04 	str.w	r2, [sl], #4
 8009ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ce6:	459c      	cmp	ip, r3
 8009ce8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cec:	d8f3      	bhi.n	8009cd6 <__lshift+0x6e>
 8009cee:	ebac 0304 	sub.w	r3, ip, r4
 8009cf2:	3b15      	subs	r3, #21
 8009cf4:	f023 0303 	bic.w	r3, r3, #3
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	f104 0015 	add.w	r0, r4, #21
 8009cfe:	4584      	cmp	ip, r0
 8009d00:	bf38      	it	cc
 8009d02:	2304      	movcc	r3, #4
 8009d04:	50ca      	str	r2, [r1, r3]
 8009d06:	b10a      	cbz	r2, 8009d0c <__lshift+0xa4>
 8009d08:	f108 0602 	add.w	r6, r8, #2
 8009d0c:	3e01      	subs	r6, #1
 8009d0e:	4638      	mov	r0, r7
 8009d10:	612e      	str	r6, [r5, #16]
 8009d12:	4621      	mov	r1, r4
 8009d14:	f7ff fdd6 	bl	80098c4 <_Bfree>
 8009d18:	4628      	mov	r0, r5
 8009d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d22:	3301      	adds	r3, #1
 8009d24:	e7c5      	b.n	8009cb2 <__lshift+0x4a>
 8009d26:	3904      	subs	r1, #4
 8009d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d30:	459c      	cmp	ip, r3
 8009d32:	d8f9      	bhi.n	8009d28 <__lshift+0xc0>
 8009d34:	e7ea      	b.n	8009d0c <__lshift+0xa4>
 8009d36:	bf00      	nop
 8009d38:	0800ad23 	.word	0x0800ad23
 8009d3c:	0800ad34 	.word	0x0800ad34

08009d40 <__mcmp>:
 8009d40:	b530      	push	{r4, r5, lr}
 8009d42:	6902      	ldr	r2, [r0, #16]
 8009d44:	690c      	ldr	r4, [r1, #16]
 8009d46:	1b12      	subs	r2, r2, r4
 8009d48:	d10e      	bne.n	8009d68 <__mcmp+0x28>
 8009d4a:	f100 0314 	add.w	r3, r0, #20
 8009d4e:	3114      	adds	r1, #20
 8009d50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d60:	42a5      	cmp	r5, r4
 8009d62:	d003      	beq.n	8009d6c <__mcmp+0x2c>
 8009d64:	d305      	bcc.n	8009d72 <__mcmp+0x32>
 8009d66:	2201      	movs	r2, #1
 8009d68:	4610      	mov	r0, r2
 8009d6a:	bd30      	pop	{r4, r5, pc}
 8009d6c:	4283      	cmp	r3, r0
 8009d6e:	d3f3      	bcc.n	8009d58 <__mcmp+0x18>
 8009d70:	e7fa      	b.n	8009d68 <__mcmp+0x28>
 8009d72:	f04f 32ff 	mov.w	r2, #4294967295
 8009d76:	e7f7      	b.n	8009d68 <__mcmp+0x28>

08009d78 <__mdiff>:
 8009d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	4606      	mov	r6, r0
 8009d80:	4611      	mov	r1, r2
 8009d82:	4620      	mov	r0, r4
 8009d84:	4617      	mov	r7, r2
 8009d86:	f7ff ffdb 	bl	8009d40 <__mcmp>
 8009d8a:	1e05      	subs	r5, r0, #0
 8009d8c:	d110      	bne.n	8009db0 <__mdiff+0x38>
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7ff fd57 	bl	8009844 <_Balloc>
 8009d96:	b930      	cbnz	r0, 8009da6 <__mdiff+0x2e>
 8009d98:	4b39      	ldr	r3, [pc, #228]	; (8009e80 <__mdiff+0x108>)
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	f240 2132 	movw	r1, #562	; 0x232
 8009da0:	4838      	ldr	r0, [pc, #224]	; (8009e84 <__mdiff+0x10c>)
 8009da2:	f000 f997 	bl	800a0d4 <__assert_func>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db0:	bfa4      	itt	ge
 8009db2:	463b      	movge	r3, r7
 8009db4:	4627      	movge	r7, r4
 8009db6:	4630      	mov	r0, r6
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	bfa6      	itte	ge
 8009dbc:	461c      	movge	r4, r3
 8009dbe:	2500      	movge	r5, #0
 8009dc0:	2501      	movlt	r5, #1
 8009dc2:	f7ff fd3f 	bl	8009844 <_Balloc>
 8009dc6:	b920      	cbnz	r0, 8009dd2 <__mdiff+0x5a>
 8009dc8:	4b2d      	ldr	r3, [pc, #180]	; (8009e80 <__mdiff+0x108>)
 8009dca:	4602      	mov	r2, r0
 8009dcc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009dd0:	e7e6      	b.n	8009da0 <__mdiff+0x28>
 8009dd2:	693e      	ldr	r6, [r7, #16]
 8009dd4:	60c5      	str	r5, [r0, #12]
 8009dd6:	6925      	ldr	r5, [r4, #16]
 8009dd8:	f107 0114 	add.w	r1, r7, #20
 8009ddc:	f104 0914 	add.w	r9, r4, #20
 8009de0:	f100 0e14 	add.w	lr, r0, #20
 8009de4:	f107 0210 	add.w	r2, r7, #16
 8009de8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009dec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009df0:	46f2      	mov	sl, lr
 8009df2:	2700      	movs	r7, #0
 8009df4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009df8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009dfc:	fa1f f883 	uxth.w	r8, r3
 8009e00:	fa17 f78b 	uxtah	r7, r7, fp
 8009e04:	0c1b      	lsrs	r3, r3, #16
 8009e06:	eba7 0808 	sub.w	r8, r7, r8
 8009e0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e12:	fa1f f888 	uxth.w	r8, r8
 8009e16:	141f      	asrs	r7, r3, #16
 8009e18:	454d      	cmp	r5, r9
 8009e1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e1e:	f84a 3b04 	str.w	r3, [sl], #4
 8009e22:	d8e7      	bhi.n	8009df4 <__mdiff+0x7c>
 8009e24:	1b2b      	subs	r3, r5, r4
 8009e26:	3b15      	subs	r3, #21
 8009e28:	f023 0303 	bic.w	r3, r3, #3
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	3415      	adds	r4, #21
 8009e30:	42a5      	cmp	r5, r4
 8009e32:	bf38      	it	cc
 8009e34:	2304      	movcc	r3, #4
 8009e36:	4419      	add	r1, r3
 8009e38:	4473      	add	r3, lr
 8009e3a:	469e      	mov	lr, r3
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	4565      	cmp	r5, ip
 8009e40:	d30e      	bcc.n	8009e60 <__mdiff+0xe8>
 8009e42:	f10c 0203 	add.w	r2, ip, #3
 8009e46:	1a52      	subs	r2, r2, r1
 8009e48:	f022 0203 	bic.w	r2, r2, #3
 8009e4c:	3903      	subs	r1, #3
 8009e4e:	458c      	cmp	ip, r1
 8009e50:	bf38      	it	cc
 8009e52:	2200      	movcc	r2, #0
 8009e54:	441a      	add	r2, r3
 8009e56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e5a:	b17b      	cbz	r3, 8009e7c <__mdiff+0x104>
 8009e5c:	6106      	str	r6, [r0, #16]
 8009e5e:	e7a5      	b.n	8009dac <__mdiff+0x34>
 8009e60:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e64:	fa17 f488 	uxtah	r4, r7, r8
 8009e68:	1422      	asrs	r2, r4, #16
 8009e6a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009e6e:	b2a4      	uxth	r4, r4
 8009e70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e74:	f84e 4b04 	str.w	r4, [lr], #4
 8009e78:	1417      	asrs	r7, r2, #16
 8009e7a:	e7e0      	b.n	8009e3e <__mdiff+0xc6>
 8009e7c:	3e01      	subs	r6, #1
 8009e7e:	e7ea      	b.n	8009e56 <__mdiff+0xde>
 8009e80:	0800ad23 	.word	0x0800ad23
 8009e84:	0800ad34 	.word	0x0800ad34

08009e88 <__d2b>:
 8009e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e8c:	4689      	mov	r9, r1
 8009e8e:	2101      	movs	r1, #1
 8009e90:	ec57 6b10 	vmov	r6, r7, d0
 8009e94:	4690      	mov	r8, r2
 8009e96:	f7ff fcd5 	bl	8009844 <_Balloc>
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	b930      	cbnz	r0, 8009eac <__d2b+0x24>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	4b25      	ldr	r3, [pc, #148]	; (8009f38 <__d2b+0xb0>)
 8009ea2:	4826      	ldr	r0, [pc, #152]	; (8009f3c <__d2b+0xb4>)
 8009ea4:	f240 310a 	movw	r1, #778	; 0x30a
 8009ea8:	f000 f914 	bl	800a0d4 <__assert_func>
 8009eac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009eb4:	bb35      	cbnz	r5, 8009f04 <__d2b+0x7c>
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	d028      	beq.n	8009f0e <__d2b+0x86>
 8009ebc:	4668      	mov	r0, sp
 8009ebe:	9600      	str	r6, [sp, #0]
 8009ec0:	f7ff fd8c 	bl	80099dc <__lo0bits>
 8009ec4:	9900      	ldr	r1, [sp, #0]
 8009ec6:	b300      	cbz	r0, 8009f0a <__d2b+0x82>
 8009ec8:	9a01      	ldr	r2, [sp, #4]
 8009eca:	f1c0 0320 	rsb	r3, r0, #32
 8009ece:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	40c2      	lsrs	r2, r0
 8009ed6:	6163      	str	r3, [r4, #20]
 8009ed8:	9201      	str	r2, [sp, #4]
 8009eda:	9b01      	ldr	r3, [sp, #4]
 8009edc:	61a3      	str	r3, [r4, #24]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bf14      	ite	ne
 8009ee2:	2202      	movne	r2, #2
 8009ee4:	2201      	moveq	r2, #1
 8009ee6:	6122      	str	r2, [r4, #16]
 8009ee8:	b1d5      	cbz	r5, 8009f20 <__d2b+0x98>
 8009eea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eee:	4405      	add	r5, r0
 8009ef0:	f8c9 5000 	str.w	r5, [r9]
 8009ef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ef8:	f8c8 0000 	str.w	r0, [r8]
 8009efc:	4620      	mov	r0, r4
 8009efe:	b003      	add	sp, #12
 8009f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f08:	e7d5      	b.n	8009eb6 <__d2b+0x2e>
 8009f0a:	6161      	str	r1, [r4, #20]
 8009f0c:	e7e5      	b.n	8009eda <__d2b+0x52>
 8009f0e:	a801      	add	r0, sp, #4
 8009f10:	f7ff fd64 	bl	80099dc <__lo0bits>
 8009f14:	9b01      	ldr	r3, [sp, #4]
 8009f16:	6163      	str	r3, [r4, #20]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	6122      	str	r2, [r4, #16]
 8009f1c:	3020      	adds	r0, #32
 8009f1e:	e7e3      	b.n	8009ee8 <__d2b+0x60>
 8009f20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f28:	f8c9 0000 	str.w	r0, [r9]
 8009f2c:	6918      	ldr	r0, [r3, #16]
 8009f2e:	f7ff fd35 	bl	800999c <__hi0bits>
 8009f32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f36:	e7df      	b.n	8009ef8 <__d2b+0x70>
 8009f38:	0800ad23 	.word	0x0800ad23
 8009f3c:	0800ad34 	.word	0x0800ad34

08009f40 <_calloc_r>:
 8009f40:	b513      	push	{r0, r1, r4, lr}
 8009f42:	434a      	muls	r2, r1
 8009f44:	4611      	mov	r1, r2
 8009f46:	9201      	str	r2, [sp, #4]
 8009f48:	f000 f85a 	bl	800a000 <_malloc_r>
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	b118      	cbz	r0, 8009f58 <_calloc_r+0x18>
 8009f50:	9a01      	ldr	r2, [sp, #4]
 8009f52:	2100      	movs	r1, #0
 8009f54:	f7fe f970 	bl	8008238 <memset>
 8009f58:	4620      	mov	r0, r4
 8009f5a:	b002      	add	sp, #8
 8009f5c:	bd10      	pop	{r4, pc}
	...

08009f60 <_free_r>:
 8009f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f62:	2900      	cmp	r1, #0
 8009f64:	d048      	beq.n	8009ff8 <_free_r+0x98>
 8009f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f6a:	9001      	str	r0, [sp, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f72:	bfb8      	it	lt
 8009f74:	18e4      	addlt	r4, r4, r3
 8009f76:	f000 f8ef 	bl	800a158 <__malloc_lock>
 8009f7a:	4a20      	ldr	r2, [pc, #128]	; (8009ffc <_free_r+0x9c>)
 8009f7c:	9801      	ldr	r0, [sp, #4]
 8009f7e:	6813      	ldr	r3, [r2, #0]
 8009f80:	4615      	mov	r5, r2
 8009f82:	b933      	cbnz	r3, 8009f92 <_free_r+0x32>
 8009f84:	6063      	str	r3, [r4, #4]
 8009f86:	6014      	str	r4, [r2, #0]
 8009f88:	b003      	add	sp, #12
 8009f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f8e:	f000 b8e9 	b.w	800a164 <__malloc_unlock>
 8009f92:	42a3      	cmp	r3, r4
 8009f94:	d90b      	bls.n	8009fae <_free_r+0x4e>
 8009f96:	6821      	ldr	r1, [r4, #0]
 8009f98:	1862      	adds	r2, r4, r1
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	bf04      	itt	eq
 8009f9e:	681a      	ldreq	r2, [r3, #0]
 8009fa0:	685b      	ldreq	r3, [r3, #4]
 8009fa2:	6063      	str	r3, [r4, #4]
 8009fa4:	bf04      	itt	eq
 8009fa6:	1852      	addeq	r2, r2, r1
 8009fa8:	6022      	streq	r2, [r4, #0]
 8009faa:	602c      	str	r4, [r5, #0]
 8009fac:	e7ec      	b.n	8009f88 <_free_r+0x28>
 8009fae:	461a      	mov	r2, r3
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	b10b      	cbz	r3, 8009fb8 <_free_r+0x58>
 8009fb4:	42a3      	cmp	r3, r4
 8009fb6:	d9fa      	bls.n	8009fae <_free_r+0x4e>
 8009fb8:	6811      	ldr	r1, [r2, #0]
 8009fba:	1855      	adds	r5, r2, r1
 8009fbc:	42a5      	cmp	r5, r4
 8009fbe:	d10b      	bne.n	8009fd8 <_free_r+0x78>
 8009fc0:	6824      	ldr	r4, [r4, #0]
 8009fc2:	4421      	add	r1, r4
 8009fc4:	1854      	adds	r4, r2, r1
 8009fc6:	42a3      	cmp	r3, r4
 8009fc8:	6011      	str	r1, [r2, #0]
 8009fca:	d1dd      	bne.n	8009f88 <_free_r+0x28>
 8009fcc:	681c      	ldr	r4, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	6053      	str	r3, [r2, #4]
 8009fd2:	4421      	add	r1, r4
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	e7d7      	b.n	8009f88 <_free_r+0x28>
 8009fd8:	d902      	bls.n	8009fe0 <_free_r+0x80>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	6003      	str	r3, [r0, #0]
 8009fde:	e7d3      	b.n	8009f88 <_free_r+0x28>
 8009fe0:	6825      	ldr	r5, [r4, #0]
 8009fe2:	1961      	adds	r1, r4, r5
 8009fe4:	428b      	cmp	r3, r1
 8009fe6:	bf04      	itt	eq
 8009fe8:	6819      	ldreq	r1, [r3, #0]
 8009fea:	685b      	ldreq	r3, [r3, #4]
 8009fec:	6063      	str	r3, [r4, #4]
 8009fee:	bf04      	itt	eq
 8009ff0:	1949      	addeq	r1, r1, r5
 8009ff2:	6021      	streq	r1, [r4, #0]
 8009ff4:	6054      	str	r4, [r2, #4]
 8009ff6:	e7c7      	b.n	8009f88 <_free_r+0x28>
 8009ff8:	b003      	add	sp, #12
 8009ffa:	bd30      	pop	{r4, r5, pc}
 8009ffc:	200005e8 	.word	0x200005e8

0800a000 <_malloc_r>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	1ccd      	adds	r5, r1, #3
 800a004:	f025 0503 	bic.w	r5, r5, #3
 800a008:	3508      	adds	r5, #8
 800a00a:	2d0c      	cmp	r5, #12
 800a00c:	bf38      	it	cc
 800a00e:	250c      	movcc	r5, #12
 800a010:	2d00      	cmp	r5, #0
 800a012:	4606      	mov	r6, r0
 800a014:	db01      	blt.n	800a01a <_malloc_r+0x1a>
 800a016:	42a9      	cmp	r1, r5
 800a018:	d903      	bls.n	800a022 <_malloc_r+0x22>
 800a01a:	230c      	movs	r3, #12
 800a01c:	6033      	str	r3, [r6, #0]
 800a01e:	2000      	movs	r0, #0
 800a020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a022:	f000 f899 	bl	800a158 <__malloc_lock>
 800a026:	4921      	ldr	r1, [pc, #132]	; (800a0ac <_malloc_r+0xac>)
 800a028:	680a      	ldr	r2, [r1, #0]
 800a02a:	4614      	mov	r4, r2
 800a02c:	b99c      	cbnz	r4, 800a056 <_malloc_r+0x56>
 800a02e:	4f20      	ldr	r7, [pc, #128]	; (800a0b0 <_malloc_r+0xb0>)
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	b923      	cbnz	r3, 800a03e <_malloc_r+0x3e>
 800a034:	4621      	mov	r1, r4
 800a036:	4630      	mov	r0, r6
 800a038:	f000 f83c 	bl	800a0b4 <_sbrk_r>
 800a03c:	6038      	str	r0, [r7, #0]
 800a03e:	4629      	mov	r1, r5
 800a040:	4630      	mov	r0, r6
 800a042:	f000 f837 	bl	800a0b4 <_sbrk_r>
 800a046:	1c43      	adds	r3, r0, #1
 800a048:	d123      	bne.n	800a092 <_malloc_r+0x92>
 800a04a:	230c      	movs	r3, #12
 800a04c:	6033      	str	r3, [r6, #0]
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 f888 	bl	800a164 <__malloc_unlock>
 800a054:	e7e3      	b.n	800a01e <_malloc_r+0x1e>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	1b5b      	subs	r3, r3, r5
 800a05a:	d417      	bmi.n	800a08c <_malloc_r+0x8c>
 800a05c:	2b0b      	cmp	r3, #11
 800a05e:	d903      	bls.n	800a068 <_malloc_r+0x68>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	441c      	add	r4, r3
 800a064:	6025      	str	r5, [r4, #0]
 800a066:	e004      	b.n	800a072 <_malloc_r+0x72>
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	42a2      	cmp	r2, r4
 800a06c:	bf0c      	ite	eq
 800a06e:	600b      	streq	r3, [r1, #0]
 800a070:	6053      	strne	r3, [r2, #4]
 800a072:	4630      	mov	r0, r6
 800a074:	f000 f876 	bl	800a164 <__malloc_unlock>
 800a078:	f104 000b 	add.w	r0, r4, #11
 800a07c:	1d23      	adds	r3, r4, #4
 800a07e:	f020 0007 	bic.w	r0, r0, #7
 800a082:	1ac2      	subs	r2, r0, r3
 800a084:	d0cc      	beq.n	800a020 <_malloc_r+0x20>
 800a086:	1a1b      	subs	r3, r3, r0
 800a088:	50a3      	str	r3, [r4, r2]
 800a08a:	e7c9      	b.n	800a020 <_malloc_r+0x20>
 800a08c:	4622      	mov	r2, r4
 800a08e:	6864      	ldr	r4, [r4, #4]
 800a090:	e7cc      	b.n	800a02c <_malloc_r+0x2c>
 800a092:	1cc4      	adds	r4, r0, #3
 800a094:	f024 0403 	bic.w	r4, r4, #3
 800a098:	42a0      	cmp	r0, r4
 800a09a:	d0e3      	beq.n	800a064 <_malloc_r+0x64>
 800a09c:	1a21      	subs	r1, r4, r0
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f000 f808 	bl	800a0b4 <_sbrk_r>
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d1dd      	bne.n	800a064 <_malloc_r+0x64>
 800a0a8:	e7cf      	b.n	800a04a <_malloc_r+0x4a>
 800a0aa:	bf00      	nop
 800a0ac:	200005e8 	.word	0x200005e8
 800a0b0:	200005ec 	.word	0x200005ec

0800a0b4 <_sbrk_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4d06      	ldr	r5, [pc, #24]	; (800a0d0 <_sbrk_r+0x1c>)
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	4608      	mov	r0, r1
 800a0be:	602b      	str	r3, [r5, #0]
 800a0c0:	f7f7 f946 	bl	8001350 <_sbrk>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d102      	bne.n	800a0ce <_sbrk_r+0x1a>
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	b103      	cbz	r3, 800a0ce <_sbrk_r+0x1a>
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	20001f20 	.word	0x20001f20

0800a0d4 <__assert_func>:
 800a0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0d6:	4614      	mov	r4, r2
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4b09      	ldr	r3, [pc, #36]	; (800a100 <__assert_func+0x2c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4605      	mov	r5, r0
 800a0e0:	68d8      	ldr	r0, [r3, #12]
 800a0e2:	b14c      	cbz	r4, 800a0f8 <__assert_func+0x24>
 800a0e4:	4b07      	ldr	r3, [pc, #28]	; (800a104 <__assert_func+0x30>)
 800a0e6:	9100      	str	r1, [sp, #0]
 800a0e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0ec:	4906      	ldr	r1, [pc, #24]	; (800a108 <__assert_func+0x34>)
 800a0ee:	462b      	mov	r3, r5
 800a0f0:	f000 f80e 	bl	800a110 <fiprintf>
 800a0f4:	f000 fa64 	bl	800a5c0 <abort>
 800a0f8:	4b04      	ldr	r3, [pc, #16]	; (800a10c <__assert_func+0x38>)
 800a0fa:	461c      	mov	r4, r3
 800a0fc:	e7f3      	b.n	800a0e6 <__assert_func+0x12>
 800a0fe:	bf00      	nop
 800a100:	20000180 	.word	0x20000180
 800a104:	0800ae94 	.word	0x0800ae94
 800a108:	0800aea1 	.word	0x0800aea1
 800a10c:	0800aecf 	.word	0x0800aecf

0800a110 <fiprintf>:
 800a110:	b40e      	push	{r1, r2, r3}
 800a112:	b503      	push	{r0, r1, lr}
 800a114:	4601      	mov	r1, r0
 800a116:	ab03      	add	r3, sp, #12
 800a118:	4805      	ldr	r0, [pc, #20]	; (800a130 <fiprintf+0x20>)
 800a11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11e:	6800      	ldr	r0, [r0, #0]
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	f000 f84f 	bl	800a1c4 <_vfiprintf_r>
 800a126:	b002      	add	sp, #8
 800a128:	f85d eb04 	ldr.w	lr, [sp], #4
 800a12c:	b003      	add	sp, #12
 800a12e:	4770      	bx	lr
 800a130:	20000180 	.word	0x20000180

0800a134 <__ascii_mbtowc>:
 800a134:	b082      	sub	sp, #8
 800a136:	b901      	cbnz	r1, 800a13a <__ascii_mbtowc+0x6>
 800a138:	a901      	add	r1, sp, #4
 800a13a:	b142      	cbz	r2, 800a14e <__ascii_mbtowc+0x1a>
 800a13c:	b14b      	cbz	r3, 800a152 <__ascii_mbtowc+0x1e>
 800a13e:	7813      	ldrb	r3, [r2, #0]
 800a140:	600b      	str	r3, [r1, #0]
 800a142:	7812      	ldrb	r2, [r2, #0]
 800a144:	1e10      	subs	r0, r2, #0
 800a146:	bf18      	it	ne
 800a148:	2001      	movne	r0, #1
 800a14a:	b002      	add	sp, #8
 800a14c:	4770      	bx	lr
 800a14e:	4610      	mov	r0, r2
 800a150:	e7fb      	b.n	800a14a <__ascii_mbtowc+0x16>
 800a152:	f06f 0001 	mvn.w	r0, #1
 800a156:	e7f8      	b.n	800a14a <__ascii_mbtowc+0x16>

0800a158 <__malloc_lock>:
 800a158:	4801      	ldr	r0, [pc, #4]	; (800a160 <__malloc_lock+0x8>)
 800a15a:	f000 bbf1 	b.w	800a940 <__retarget_lock_acquire_recursive>
 800a15e:	bf00      	nop
 800a160:	20001f28 	.word	0x20001f28

0800a164 <__malloc_unlock>:
 800a164:	4801      	ldr	r0, [pc, #4]	; (800a16c <__malloc_unlock+0x8>)
 800a166:	f000 bbec 	b.w	800a942 <__retarget_lock_release_recursive>
 800a16a:	bf00      	nop
 800a16c:	20001f28 	.word	0x20001f28

0800a170 <__sfputc_r>:
 800a170:	6893      	ldr	r3, [r2, #8]
 800a172:	3b01      	subs	r3, #1
 800a174:	2b00      	cmp	r3, #0
 800a176:	b410      	push	{r4}
 800a178:	6093      	str	r3, [r2, #8]
 800a17a:	da08      	bge.n	800a18e <__sfputc_r+0x1e>
 800a17c:	6994      	ldr	r4, [r2, #24]
 800a17e:	42a3      	cmp	r3, r4
 800a180:	db01      	blt.n	800a186 <__sfputc_r+0x16>
 800a182:	290a      	cmp	r1, #10
 800a184:	d103      	bne.n	800a18e <__sfputc_r+0x1e>
 800a186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a18a:	f000 b94b 	b.w	800a424 <__swbuf_r>
 800a18e:	6813      	ldr	r3, [r2, #0]
 800a190:	1c58      	adds	r0, r3, #1
 800a192:	6010      	str	r0, [r2, #0]
 800a194:	7019      	strb	r1, [r3, #0]
 800a196:	4608      	mov	r0, r1
 800a198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <__sfputs_r>:
 800a19e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	460f      	mov	r7, r1
 800a1a4:	4614      	mov	r4, r2
 800a1a6:	18d5      	adds	r5, r2, r3
 800a1a8:	42ac      	cmp	r4, r5
 800a1aa:	d101      	bne.n	800a1b0 <__sfputs_r+0x12>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	e007      	b.n	800a1c0 <__sfputs_r+0x22>
 800a1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b4:	463a      	mov	r2, r7
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7ff ffda 	bl	800a170 <__sfputc_r>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	d1f3      	bne.n	800a1a8 <__sfputs_r+0xa>
 800a1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1c4 <_vfiprintf_r>:
 800a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	460d      	mov	r5, r1
 800a1ca:	b09d      	sub	sp, #116	; 0x74
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	4698      	mov	r8, r3
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	b118      	cbz	r0, 800a1dc <_vfiprintf_r+0x18>
 800a1d4:	6983      	ldr	r3, [r0, #24]
 800a1d6:	b90b      	cbnz	r3, 800a1dc <_vfiprintf_r+0x18>
 800a1d8:	f000 fb14 	bl	800a804 <__sinit>
 800a1dc:	4b89      	ldr	r3, [pc, #548]	; (800a404 <_vfiprintf_r+0x240>)
 800a1de:	429d      	cmp	r5, r3
 800a1e0:	d11b      	bne.n	800a21a <_vfiprintf_r+0x56>
 800a1e2:	6875      	ldr	r5, [r6, #4]
 800a1e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1e6:	07d9      	lsls	r1, r3, #31
 800a1e8:	d405      	bmi.n	800a1f6 <_vfiprintf_r+0x32>
 800a1ea:	89ab      	ldrh	r3, [r5, #12]
 800a1ec:	059a      	lsls	r2, r3, #22
 800a1ee:	d402      	bmi.n	800a1f6 <_vfiprintf_r+0x32>
 800a1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1f2:	f000 fba5 	bl	800a940 <__retarget_lock_acquire_recursive>
 800a1f6:	89ab      	ldrh	r3, [r5, #12]
 800a1f8:	071b      	lsls	r3, r3, #28
 800a1fa:	d501      	bpl.n	800a200 <_vfiprintf_r+0x3c>
 800a1fc:	692b      	ldr	r3, [r5, #16]
 800a1fe:	b9eb      	cbnz	r3, 800a23c <_vfiprintf_r+0x78>
 800a200:	4629      	mov	r1, r5
 800a202:	4630      	mov	r0, r6
 800a204:	f000 f96e 	bl	800a4e4 <__swsetup_r>
 800a208:	b1c0      	cbz	r0, 800a23c <_vfiprintf_r+0x78>
 800a20a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a20c:	07dc      	lsls	r4, r3, #31
 800a20e:	d50e      	bpl.n	800a22e <_vfiprintf_r+0x6a>
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	b01d      	add	sp, #116	; 0x74
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21a:	4b7b      	ldr	r3, [pc, #492]	; (800a408 <_vfiprintf_r+0x244>)
 800a21c:	429d      	cmp	r5, r3
 800a21e:	d101      	bne.n	800a224 <_vfiprintf_r+0x60>
 800a220:	68b5      	ldr	r5, [r6, #8]
 800a222:	e7df      	b.n	800a1e4 <_vfiprintf_r+0x20>
 800a224:	4b79      	ldr	r3, [pc, #484]	; (800a40c <_vfiprintf_r+0x248>)
 800a226:	429d      	cmp	r5, r3
 800a228:	bf08      	it	eq
 800a22a:	68f5      	ldreq	r5, [r6, #12]
 800a22c:	e7da      	b.n	800a1e4 <_vfiprintf_r+0x20>
 800a22e:	89ab      	ldrh	r3, [r5, #12]
 800a230:	0598      	lsls	r0, r3, #22
 800a232:	d4ed      	bmi.n	800a210 <_vfiprintf_r+0x4c>
 800a234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a236:	f000 fb84 	bl	800a942 <__retarget_lock_release_recursive>
 800a23a:	e7e9      	b.n	800a210 <_vfiprintf_r+0x4c>
 800a23c:	2300      	movs	r3, #0
 800a23e:	9309      	str	r3, [sp, #36]	; 0x24
 800a240:	2320      	movs	r3, #32
 800a242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a246:	f8cd 800c 	str.w	r8, [sp, #12]
 800a24a:	2330      	movs	r3, #48	; 0x30
 800a24c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a410 <_vfiprintf_r+0x24c>
 800a250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a254:	f04f 0901 	mov.w	r9, #1
 800a258:	4623      	mov	r3, r4
 800a25a:	469a      	mov	sl, r3
 800a25c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a260:	b10a      	cbz	r2, 800a266 <_vfiprintf_r+0xa2>
 800a262:	2a25      	cmp	r2, #37	; 0x25
 800a264:	d1f9      	bne.n	800a25a <_vfiprintf_r+0x96>
 800a266:	ebba 0b04 	subs.w	fp, sl, r4
 800a26a:	d00b      	beq.n	800a284 <_vfiprintf_r+0xc0>
 800a26c:	465b      	mov	r3, fp
 800a26e:	4622      	mov	r2, r4
 800a270:	4629      	mov	r1, r5
 800a272:	4630      	mov	r0, r6
 800a274:	f7ff ff93 	bl	800a19e <__sfputs_r>
 800a278:	3001      	adds	r0, #1
 800a27a:	f000 80aa 	beq.w	800a3d2 <_vfiprintf_r+0x20e>
 800a27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a280:	445a      	add	r2, fp
 800a282:	9209      	str	r2, [sp, #36]	; 0x24
 800a284:	f89a 3000 	ldrb.w	r3, [sl]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 80a2 	beq.w	800a3d2 <_vfiprintf_r+0x20e>
 800a28e:	2300      	movs	r3, #0
 800a290:	f04f 32ff 	mov.w	r2, #4294967295
 800a294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a298:	f10a 0a01 	add.w	sl, sl, #1
 800a29c:	9304      	str	r3, [sp, #16]
 800a29e:	9307      	str	r3, [sp, #28]
 800a2a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a2a6:	4654      	mov	r4, sl
 800a2a8:	2205      	movs	r2, #5
 800a2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ae:	4858      	ldr	r0, [pc, #352]	; (800a410 <_vfiprintf_r+0x24c>)
 800a2b0:	f7f5 ff9e 	bl	80001f0 <memchr>
 800a2b4:	9a04      	ldr	r2, [sp, #16]
 800a2b6:	b9d8      	cbnz	r0, 800a2f0 <_vfiprintf_r+0x12c>
 800a2b8:	06d1      	lsls	r1, r2, #27
 800a2ba:	bf44      	itt	mi
 800a2bc:	2320      	movmi	r3, #32
 800a2be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2c2:	0713      	lsls	r3, r2, #28
 800a2c4:	bf44      	itt	mi
 800a2c6:	232b      	movmi	r3, #43	; 0x2b
 800a2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d2:	d015      	beq.n	800a300 <_vfiprintf_r+0x13c>
 800a2d4:	9a07      	ldr	r2, [sp, #28]
 800a2d6:	4654      	mov	r4, sl
 800a2d8:	2000      	movs	r0, #0
 800a2da:	f04f 0c0a 	mov.w	ip, #10
 800a2de:	4621      	mov	r1, r4
 800a2e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2e4:	3b30      	subs	r3, #48	; 0x30
 800a2e6:	2b09      	cmp	r3, #9
 800a2e8:	d94e      	bls.n	800a388 <_vfiprintf_r+0x1c4>
 800a2ea:	b1b0      	cbz	r0, 800a31a <_vfiprintf_r+0x156>
 800a2ec:	9207      	str	r2, [sp, #28]
 800a2ee:	e014      	b.n	800a31a <_vfiprintf_r+0x156>
 800a2f0:	eba0 0308 	sub.w	r3, r0, r8
 800a2f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	9304      	str	r3, [sp, #16]
 800a2fc:	46a2      	mov	sl, r4
 800a2fe:	e7d2      	b.n	800a2a6 <_vfiprintf_r+0xe2>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	1d19      	adds	r1, r3, #4
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	9103      	str	r1, [sp, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	bfbb      	ittet	lt
 800a30c:	425b      	neglt	r3, r3
 800a30e:	f042 0202 	orrlt.w	r2, r2, #2
 800a312:	9307      	strge	r3, [sp, #28]
 800a314:	9307      	strlt	r3, [sp, #28]
 800a316:	bfb8      	it	lt
 800a318:	9204      	strlt	r2, [sp, #16]
 800a31a:	7823      	ldrb	r3, [r4, #0]
 800a31c:	2b2e      	cmp	r3, #46	; 0x2e
 800a31e:	d10c      	bne.n	800a33a <_vfiprintf_r+0x176>
 800a320:	7863      	ldrb	r3, [r4, #1]
 800a322:	2b2a      	cmp	r3, #42	; 0x2a
 800a324:	d135      	bne.n	800a392 <_vfiprintf_r+0x1ce>
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	1d1a      	adds	r2, r3, #4
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	9203      	str	r2, [sp, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bfb8      	it	lt
 800a332:	f04f 33ff 	movlt.w	r3, #4294967295
 800a336:	3402      	adds	r4, #2
 800a338:	9305      	str	r3, [sp, #20]
 800a33a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a420 <_vfiprintf_r+0x25c>
 800a33e:	7821      	ldrb	r1, [r4, #0]
 800a340:	2203      	movs	r2, #3
 800a342:	4650      	mov	r0, sl
 800a344:	f7f5 ff54 	bl	80001f0 <memchr>
 800a348:	b140      	cbz	r0, 800a35c <_vfiprintf_r+0x198>
 800a34a:	2340      	movs	r3, #64	; 0x40
 800a34c:	eba0 000a 	sub.w	r0, r0, sl
 800a350:	fa03 f000 	lsl.w	r0, r3, r0
 800a354:	9b04      	ldr	r3, [sp, #16]
 800a356:	4303      	orrs	r3, r0
 800a358:	3401      	adds	r4, #1
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a360:	482c      	ldr	r0, [pc, #176]	; (800a414 <_vfiprintf_r+0x250>)
 800a362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a366:	2206      	movs	r2, #6
 800a368:	f7f5 ff42 	bl	80001f0 <memchr>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d03f      	beq.n	800a3f0 <_vfiprintf_r+0x22c>
 800a370:	4b29      	ldr	r3, [pc, #164]	; (800a418 <_vfiprintf_r+0x254>)
 800a372:	bb1b      	cbnz	r3, 800a3bc <_vfiprintf_r+0x1f8>
 800a374:	9b03      	ldr	r3, [sp, #12]
 800a376:	3307      	adds	r3, #7
 800a378:	f023 0307 	bic.w	r3, r3, #7
 800a37c:	3308      	adds	r3, #8
 800a37e:	9303      	str	r3, [sp, #12]
 800a380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a382:	443b      	add	r3, r7
 800a384:	9309      	str	r3, [sp, #36]	; 0x24
 800a386:	e767      	b.n	800a258 <_vfiprintf_r+0x94>
 800a388:	fb0c 3202 	mla	r2, ip, r2, r3
 800a38c:	460c      	mov	r4, r1
 800a38e:	2001      	movs	r0, #1
 800a390:	e7a5      	b.n	800a2de <_vfiprintf_r+0x11a>
 800a392:	2300      	movs	r3, #0
 800a394:	3401      	adds	r4, #1
 800a396:	9305      	str	r3, [sp, #20]
 800a398:	4619      	mov	r1, r3
 800a39a:	f04f 0c0a 	mov.w	ip, #10
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3a4:	3a30      	subs	r2, #48	; 0x30
 800a3a6:	2a09      	cmp	r2, #9
 800a3a8:	d903      	bls.n	800a3b2 <_vfiprintf_r+0x1ee>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0c5      	beq.n	800a33a <_vfiprintf_r+0x176>
 800a3ae:	9105      	str	r1, [sp, #20]
 800a3b0:	e7c3      	b.n	800a33a <_vfiprintf_r+0x176>
 800a3b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e7f0      	b.n	800a39e <_vfiprintf_r+0x1da>
 800a3bc:	ab03      	add	r3, sp, #12
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	462a      	mov	r2, r5
 800a3c2:	4b16      	ldr	r3, [pc, #88]	; (800a41c <_vfiprintf_r+0x258>)
 800a3c4:	a904      	add	r1, sp, #16
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f7fd ffde 	bl	8008388 <_printf_float>
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	1c78      	adds	r0, r7, #1
 800a3d0:	d1d6      	bne.n	800a380 <_vfiprintf_r+0x1bc>
 800a3d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3d4:	07d9      	lsls	r1, r3, #31
 800a3d6:	d405      	bmi.n	800a3e4 <_vfiprintf_r+0x220>
 800a3d8:	89ab      	ldrh	r3, [r5, #12]
 800a3da:	059a      	lsls	r2, r3, #22
 800a3dc:	d402      	bmi.n	800a3e4 <_vfiprintf_r+0x220>
 800a3de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3e0:	f000 faaf 	bl	800a942 <__retarget_lock_release_recursive>
 800a3e4:	89ab      	ldrh	r3, [r5, #12]
 800a3e6:	065b      	lsls	r3, r3, #25
 800a3e8:	f53f af12 	bmi.w	800a210 <_vfiprintf_r+0x4c>
 800a3ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ee:	e711      	b.n	800a214 <_vfiprintf_r+0x50>
 800a3f0:	ab03      	add	r3, sp, #12
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	462a      	mov	r2, r5
 800a3f6:	4b09      	ldr	r3, [pc, #36]	; (800a41c <_vfiprintf_r+0x258>)
 800a3f8:	a904      	add	r1, sp, #16
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7fe fa68 	bl	80088d0 <_printf_i>
 800a400:	e7e4      	b.n	800a3cc <_vfiprintf_r+0x208>
 800a402:	bf00      	nop
 800a404:	0800b00c 	.word	0x0800b00c
 800a408:	0800b02c 	.word	0x0800b02c
 800a40c:	0800afec 	.word	0x0800afec
 800a410:	0800aeda 	.word	0x0800aeda
 800a414:	0800aee4 	.word	0x0800aee4
 800a418:	08008389 	.word	0x08008389
 800a41c:	0800a19f 	.word	0x0800a19f
 800a420:	0800aee0 	.word	0x0800aee0

0800a424 <__swbuf_r>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	460e      	mov	r6, r1
 800a428:	4614      	mov	r4, r2
 800a42a:	4605      	mov	r5, r0
 800a42c:	b118      	cbz	r0, 800a436 <__swbuf_r+0x12>
 800a42e:	6983      	ldr	r3, [r0, #24]
 800a430:	b90b      	cbnz	r3, 800a436 <__swbuf_r+0x12>
 800a432:	f000 f9e7 	bl	800a804 <__sinit>
 800a436:	4b21      	ldr	r3, [pc, #132]	; (800a4bc <__swbuf_r+0x98>)
 800a438:	429c      	cmp	r4, r3
 800a43a:	d12b      	bne.n	800a494 <__swbuf_r+0x70>
 800a43c:	686c      	ldr	r4, [r5, #4]
 800a43e:	69a3      	ldr	r3, [r4, #24]
 800a440:	60a3      	str	r3, [r4, #8]
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	071a      	lsls	r2, r3, #28
 800a446:	d52f      	bpl.n	800a4a8 <__swbuf_r+0x84>
 800a448:	6923      	ldr	r3, [r4, #16]
 800a44a:	b36b      	cbz	r3, 800a4a8 <__swbuf_r+0x84>
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	6820      	ldr	r0, [r4, #0]
 800a450:	1ac0      	subs	r0, r0, r3
 800a452:	6963      	ldr	r3, [r4, #20]
 800a454:	b2f6      	uxtb	r6, r6
 800a456:	4283      	cmp	r3, r0
 800a458:	4637      	mov	r7, r6
 800a45a:	dc04      	bgt.n	800a466 <__swbuf_r+0x42>
 800a45c:	4621      	mov	r1, r4
 800a45e:	4628      	mov	r0, r5
 800a460:	f000 f93c 	bl	800a6dc <_fflush_r>
 800a464:	bb30      	cbnz	r0, 800a4b4 <__swbuf_r+0x90>
 800a466:	68a3      	ldr	r3, [r4, #8]
 800a468:	3b01      	subs	r3, #1
 800a46a:	60a3      	str	r3, [r4, #8]
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	6022      	str	r2, [r4, #0]
 800a472:	701e      	strb	r6, [r3, #0]
 800a474:	6963      	ldr	r3, [r4, #20]
 800a476:	3001      	adds	r0, #1
 800a478:	4283      	cmp	r3, r0
 800a47a:	d004      	beq.n	800a486 <__swbuf_r+0x62>
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	07db      	lsls	r3, r3, #31
 800a480:	d506      	bpl.n	800a490 <__swbuf_r+0x6c>
 800a482:	2e0a      	cmp	r6, #10
 800a484:	d104      	bne.n	800a490 <__swbuf_r+0x6c>
 800a486:	4621      	mov	r1, r4
 800a488:	4628      	mov	r0, r5
 800a48a:	f000 f927 	bl	800a6dc <_fflush_r>
 800a48e:	b988      	cbnz	r0, 800a4b4 <__swbuf_r+0x90>
 800a490:	4638      	mov	r0, r7
 800a492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a494:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <__swbuf_r+0x9c>)
 800a496:	429c      	cmp	r4, r3
 800a498:	d101      	bne.n	800a49e <__swbuf_r+0x7a>
 800a49a:	68ac      	ldr	r4, [r5, #8]
 800a49c:	e7cf      	b.n	800a43e <__swbuf_r+0x1a>
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <__swbuf_r+0xa0>)
 800a4a0:	429c      	cmp	r4, r3
 800a4a2:	bf08      	it	eq
 800a4a4:	68ec      	ldreq	r4, [r5, #12]
 800a4a6:	e7ca      	b.n	800a43e <__swbuf_r+0x1a>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f000 f81a 	bl	800a4e4 <__swsetup_r>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d0cb      	beq.n	800a44c <__swbuf_r+0x28>
 800a4b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a4b8:	e7ea      	b.n	800a490 <__swbuf_r+0x6c>
 800a4ba:	bf00      	nop
 800a4bc:	0800b00c 	.word	0x0800b00c
 800a4c0:	0800b02c 	.word	0x0800b02c
 800a4c4:	0800afec 	.word	0x0800afec

0800a4c8 <__ascii_wctomb>:
 800a4c8:	b149      	cbz	r1, 800a4de <__ascii_wctomb+0x16>
 800a4ca:	2aff      	cmp	r2, #255	; 0xff
 800a4cc:	bf85      	ittet	hi
 800a4ce:	238a      	movhi	r3, #138	; 0x8a
 800a4d0:	6003      	strhi	r3, [r0, #0]
 800a4d2:	700a      	strbls	r2, [r1, #0]
 800a4d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4d8:	bf98      	it	ls
 800a4da:	2001      	movls	r0, #1
 800a4dc:	4770      	bx	lr
 800a4de:	4608      	mov	r0, r1
 800a4e0:	4770      	bx	lr
	...

0800a4e4 <__swsetup_r>:
 800a4e4:	4b32      	ldr	r3, [pc, #200]	; (800a5b0 <__swsetup_r+0xcc>)
 800a4e6:	b570      	push	{r4, r5, r6, lr}
 800a4e8:	681d      	ldr	r5, [r3, #0]
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	b125      	cbz	r5, 800a4fa <__swsetup_r+0x16>
 800a4f0:	69ab      	ldr	r3, [r5, #24]
 800a4f2:	b913      	cbnz	r3, 800a4fa <__swsetup_r+0x16>
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f000 f985 	bl	800a804 <__sinit>
 800a4fa:	4b2e      	ldr	r3, [pc, #184]	; (800a5b4 <__swsetup_r+0xd0>)
 800a4fc:	429c      	cmp	r4, r3
 800a4fe:	d10f      	bne.n	800a520 <__swsetup_r+0x3c>
 800a500:	686c      	ldr	r4, [r5, #4]
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a508:	0719      	lsls	r1, r3, #28
 800a50a:	d42c      	bmi.n	800a566 <__swsetup_r+0x82>
 800a50c:	06dd      	lsls	r5, r3, #27
 800a50e:	d411      	bmi.n	800a534 <__swsetup_r+0x50>
 800a510:	2309      	movs	r3, #9
 800a512:	6033      	str	r3, [r6, #0]
 800a514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a518:	81a3      	strh	r3, [r4, #12]
 800a51a:	f04f 30ff 	mov.w	r0, #4294967295
 800a51e:	e03e      	b.n	800a59e <__swsetup_r+0xba>
 800a520:	4b25      	ldr	r3, [pc, #148]	; (800a5b8 <__swsetup_r+0xd4>)
 800a522:	429c      	cmp	r4, r3
 800a524:	d101      	bne.n	800a52a <__swsetup_r+0x46>
 800a526:	68ac      	ldr	r4, [r5, #8]
 800a528:	e7eb      	b.n	800a502 <__swsetup_r+0x1e>
 800a52a:	4b24      	ldr	r3, [pc, #144]	; (800a5bc <__swsetup_r+0xd8>)
 800a52c:	429c      	cmp	r4, r3
 800a52e:	bf08      	it	eq
 800a530:	68ec      	ldreq	r4, [r5, #12]
 800a532:	e7e6      	b.n	800a502 <__swsetup_r+0x1e>
 800a534:	0758      	lsls	r0, r3, #29
 800a536:	d512      	bpl.n	800a55e <__swsetup_r+0x7a>
 800a538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a53a:	b141      	cbz	r1, 800a54e <__swsetup_r+0x6a>
 800a53c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a540:	4299      	cmp	r1, r3
 800a542:	d002      	beq.n	800a54a <__swsetup_r+0x66>
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff fd0b 	bl	8009f60 <_free_r>
 800a54a:	2300      	movs	r3, #0
 800a54c:	6363      	str	r3, [r4, #52]	; 0x34
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	2300      	movs	r3, #0
 800a558:	6063      	str	r3, [r4, #4]
 800a55a:	6923      	ldr	r3, [r4, #16]
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	f043 0308 	orr.w	r3, r3, #8
 800a564:	81a3      	strh	r3, [r4, #12]
 800a566:	6923      	ldr	r3, [r4, #16]
 800a568:	b94b      	cbnz	r3, 800a57e <__swsetup_r+0x9a>
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a574:	d003      	beq.n	800a57e <__swsetup_r+0x9a>
 800a576:	4621      	mov	r1, r4
 800a578:	4630      	mov	r0, r6
 800a57a:	f000 fa07 	bl	800a98c <__smakebuf_r>
 800a57e:	89a0      	ldrh	r0, [r4, #12]
 800a580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a584:	f010 0301 	ands.w	r3, r0, #1
 800a588:	d00a      	beq.n	800a5a0 <__swsetup_r+0xbc>
 800a58a:	2300      	movs	r3, #0
 800a58c:	60a3      	str	r3, [r4, #8]
 800a58e:	6963      	ldr	r3, [r4, #20]
 800a590:	425b      	negs	r3, r3
 800a592:	61a3      	str	r3, [r4, #24]
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	b943      	cbnz	r3, 800a5aa <__swsetup_r+0xc6>
 800a598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a59c:	d1ba      	bne.n	800a514 <__swsetup_r+0x30>
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	0781      	lsls	r1, r0, #30
 800a5a2:	bf58      	it	pl
 800a5a4:	6963      	ldrpl	r3, [r4, #20]
 800a5a6:	60a3      	str	r3, [r4, #8]
 800a5a8:	e7f4      	b.n	800a594 <__swsetup_r+0xb0>
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	e7f7      	b.n	800a59e <__swsetup_r+0xba>
 800a5ae:	bf00      	nop
 800a5b0:	20000180 	.word	0x20000180
 800a5b4:	0800b00c 	.word	0x0800b00c
 800a5b8:	0800b02c 	.word	0x0800b02c
 800a5bc:	0800afec 	.word	0x0800afec

0800a5c0 <abort>:
 800a5c0:	b508      	push	{r3, lr}
 800a5c2:	2006      	movs	r0, #6
 800a5c4:	f000 fa4a 	bl	800aa5c <raise>
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	f7f6 fe49 	bl	8001260 <_exit>
	...

0800a5d0 <__sflush_r>:
 800a5d0:	898a      	ldrh	r2, [r1, #12]
 800a5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	0710      	lsls	r0, r2, #28
 800a5da:	460c      	mov	r4, r1
 800a5dc:	d458      	bmi.n	800a690 <__sflush_r+0xc0>
 800a5de:	684b      	ldr	r3, [r1, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	dc05      	bgt.n	800a5f0 <__sflush_r+0x20>
 800a5e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	dc02      	bgt.n	800a5f0 <__sflush_r+0x20>
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5f2:	2e00      	cmp	r6, #0
 800a5f4:	d0f9      	beq.n	800a5ea <__sflush_r+0x1a>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5fc:	682f      	ldr	r7, [r5, #0]
 800a5fe:	602b      	str	r3, [r5, #0]
 800a600:	d032      	beq.n	800a668 <__sflush_r+0x98>
 800a602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	075a      	lsls	r2, r3, #29
 800a608:	d505      	bpl.n	800a616 <__sflush_r+0x46>
 800a60a:	6863      	ldr	r3, [r4, #4]
 800a60c:	1ac0      	subs	r0, r0, r3
 800a60e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a610:	b10b      	cbz	r3, 800a616 <__sflush_r+0x46>
 800a612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a614:	1ac0      	subs	r0, r0, r3
 800a616:	2300      	movs	r3, #0
 800a618:	4602      	mov	r2, r0
 800a61a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a61c:	6a21      	ldr	r1, [r4, #32]
 800a61e:	4628      	mov	r0, r5
 800a620:	47b0      	blx	r6
 800a622:	1c43      	adds	r3, r0, #1
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	d106      	bne.n	800a636 <__sflush_r+0x66>
 800a628:	6829      	ldr	r1, [r5, #0]
 800a62a:	291d      	cmp	r1, #29
 800a62c:	d82c      	bhi.n	800a688 <__sflush_r+0xb8>
 800a62e:	4a2a      	ldr	r2, [pc, #168]	; (800a6d8 <__sflush_r+0x108>)
 800a630:	40ca      	lsrs	r2, r1
 800a632:	07d6      	lsls	r6, r2, #31
 800a634:	d528      	bpl.n	800a688 <__sflush_r+0xb8>
 800a636:	2200      	movs	r2, #0
 800a638:	6062      	str	r2, [r4, #4]
 800a63a:	04d9      	lsls	r1, r3, #19
 800a63c:	6922      	ldr	r2, [r4, #16]
 800a63e:	6022      	str	r2, [r4, #0]
 800a640:	d504      	bpl.n	800a64c <__sflush_r+0x7c>
 800a642:	1c42      	adds	r2, r0, #1
 800a644:	d101      	bne.n	800a64a <__sflush_r+0x7a>
 800a646:	682b      	ldr	r3, [r5, #0]
 800a648:	b903      	cbnz	r3, 800a64c <__sflush_r+0x7c>
 800a64a:	6560      	str	r0, [r4, #84]	; 0x54
 800a64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a64e:	602f      	str	r7, [r5, #0]
 800a650:	2900      	cmp	r1, #0
 800a652:	d0ca      	beq.n	800a5ea <__sflush_r+0x1a>
 800a654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a658:	4299      	cmp	r1, r3
 800a65a:	d002      	beq.n	800a662 <__sflush_r+0x92>
 800a65c:	4628      	mov	r0, r5
 800a65e:	f7ff fc7f 	bl	8009f60 <_free_r>
 800a662:	2000      	movs	r0, #0
 800a664:	6360      	str	r0, [r4, #52]	; 0x34
 800a666:	e7c1      	b.n	800a5ec <__sflush_r+0x1c>
 800a668:	6a21      	ldr	r1, [r4, #32]
 800a66a:	2301      	movs	r3, #1
 800a66c:	4628      	mov	r0, r5
 800a66e:	47b0      	blx	r6
 800a670:	1c41      	adds	r1, r0, #1
 800a672:	d1c7      	bne.n	800a604 <__sflush_r+0x34>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0c4      	beq.n	800a604 <__sflush_r+0x34>
 800a67a:	2b1d      	cmp	r3, #29
 800a67c:	d001      	beq.n	800a682 <__sflush_r+0xb2>
 800a67e:	2b16      	cmp	r3, #22
 800a680:	d101      	bne.n	800a686 <__sflush_r+0xb6>
 800a682:	602f      	str	r7, [r5, #0]
 800a684:	e7b1      	b.n	800a5ea <__sflush_r+0x1a>
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	e7ad      	b.n	800a5ec <__sflush_r+0x1c>
 800a690:	690f      	ldr	r7, [r1, #16]
 800a692:	2f00      	cmp	r7, #0
 800a694:	d0a9      	beq.n	800a5ea <__sflush_r+0x1a>
 800a696:	0793      	lsls	r3, r2, #30
 800a698:	680e      	ldr	r6, [r1, #0]
 800a69a:	bf08      	it	eq
 800a69c:	694b      	ldreq	r3, [r1, #20]
 800a69e:	600f      	str	r7, [r1, #0]
 800a6a0:	bf18      	it	ne
 800a6a2:	2300      	movne	r3, #0
 800a6a4:	eba6 0807 	sub.w	r8, r6, r7
 800a6a8:	608b      	str	r3, [r1, #8]
 800a6aa:	f1b8 0f00 	cmp.w	r8, #0
 800a6ae:	dd9c      	ble.n	800a5ea <__sflush_r+0x1a>
 800a6b0:	6a21      	ldr	r1, [r4, #32]
 800a6b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6b4:	4643      	mov	r3, r8
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	47b0      	blx	r6
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	dc06      	bgt.n	800a6ce <__sflush_r+0xfe>
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c6:	81a3      	strh	r3, [r4, #12]
 800a6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6cc:	e78e      	b.n	800a5ec <__sflush_r+0x1c>
 800a6ce:	4407      	add	r7, r0
 800a6d0:	eba8 0800 	sub.w	r8, r8, r0
 800a6d4:	e7e9      	b.n	800a6aa <__sflush_r+0xda>
 800a6d6:	bf00      	nop
 800a6d8:	20400001 	.word	0x20400001

0800a6dc <_fflush_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	690b      	ldr	r3, [r1, #16]
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	b913      	cbnz	r3, 800a6ec <_fflush_r+0x10>
 800a6e6:	2500      	movs	r5, #0
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	b118      	cbz	r0, 800a6f6 <_fflush_r+0x1a>
 800a6ee:	6983      	ldr	r3, [r0, #24]
 800a6f0:	b90b      	cbnz	r3, 800a6f6 <_fflush_r+0x1a>
 800a6f2:	f000 f887 	bl	800a804 <__sinit>
 800a6f6:	4b14      	ldr	r3, [pc, #80]	; (800a748 <_fflush_r+0x6c>)
 800a6f8:	429c      	cmp	r4, r3
 800a6fa:	d11b      	bne.n	800a734 <_fflush_r+0x58>
 800a6fc:	686c      	ldr	r4, [r5, #4]
 800a6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0ef      	beq.n	800a6e6 <_fflush_r+0xa>
 800a706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a708:	07d0      	lsls	r0, r2, #31
 800a70a:	d404      	bmi.n	800a716 <_fflush_r+0x3a>
 800a70c:	0599      	lsls	r1, r3, #22
 800a70e:	d402      	bmi.n	800a716 <_fflush_r+0x3a>
 800a710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a712:	f000 f915 	bl	800a940 <__retarget_lock_acquire_recursive>
 800a716:	4628      	mov	r0, r5
 800a718:	4621      	mov	r1, r4
 800a71a:	f7ff ff59 	bl	800a5d0 <__sflush_r>
 800a71e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a720:	07da      	lsls	r2, r3, #31
 800a722:	4605      	mov	r5, r0
 800a724:	d4e0      	bmi.n	800a6e8 <_fflush_r+0xc>
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	059b      	lsls	r3, r3, #22
 800a72a:	d4dd      	bmi.n	800a6e8 <_fflush_r+0xc>
 800a72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a72e:	f000 f908 	bl	800a942 <__retarget_lock_release_recursive>
 800a732:	e7d9      	b.n	800a6e8 <_fflush_r+0xc>
 800a734:	4b05      	ldr	r3, [pc, #20]	; (800a74c <_fflush_r+0x70>)
 800a736:	429c      	cmp	r4, r3
 800a738:	d101      	bne.n	800a73e <_fflush_r+0x62>
 800a73a:	68ac      	ldr	r4, [r5, #8]
 800a73c:	e7df      	b.n	800a6fe <_fflush_r+0x22>
 800a73e:	4b04      	ldr	r3, [pc, #16]	; (800a750 <_fflush_r+0x74>)
 800a740:	429c      	cmp	r4, r3
 800a742:	bf08      	it	eq
 800a744:	68ec      	ldreq	r4, [r5, #12]
 800a746:	e7da      	b.n	800a6fe <_fflush_r+0x22>
 800a748:	0800b00c 	.word	0x0800b00c
 800a74c:	0800b02c 	.word	0x0800b02c
 800a750:	0800afec 	.word	0x0800afec

0800a754 <std>:
 800a754:	2300      	movs	r3, #0
 800a756:	b510      	push	{r4, lr}
 800a758:	4604      	mov	r4, r0
 800a75a:	e9c0 3300 	strd	r3, r3, [r0]
 800a75e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a762:	6083      	str	r3, [r0, #8]
 800a764:	8181      	strh	r1, [r0, #12]
 800a766:	6643      	str	r3, [r0, #100]	; 0x64
 800a768:	81c2      	strh	r2, [r0, #14]
 800a76a:	6183      	str	r3, [r0, #24]
 800a76c:	4619      	mov	r1, r3
 800a76e:	2208      	movs	r2, #8
 800a770:	305c      	adds	r0, #92	; 0x5c
 800a772:	f7fd fd61 	bl	8008238 <memset>
 800a776:	4b05      	ldr	r3, [pc, #20]	; (800a78c <std+0x38>)
 800a778:	6263      	str	r3, [r4, #36]	; 0x24
 800a77a:	4b05      	ldr	r3, [pc, #20]	; (800a790 <std+0x3c>)
 800a77c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a77e:	4b05      	ldr	r3, [pc, #20]	; (800a794 <std+0x40>)
 800a780:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a782:	4b05      	ldr	r3, [pc, #20]	; (800a798 <std+0x44>)
 800a784:	6224      	str	r4, [r4, #32]
 800a786:	6323      	str	r3, [r4, #48]	; 0x30
 800a788:	bd10      	pop	{r4, pc}
 800a78a:	bf00      	nop
 800a78c:	0800aa95 	.word	0x0800aa95
 800a790:	0800aab7 	.word	0x0800aab7
 800a794:	0800aaef 	.word	0x0800aaef
 800a798:	0800ab13 	.word	0x0800ab13

0800a79c <_cleanup_r>:
 800a79c:	4901      	ldr	r1, [pc, #4]	; (800a7a4 <_cleanup_r+0x8>)
 800a79e:	f000 b8af 	b.w	800a900 <_fwalk_reent>
 800a7a2:	bf00      	nop
 800a7a4:	0800a6dd 	.word	0x0800a6dd

0800a7a8 <__sfmoreglue>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	1e4a      	subs	r2, r1, #1
 800a7ac:	2568      	movs	r5, #104	; 0x68
 800a7ae:	4355      	muls	r5, r2
 800a7b0:	460e      	mov	r6, r1
 800a7b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7b6:	f7ff fc23 	bl	800a000 <_malloc_r>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	b140      	cbz	r0, 800a7d0 <__sfmoreglue+0x28>
 800a7be:	2100      	movs	r1, #0
 800a7c0:	e9c0 1600 	strd	r1, r6, [r0]
 800a7c4:	300c      	adds	r0, #12
 800a7c6:	60a0      	str	r0, [r4, #8]
 800a7c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a7cc:	f7fd fd34 	bl	8008238 <memset>
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}

0800a7d4 <__sfp_lock_acquire>:
 800a7d4:	4801      	ldr	r0, [pc, #4]	; (800a7dc <__sfp_lock_acquire+0x8>)
 800a7d6:	f000 b8b3 	b.w	800a940 <__retarget_lock_acquire_recursive>
 800a7da:	bf00      	nop
 800a7dc:	20001f2c 	.word	0x20001f2c

0800a7e0 <__sfp_lock_release>:
 800a7e0:	4801      	ldr	r0, [pc, #4]	; (800a7e8 <__sfp_lock_release+0x8>)
 800a7e2:	f000 b8ae 	b.w	800a942 <__retarget_lock_release_recursive>
 800a7e6:	bf00      	nop
 800a7e8:	20001f2c 	.word	0x20001f2c

0800a7ec <__sinit_lock_acquire>:
 800a7ec:	4801      	ldr	r0, [pc, #4]	; (800a7f4 <__sinit_lock_acquire+0x8>)
 800a7ee:	f000 b8a7 	b.w	800a940 <__retarget_lock_acquire_recursive>
 800a7f2:	bf00      	nop
 800a7f4:	20001f27 	.word	0x20001f27

0800a7f8 <__sinit_lock_release>:
 800a7f8:	4801      	ldr	r0, [pc, #4]	; (800a800 <__sinit_lock_release+0x8>)
 800a7fa:	f000 b8a2 	b.w	800a942 <__retarget_lock_release_recursive>
 800a7fe:	bf00      	nop
 800a800:	20001f27 	.word	0x20001f27

0800a804 <__sinit>:
 800a804:	b510      	push	{r4, lr}
 800a806:	4604      	mov	r4, r0
 800a808:	f7ff fff0 	bl	800a7ec <__sinit_lock_acquire>
 800a80c:	69a3      	ldr	r3, [r4, #24]
 800a80e:	b11b      	cbz	r3, 800a818 <__sinit+0x14>
 800a810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a814:	f7ff bff0 	b.w	800a7f8 <__sinit_lock_release>
 800a818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a81c:	6523      	str	r3, [r4, #80]	; 0x50
 800a81e:	4b13      	ldr	r3, [pc, #76]	; (800a86c <__sinit+0x68>)
 800a820:	4a13      	ldr	r2, [pc, #76]	; (800a870 <__sinit+0x6c>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	62a2      	str	r2, [r4, #40]	; 0x28
 800a826:	42a3      	cmp	r3, r4
 800a828:	bf04      	itt	eq
 800a82a:	2301      	moveq	r3, #1
 800a82c:	61a3      	streq	r3, [r4, #24]
 800a82e:	4620      	mov	r0, r4
 800a830:	f000 f820 	bl	800a874 <__sfp>
 800a834:	6060      	str	r0, [r4, #4]
 800a836:	4620      	mov	r0, r4
 800a838:	f000 f81c 	bl	800a874 <__sfp>
 800a83c:	60a0      	str	r0, [r4, #8]
 800a83e:	4620      	mov	r0, r4
 800a840:	f000 f818 	bl	800a874 <__sfp>
 800a844:	2200      	movs	r2, #0
 800a846:	60e0      	str	r0, [r4, #12]
 800a848:	2104      	movs	r1, #4
 800a84a:	6860      	ldr	r0, [r4, #4]
 800a84c:	f7ff ff82 	bl	800a754 <std>
 800a850:	68a0      	ldr	r0, [r4, #8]
 800a852:	2201      	movs	r2, #1
 800a854:	2109      	movs	r1, #9
 800a856:	f7ff ff7d 	bl	800a754 <std>
 800a85a:	68e0      	ldr	r0, [r4, #12]
 800a85c:	2202      	movs	r2, #2
 800a85e:	2112      	movs	r1, #18
 800a860:	f7ff ff78 	bl	800a754 <std>
 800a864:	2301      	movs	r3, #1
 800a866:	61a3      	str	r3, [r4, #24]
 800a868:	e7d2      	b.n	800a810 <__sinit+0xc>
 800a86a:	bf00      	nop
 800a86c:	0800ac68 	.word	0x0800ac68
 800a870:	0800a79d 	.word	0x0800a79d

0800a874 <__sfp>:
 800a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a876:	4607      	mov	r7, r0
 800a878:	f7ff ffac 	bl	800a7d4 <__sfp_lock_acquire>
 800a87c:	4b1e      	ldr	r3, [pc, #120]	; (800a8f8 <__sfp+0x84>)
 800a87e:	681e      	ldr	r6, [r3, #0]
 800a880:	69b3      	ldr	r3, [r6, #24]
 800a882:	b913      	cbnz	r3, 800a88a <__sfp+0x16>
 800a884:	4630      	mov	r0, r6
 800a886:	f7ff ffbd 	bl	800a804 <__sinit>
 800a88a:	3648      	adds	r6, #72	; 0x48
 800a88c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a890:	3b01      	subs	r3, #1
 800a892:	d503      	bpl.n	800a89c <__sfp+0x28>
 800a894:	6833      	ldr	r3, [r6, #0]
 800a896:	b30b      	cbz	r3, 800a8dc <__sfp+0x68>
 800a898:	6836      	ldr	r6, [r6, #0]
 800a89a:	e7f7      	b.n	800a88c <__sfp+0x18>
 800a89c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8a0:	b9d5      	cbnz	r5, 800a8d8 <__sfp+0x64>
 800a8a2:	4b16      	ldr	r3, [pc, #88]	; (800a8fc <__sfp+0x88>)
 800a8a4:	60e3      	str	r3, [r4, #12]
 800a8a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8aa:	6665      	str	r5, [r4, #100]	; 0x64
 800a8ac:	f000 f847 	bl	800a93e <__retarget_lock_init_recursive>
 800a8b0:	f7ff ff96 	bl	800a7e0 <__sfp_lock_release>
 800a8b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a8b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8bc:	6025      	str	r5, [r4, #0]
 800a8be:	61a5      	str	r5, [r4, #24]
 800a8c0:	2208      	movs	r2, #8
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8c8:	f7fd fcb6 	bl	8008238 <memset>
 800a8cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a8d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d8:	3468      	adds	r4, #104	; 0x68
 800a8da:	e7d9      	b.n	800a890 <__sfp+0x1c>
 800a8dc:	2104      	movs	r1, #4
 800a8de:	4638      	mov	r0, r7
 800a8e0:	f7ff ff62 	bl	800a7a8 <__sfmoreglue>
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	6030      	str	r0, [r6, #0]
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d1d5      	bne.n	800a898 <__sfp+0x24>
 800a8ec:	f7ff ff78 	bl	800a7e0 <__sfp_lock_release>
 800a8f0:	230c      	movs	r3, #12
 800a8f2:	603b      	str	r3, [r7, #0]
 800a8f4:	e7ee      	b.n	800a8d4 <__sfp+0x60>
 800a8f6:	bf00      	nop
 800a8f8:	0800ac68 	.word	0x0800ac68
 800a8fc:	ffff0001 	.word	0xffff0001

0800a900 <_fwalk_reent>:
 800a900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a904:	4606      	mov	r6, r0
 800a906:	4688      	mov	r8, r1
 800a908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a90c:	2700      	movs	r7, #0
 800a90e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a912:	f1b9 0901 	subs.w	r9, r9, #1
 800a916:	d505      	bpl.n	800a924 <_fwalk_reent+0x24>
 800a918:	6824      	ldr	r4, [r4, #0]
 800a91a:	2c00      	cmp	r4, #0
 800a91c:	d1f7      	bne.n	800a90e <_fwalk_reent+0xe>
 800a91e:	4638      	mov	r0, r7
 800a920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a924:	89ab      	ldrh	r3, [r5, #12]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d907      	bls.n	800a93a <_fwalk_reent+0x3a>
 800a92a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a92e:	3301      	adds	r3, #1
 800a930:	d003      	beq.n	800a93a <_fwalk_reent+0x3a>
 800a932:	4629      	mov	r1, r5
 800a934:	4630      	mov	r0, r6
 800a936:	47c0      	blx	r8
 800a938:	4307      	orrs	r7, r0
 800a93a:	3568      	adds	r5, #104	; 0x68
 800a93c:	e7e9      	b.n	800a912 <_fwalk_reent+0x12>

0800a93e <__retarget_lock_init_recursive>:
 800a93e:	4770      	bx	lr

0800a940 <__retarget_lock_acquire_recursive>:
 800a940:	4770      	bx	lr

0800a942 <__retarget_lock_release_recursive>:
 800a942:	4770      	bx	lr

0800a944 <__swhatbuf_r>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	460e      	mov	r6, r1
 800a948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94c:	2900      	cmp	r1, #0
 800a94e:	b096      	sub	sp, #88	; 0x58
 800a950:	4614      	mov	r4, r2
 800a952:	461d      	mov	r5, r3
 800a954:	da07      	bge.n	800a966 <__swhatbuf_r+0x22>
 800a956:	2300      	movs	r3, #0
 800a958:	602b      	str	r3, [r5, #0]
 800a95a:	89b3      	ldrh	r3, [r6, #12]
 800a95c:	061a      	lsls	r2, r3, #24
 800a95e:	d410      	bmi.n	800a982 <__swhatbuf_r+0x3e>
 800a960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a964:	e00e      	b.n	800a984 <__swhatbuf_r+0x40>
 800a966:	466a      	mov	r2, sp
 800a968:	f000 f8fa 	bl	800ab60 <_fstat_r>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	dbf2      	blt.n	800a956 <__swhatbuf_r+0x12>
 800a970:	9a01      	ldr	r2, [sp, #4]
 800a972:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a976:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a97a:	425a      	negs	r2, r3
 800a97c:	415a      	adcs	r2, r3
 800a97e:	602a      	str	r2, [r5, #0]
 800a980:	e7ee      	b.n	800a960 <__swhatbuf_r+0x1c>
 800a982:	2340      	movs	r3, #64	; 0x40
 800a984:	2000      	movs	r0, #0
 800a986:	6023      	str	r3, [r4, #0]
 800a988:	b016      	add	sp, #88	; 0x58
 800a98a:	bd70      	pop	{r4, r5, r6, pc}

0800a98c <__smakebuf_r>:
 800a98c:	898b      	ldrh	r3, [r1, #12]
 800a98e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a990:	079d      	lsls	r5, r3, #30
 800a992:	4606      	mov	r6, r0
 800a994:	460c      	mov	r4, r1
 800a996:	d507      	bpl.n	800a9a8 <__smakebuf_r+0x1c>
 800a998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	6123      	str	r3, [r4, #16]
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	6163      	str	r3, [r4, #20]
 800a9a4:	b002      	add	sp, #8
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	ab01      	add	r3, sp, #4
 800a9aa:	466a      	mov	r2, sp
 800a9ac:	f7ff ffca 	bl	800a944 <__swhatbuf_r>
 800a9b0:	9900      	ldr	r1, [sp, #0]
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff fb23 	bl	800a000 <_malloc_r>
 800a9ba:	b948      	cbnz	r0, 800a9d0 <__smakebuf_r+0x44>
 800a9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c0:	059a      	lsls	r2, r3, #22
 800a9c2:	d4ef      	bmi.n	800a9a4 <__smakebuf_r+0x18>
 800a9c4:	f023 0303 	bic.w	r3, r3, #3
 800a9c8:	f043 0302 	orr.w	r3, r3, #2
 800a9cc:	81a3      	strh	r3, [r4, #12]
 800a9ce:	e7e3      	b.n	800a998 <__smakebuf_r+0xc>
 800a9d0:	4b0d      	ldr	r3, [pc, #52]	; (800aa08 <__smakebuf_r+0x7c>)
 800a9d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	6020      	str	r0, [r4, #0]
 800a9d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9dc:	81a3      	strh	r3, [r4, #12]
 800a9de:	9b00      	ldr	r3, [sp, #0]
 800a9e0:	6163      	str	r3, [r4, #20]
 800a9e2:	9b01      	ldr	r3, [sp, #4]
 800a9e4:	6120      	str	r0, [r4, #16]
 800a9e6:	b15b      	cbz	r3, 800aa00 <__smakebuf_r+0x74>
 800a9e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f000 f8c9 	bl	800ab84 <_isatty_r>
 800a9f2:	b128      	cbz	r0, 800aa00 <__smakebuf_r+0x74>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	f023 0303 	bic.w	r3, r3, #3
 800a9fa:	f043 0301 	orr.w	r3, r3, #1
 800a9fe:	81a3      	strh	r3, [r4, #12]
 800aa00:	89a0      	ldrh	r0, [r4, #12]
 800aa02:	4305      	orrs	r5, r0
 800aa04:	81a5      	strh	r5, [r4, #12]
 800aa06:	e7cd      	b.n	800a9a4 <__smakebuf_r+0x18>
 800aa08:	0800a79d 	.word	0x0800a79d

0800aa0c <_raise_r>:
 800aa0c:	291f      	cmp	r1, #31
 800aa0e:	b538      	push	{r3, r4, r5, lr}
 800aa10:	4604      	mov	r4, r0
 800aa12:	460d      	mov	r5, r1
 800aa14:	d904      	bls.n	800aa20 <_raise_r+0x14>
 800aa16:	2316      	movs	r3, #22
 800aa18:	6003      	str	r3, [r0, #0]
 800aa1a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa22:	b112      	cbz	r2, 800aa2a <_raise_r+0x1e>
 800aa24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa28:	b94b      	cbnz	r3, 800aa3e <_raise_r+0x32>
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 f830 	bl	800aa90 <_getpid_r>
 800aa30:	462a      	mov	r2, r5
 800aa32:	4601      	mov	r1, r0
 800aa34:	4620      	mov	r0, r4
 800aa36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa3a:	f000 b817 	b.w	800aa6c <_kill_r>
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d00a      	beq.n	800aa58 <_raise_r+0x4c>
 800aa42:	1c59      	adds	r1, r3, #1
 800aa44:	d103      	bne.n	800aa4e <_raise_r+0x42>
 800aa46:	2316      	movs	r3, #22
 800aa48:	6003      	str	r3, [r0, #0]
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	e7e7      	b.n	800aa1e <_raise_r+0x12>
 800aa4e:	2400      	movs	r4, #0
 800aa50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa54:	4628      	mov	r0, r5
 800aa56:	4798      	blx	r3
 800aa58:	2000      	movs	r0, #0
 800aa5a:	e7e0      	b.n	800aa1e <_raise_r+0x12>

0800aa5c <raise>:
 800aa5c:	4b02      	ldr	r3, [pc, #8]	; (800aa68 <raise+0xc>)
 800aa5e:	4601      	mov	r1, r0
 800aa60:	6818      	ldr	r0, [r3, #0]
 800aa62:	f7ff bfd3 	b.w	800aa0c <_raise_r>
 800aa66:	bf00      	nop
 800aa68:	20000180 	.word	0x20000180

0800aa6c <_kill_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d07      	ldr	r5, [pc, #28]	; (800aa8c <_kill_r+0x20>)
 800aa70:	2300      	movs	r3, #0
 800aa72:	4604      	mov	r4, r0
 800aa74:	4608      	mov	r0, r1
 800aa76:	4611      	mov	r1, r2
 800aa78:	602b      	str	r3, [r5, #0]
 800aa7a:	f7f6 fbe1 	bl	8001240 <_kill>
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	d102      	bne.n	800aa88 <_kill_r+0x1c>
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	b103      	cbz	r3, 800aa88 <_kill_r+0x1c>
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	bd38      	pop	{r3, r4, r5, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20001f20 	.word	0x20001f20

0800aa90 <_getpid_r>:
 800aa90:	f7f6 bbce 	b.w	8001230 <_getpid>

0800aa94 <__sread>:
 800aa94:	b510      	push	{r4, lr}
 800aa96:	460c      	mov	r4, r1
 800aa98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa9c:	f000 f894 	bl	800abc8 <_read_r>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	bfab      	itete	ge
 800aaa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aaa6:	89a3      	ldrhlt	r3, [r4, #12]
 800aaa8:	181b      	addge	r3, r3, r0
 800aaaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aaae:	bfac      	ite	ge
 800aab0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aab2:	81a3      	strhlt	r3, [r4, #12]
 800aab4:	bd10      	pop	{r4, pc}

0800aab6 <__swrite>:
 800aab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaba:	461f      	mov	r7, r3
 800aabc:	898b      	ldrh	r3, [r1, #12]
 800aabe:	05db      	lsls	r3, r3, #23
 800aac0:	4605      	mov	r5, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	4616      	mov	r6, r2
 800aac6:	d505      	bpl.n	800aad4 <__swrite+0x1e>
 800aac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aacc:	2302      	movs	r3, #2
 800aace:	2200      	movs	r2, #0
 800aad0:	f000 f868 	bl	800aba4 <_lseek_r>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	4632      	mov	r2, r6
 800aae2:	463b      	mov	r3, r7
 800aae4:	4628      	mov	r0, r5
 800aae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaea:	f000 b817 	b.w	800ab1c <_write_r>

0800aaee <__sseek>:
 800aaee:	b510      	push	{r4, lr}
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf6:	f000 f855 	bl	800aba4 <_lseek_r>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	89a3      	ldrh	r3, [r4, #12]
 800aafe:	bf15      	itete	ne
 800ab00:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab0a:	81a3      	strheq	r3, [r4, #12]
 800ab0c:	bf18      	it	ne
 800ab0e:	81a3      	strhne	r3, [r4, #12]
 800ab10:	bd10      	pop	{r4, pc}

0800ab12 <__sclose>:
 800ab12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab16:	f000 b813 	b.w	800ab40 <_close_r>
	...

0800ab1c <_write_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	4d07      	ldr	r5, [pc, #28]	; (800ab3c <_write_r+0x20>)
 800ab20:	4604      	mov	r4, r0
 800ab22:	4608      	mov	r0, r1
 800ab24:	4611      	mov	r1, r2
 800ab26:	2200      	movs	r2, #0
 800ab28:	602a      	str	r2, [r5, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f7f6 fbbf 	bl	80012ae <_write>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_write_r+0x1e>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_write_r+0x1e>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	20001f20 	.word	0x20001f20

0800ab40 <_close_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4d06      	ldr	r5, [pc, #24]	; (800ab5c <_close_r+0x1c>)
 800ab44:	2300      	movs	r3, #0
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	602b      	str	r3, [r5, #0]
 800ab4c:	f7f6 fbcb 	bl	80012e6 <_close>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_close_r+0x1a>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_close_r+0x1a>
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	20001f20 	.word	0x20001f20

0800ab60 <_fstat_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d07      	ldr	r5, [pc, #28]	; (800ab80 <_fstat_r+0x20>)
 800ab64:	2300      	movs	r3, #0
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	602b      	str	r3, [r5, #0]
 800ab6e:	f7f6 fbc6 	bl	80012fe <_fstat>
 800ab72:	1c43      	adds	r3, r0, #1
 800ab74:	d102      	bne.n	800ab7c <_fstat_r+0x1c>
 800ab76:	682b      	ldr	r3, [r5, #0]
 800ab78:	b103      	cbz	r3, 800ab7c <_fstat_r+0x1c>
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	bd38      	pop	{r3, r4, r5, pc}
 800ab7e:	bf00      	nop
 800ab80:	20001f20 	.word	0x20001f20

0800ab84 <_isatty_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4d06      	ldr	r5, [pc, #24]	; (800aba0 <_isatty_r+0x1c>)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	602b      	str	r3, [r5, #0]
 800ab90:	f7f6 fbc5 	bl	800131e <_isatty>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_isatty_r+0x1a>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_isatty_r+0x1a>
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	20001f20 	.word	0x20001f20

0800aba4 <_lseek_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d07      	ldr	r5, [pc, #28]	; (800abc4 <_lseek_r+0x20>)
 800aba8:	4604      	mov	r4, r0
 800abaa:	4608      	mov	r0, r1
 800abac:	4611      	mov	r1, r2
 800abae:	2200      	movs	r2, #0
 800abb0:	602a      	str	r2, [r5, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	f7f6 fbbe 	bl	8001334 <_lseek>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_lseek_r+0x1e>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_lseek_r+0x1e>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	20001f20 	.word	0x20001f20

0800abc8 <_read_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d07      	ldr	r5, [pc, #28]	; (800abe8 <_read_r+0x20>)
 800abcc:	4604      	mov	r4, r0
 800abce:	4608      	mov	r0, r1
 800abd0:	4611      	mov	r1, r2
 800abd2:	2200      	movs	r2, #0
 800abd4:	602a      	str	r2, [r5, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	f7f6 fb4c 	bl	8001274 <_read>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d102      	bne.n	800abe6 <_read_r+0x1e>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	b103      	cbz	r3, 800abe6 <_read_r+0x1e>
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	20001f20 	.word	0x20001f20

0800abec <_init>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr

0800abf8 <_fini>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr
